/*
Infrastructure API

Fluidstack Infrastructure API

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the SlurmNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SlurmNode{}

// SlurmNode Slurm Node
type SlurmNode struct {
	// Name of the node
	Name string `json:"name"`
	// Unique identifier of the instance backing the node
	InstanceID string `json:"instanceID"`
	// States of the node
	States []string `json:"states"`
	// Version of slurmd running on the node
	SlurmdVersion        string `json:"slurmdVersion"`
	AdditionalProperties map[string]interface{}
}

type _SlurmNode SlurmNode

// NewSlurmNode instantiates a new SlurmNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlurmNode(name string, instanceID string, states []string, slurmdVersion string) *SlurmNode {
	this := SlurmNode{}
	this.Name = name
	this.InstanceID = instanceID
	this.States = states
	this.SlurmdVersion = slurmdVersion
	return &this
}

// NewSlurmNodeWithDefaults instantiates a new SlurmNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlurmNodeWithDefaults() *SlurmNode {
	this := SlurmNode{}
	return &this
}

// GetName returns the Name field value
func (o *SlurmNode) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SlurmNode) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SlurmNode) SetName(v string) {
	o.Name = v
}

// GetInstanceID returns the InstanceID field value
func (o *SlurmNode) GetInstanceID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceID
}

// GetInstanceIDOk returns a tuple with the InstanceID field value
// and a boolean to check if the value has been set.
func (o *SlurmNode) GetInstanceIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceID, true
}

// SetInstanceID sets field value
func (o *SlurmNode) SetInstanceID(v string) {
	o.InstanceID = v
}

// GetStates returns the States field value
func (o *SlurmNode) GetStates() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.States
}

// GetStatesOk returns a tuple with the States field value
// and a boolean to check if the value has been set.
func (o *SlurmNode) GetStatesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.States, true
}

// SetStates sets field value
func (o *SlurmNode) SetStates(v []string) {
	o.States = v
}

// GetSlurmdVersion returns the SlurmdVersion field value
func (o *SlurmNode) GetSlurmdVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SlurmdVersion
}

// GetSlurmdVersionOk returns a tuple with the SlurmdVersion field value
// and a boolean to check if the value has been set.
func (o *SlurmNode) GetSlurmdVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SlurmdVersion, true
}

// SetSlurmdVersion sets field value
func (o *SlurmNode) SetSlurmdVersion(v string) {
	o.SlurmdVersion = v
}

func (o SlurmNode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SlurmNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["instanceID"] = o.InstanceID
	toSerialize["states"] = o.States
	toSerialize["slurmdVersion"] = o.SlurmdVersion

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SlurmNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"instanceID",
		"states",
		"slurmdVersion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSlurmNode := _SlurmNode{}

	err = json.Unmarshal(data, &varSlurmNode)

	if err != nil {
		return err
	}

	*o = SlurmNode(varSlurmNode)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "instanceID")
		delete(additionalProperties, "states")
		delete(additionalProperties, "slurmdVersion")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSlurmNode struct {
	value *SlurmNode
	isSet bool
}

func (v NullableSlurmNode) Get() *SlurmNode {
	return v.value
}

func (v *NullableSlurmNode) Set(val *SlurmNode) {
	v.value = val
	v.isSet = true
}

func (v NullableSlurmNode) IsSet() bool {
	return v.isSet
}

func (v *NullableSlurmNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlurmNode(val *SlurmNode) *NullableSlurmNode {
	return &NullableSlurmNode{value: val, isSet: true}
}

func (v NullableSlurmNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlurmNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
