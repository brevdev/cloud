/*
Infrastructure API

Fluidstack Infrastructure API

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the InstancesPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstancesPostRequest{}

// InstancesPostRequest POST request for a machine instance
type InstancesPostRequest struct {
	// Name of the instance
	Name string `json:"name"`
	// Instance type
	Type string `json:"type"`
	// Operating system image for the instance
	Image *string `json:"image,omitempty"`
	// Whether the instance is preemptible
	Preemptible *bool `json:"preemptible,omitempty"`
	// Whether the instance is ephemeral
	Ephemeral *bool `json:"ephemeral,omitempty"`
	// Base64-encoded cloud-init user data for instance initialization
	UserData NullableString `json:"userData,omitempty"`
	// List of filesystem UUIDs attached to the instance
	Filesystems []string `json:"filesystems,omitempty"`
	// Tags for the instance. Tag keys must be 1â€“63 characters, start and end with alphanumerics, and may include `-`, `_`, and `.`.
	Tags                 *map[string]string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstancesPostRequest InstancesPostRequest

// NewInstancesPostRequest instantiates a new InstancesPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstancesPostRequest(name string, type_ string) *InstancesPostRequest {
	this := InstancesPostRequest{}
	this.Name = name
	this.Type = type_
	var image string = "image://ubuntu22.04"
	this.Image = &image
	var preemptible bool = false
	this.Preemptible = &preemptible
	var ephemeral bool = false
	this.Ephemeral = &ephemeral
	return &this
}

// NewInstancesPostRequestWithDefaults instantiates a new InstancesPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstancesPostRequestWithDefaults() *InstancesPostRequest {
	this := InstancesPostRequest{}
	var image string = "image://ubuntu22.04"
	this.Image = &image
	var preemptible bool = false
	this.Preemptible = &preemptible
	var ephemeral bool = false
	this.Ephemeral = &ephemeral
	return &this
}

// GetName returns the Name field value
func (o *InstancesPostRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InstancesPostRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InstancesPostRequest) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *InstancesPostRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InstancesPostRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InstancesPostRequest) SetType(v string) {
	o.Type = v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *InstancesPostRequest) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancesPostRequest) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *InstancesPostRequest) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *InstancesPostRequest) SetImage(v string) {
	o.Image = &v
}

// GetPreemptible returns the Preemptible field value if set, zero value otherwise.
func (o *InstancesPostRequest) GetPreemptible() bool {
	if o == nil || IsNil(o.Preemptible) {
		var ret bool
		return ret
	}
	return *o.Preemptible
}

// GetPreemptibleOk returns a tuple with the Preemptible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancesPostRequest) GetPreemptibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Preemptible) {
		return nil, false
	}
	return o.Preemptible, true
}

// HasPreemptible returns a boolean if a field has been set.
func (o *InstancesPostRequest) HasPreemptible() bool {
	if o != nil && !IsNil(o.Preemptible) {
		return true
	}

	return false
}

// SetPreemptible gets a reference to the given bool and assigns it to the Preemptible field.
func (o *InstancesPostRequest) SetPreemptible(v bool) {
	o.Preemptible = &v
}

// GetEphemeral returns the Ephemeral field value if set, zero value otherwise.
func (o *InstancesPostRequest) GetEphemeral() bool {
	if o == nil || IsNil(o.Ephemeral) {
		var ret bool
		return ret
	}
	return *o.Ephemeral
}

// GetEphemeralOk returns a tuple with the Ephemeral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancesPostRequest) GetEphemeralOk() (*bool, bool) {
	if o == nil || IsNil(o.Ephemeral) {
		return nil, false
	}
	return o.Ephemeral, true
}

// HasEphemeral returns a boolean if a field has been set.
func (o *InstancesPostRequest) HasEphemeral() bool {
	if o != nil && !IsNil(o.Ephemeral) {
		return true
	}

	return false
}

// SetEphemeral gets a reference to the given bool and assigns it to the Ephemeral field.
func (o *InstancesPostRequest) SetEphemeral(v bool) {
	o.Ephemeral = &v
}

// GetUserData returns the UserData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstancesPostRequest) GetUserData() string {
	if o == nil || IsNil(o.UserData.Get()) {
		var ret string
		return ret
	}
	return *o.UserData.Get()
}

// GetUserDataOk returns a tuple with the UserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstancesPostRequest) GetUserDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserData.Get(), o.UserData.IsSet()
}

// HasUserData returns a boolean if a field has been set.
func (o *InstancesPostRequest) HasUserData() bool {
	if o != nil && o.UserData.IsSet() {
		return true
	}

	return false
}

// SetUserData gets a reference to the given NullableString and assigns it to the UserData field.
func (o *InstancesPostRequest) SetUserData(v string) {
	o.UserData.Set(&v)
}

// SetUserDataNil sets the value for UserData to be an explicit nil
func (o *InstancesPostRequest) SetUserDataNil() {
	o.UserData.Set(nil)
}

// UnsetUserData ensures that no value is present for UserData, not even an explicit nil
func (o *InstancesPostRequest) UnsetUserData() {
	o.UserData.Unset()
}

// GetFilesystems returns the Filesystems field value if set, zero value otherwise.
func (o *InstancesPostRequest) GetFilesystems() []string {
	if o == nil || IsNil(o.Filesystems) {
		var ret []string
		return ret
	}
	return o.Filesystems
}

// GetFilesystemsOk returns a tuple with the Filesystems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancesPostRequest) GetFilesystemsOk() ([]string, bool) {
	if o == nil || IsNil(o.Filesystems) {
		return nil, false
	}
	return o.Filesystems, true
}

// HasFilesystems returns a boolean if a field has been set.
func (o *InstancesPostRequest) HasFilesystems() bool {
	if o != nil && !IsNil(o.Filesystems) {
		return true
	}

	return false
}

// SetFilesystems gets a reference to the given []string and assigns it to the Filesystems field.
func (o *InstancesPostRequest) SetFilesystems(v []string) {
	o.Filesystems = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *InstancesPostRequest) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancesPostRequest) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *InstancesPostRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *InstancesPostRequest) SetTags(v map[string]string) {
	o.Tags = &v
}

func (o InstancesPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstancesPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.Preemptible) {
		toSerialize["preemptible"] = o.Preemptible
	}
	if !IsNil(o.Ephemeral) {
		toSerialize["ephemeral"] = o.Ephemeral
	}
	if o.UserData.IsSet() {
		toSerialize["userData"] = o.UserData.Get()
	}
	if !IsNil(o.Filesystems) {
		toSerialize["filesystems"] = o.Filesystems
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstancesPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstancesPostRequest := _InstancesPostRequest{}

	err = json.Unmarshal(data, &varInstancesPostRequest)

	if err != nil {
		return err
	}

	*o = InstancesPostRequest(varInstancesPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "image")
		delete(additionalProperties, "preemptible")
		delete(additionalProperties, "ephemeral")
		delete(additionalProperties, "userData")
		delete(additionalProperties, "filesystems")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstancesPostRequest struct {
	value *InstancesPostRequest
	isSet bool
}

func (v NullableInstancesPostRequest) Get() *InstancesPostRequest {
	return v.value
}

func (v *NullableInstancesPostRequest) Set(val *InstancesPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInstancesPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInstancesPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstancesPostRequest(val *InstancesPostRequest) *NullableInstancesPostRequest {
	return &NullableInstancesPostRequest{value: val, isSet: true}
}

func (v NullableInstancesPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstancesPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
