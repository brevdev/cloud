/*
Infrastructure API

Testing SlurmAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/brevdev/cloud/v1/fluidstack/gen/fluidstack"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_SlurmAPIService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SlurmAPIService CreateSlurmCluster", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SlurmAPI.CreateSlurmCluster(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SlurmAPIService CreateSlurmNodePool", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var clusterId string

		resp, httpRes, err := apiClient.SlurmAPI.CreateSlurmNodePool(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SlurmAPIService DeleteSlurmCluster", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		httpRes, err := apiClient.SlurmAPI.DeleteSlurmCluster(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SlurmAPIService DeleteSlurmNodePool", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var clusterId string
		var nodePoolId string

		httpRes, err := apiClient.SlurmAPI.DeleteSlurmNodePool(context.Background(), clusterId, nodePoolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SlurmAPIService GetSlurmCluster", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.SlurmAPI.GetSlurmCluster(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SlurmAPIService GetSlurmNodePool", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var clusterId string
		var nodePoolId string

		resp, httpRes, err := apiClient.SlurmAPI.GetSlurmNodePool(context.Background(), clusterId, nodePoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SlurmAPIService ListSlurmClusters", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SlurmAPI.ListSlurmClusters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SlurmAPIService ListSlurmNodePools", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var clusterId string

		resp, httpRes, err := apiClient.SlurmAPI.ListSlurmNodePools(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
