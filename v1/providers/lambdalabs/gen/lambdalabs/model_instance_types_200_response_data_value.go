/*
Lambda Cloud API

API for interacting with the Lambda GPU Cloud

API version: 1.5.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the InstanceTypes200ResponseDataValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceTypes200ResponseDataValue{}

// InstanceTypes200ResponseDataValue struct for InstanceTypes200ResponseDataValue
type InstanceTypes200ResponseDataValue struct {
	InstanceType InstanceType `json:"instance_type"`
	// List of regions, if any, that have this instance type available
	RegionsWithCapacityAvailable []Region `json:"regions_with_capacity_available"`
}

type _InstanceTypes200ResponseDataValue InstanceTypes200ResponseDataValue

// NewInstanceTypes200ResponseDataValue instantiates a new InstanceTypes200ResponseDataValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceTypes200ResponseDataValue(instanceType InstanceType, regionsWithCapacityAvailable []Region) *InstanceTypes200ResponseDataValue {
	this := InstanceTypes200ResponseDataValue{}
	this.InstanceType = instanceType
	this.RegionsWithCapacityAvailable = regionsWithCapacityAvailable
	return &this
}

// NewInstanceTypes200ResponseDataValueWithDefaults instantiates a new InstanceTypes200ResponseDataValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypes200ResponseDataValueWithDefaults() *InstanceTypes200ResponseDataValue {
	this := InstanceTypes200ResponseDataValue{}
	return &this
}

// GetInstanceType returns the InstanceType field value
func (o *InstanceTypes200ResponseDataValue) GetInstanceType() InstanceType {
	if o == nil {
		var ret InstanceType
		return ret
	}

	return o.InstanceType
}

// GetInstanceTypeOk returns a tuple with the InstanceType field value
// and a boolean to check if the value has been set.
func (o *InstanceTypes200ResponseDataValue) GetInstanceTypeOk() (*InstanceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceType, true
}

// SetInstanceType sets field value
func (o *InstanceTypes200ResponseDataValue) SetInstanceType(v InstanceType) {
	o.InstanceType = v
}

// GetRegionsWithCapacityAvailable returns the RegionsWithCapacityAvailable field value
func (o *InstanceTypes200ResponseDataValue) GetRegionsWithCapacityAvailable() []Region {
	if o == nil {
		var ret []Region
		return ret
	}

	return o.RegionsWithCapacityAvailable
}

// GetRegionsWithCapacityAvailableOk returns a tuple with the RegionsWithCapacityAvailable field value
// and a boolean to check if the value has been set.
func (o *InstanceTypes200ResponseDataValue) GetRegionsWithCapacityAvailableOk() ([]Region, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegionsWithCapacityAvailable, true
}

// SetRegionsWithCapacityAvailable sets field value
func (o *InstanceTypes200ResponseDataValue) SetRegionsWithCapacityAvailable(v []Region) {
	o.RegionsWithCapacityAvailable = v
}

func (o InstanceTypes200ResponseDataValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceTypes200ResponseDataValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instance_type"] = o.InstanceType
	toSerialize["regions_with_capacity_available"] = o.RegionsWithCapacityAvailable
	return toSerialize, nil
}

func (o *InstanceTypes200ResponseDataValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instance_type",
		"regions_with_capacity_available",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceTypes200ResponseDataValue := _InstanceTypes200ResponseDataValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstanceTypes200ResponseDataValue)

	if err != nil {
		return err
	}

	*o = InstanceTypes200ResponseDataValue(varInstanceTypes200ResponseDataValue)

	return err
}

type NullableInstanceTypes200ResponseDataValue struct {
	value *InstanceTypes200ResponseDataValue
	isSet bool
}

func (v NullableInstanceTypes200ResponseDataValue) Get() *InstanceTypes200ResponseDataValue {
	return v.value
}

func (v *NullableInstanceTypes200ResponseDataValue) Set(val *InstanceTypes200ResponseDataValue) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceTypes200ResponseDataValue) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceTypes200ResponseDataValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceTypes200ResponseDataValue(val *InstanceTypes200ResponseDataValue) *NullableInstanceTypes200ResponseDataValue {
	return &NullableInstanceTypes200ResponseDataValue{value: val, isSet: true}
}

func (v NullableInstanceTypes200ResponseDataValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceTypes200ResponseDataValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
