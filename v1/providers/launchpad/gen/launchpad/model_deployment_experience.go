/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DeploymentExperience - struct for DeploymentExperience
type DeploymentExperience struct {
	Experience *Experience
	String     *string
}

// ExperienceAsDeploymentExperience is a convenience function that returns Experience wrapped in DeploymentExperience
func ExperienceAsDeploymentExperience(v *Experience) DeploymentExperience {
	return DeploymentExperience{
		Experience: v,
	}
}

// stringAsDeploymentExperience is a convenience function that returns string wrapped in DeploymentExperience
func StringAsDeploymentExperience(v *string) DeploymentExperience {
	return DeploymentExperience{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *DeploymentExperience) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Experience
	err = newStrictDecoder(data).Decode(&dst.Experience)
	if err == nil {
		jsonExperience, _ := json.Marshal(dst.Experience)
		if string(jsonExperience) == "{}" { // empty struct
			dst.Experience = nil
		} else {
			if err = validator.Validate(dst.Experience); err != nil {
				dst.Experience = nil
			} else {
				match++
			}
		}
	} else {
		dst.Experience = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Experience = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DeploymentExperience)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DeploymentExperience)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DeploymentExperience) MarshalJSON() ([]byte, error) {
	if src.Experience != nil {
		return json.Marshal(&src.Experience)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DeploymentExperience) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Experience != nil {
		return obj.Experience
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableDeploymentExperience struct {
	value *DeploymentExperience
	isSet bool
}

func (v NullableDeploymentExperience) Get() *DeploymentExperience {
	return v.value
}

func (v *NullableDeploymentExperience) Set(val *DeploymentExperience) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentExperience) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentExperience) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentExperience(val *DeploymentExperience) *NullableDeploymentExperience {
	return &NullableDeploymentExperience{value: val, isSet: true}
}

func (v NullableDeploymentExperience) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentExperience) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
