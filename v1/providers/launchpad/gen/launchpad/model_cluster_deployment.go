/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ClusterDeployment - struct for ClusterDeployment
type ClusterDeployment struct {
	Deployment *Deployment
	String     *string
}

// DeploymentAsClusterDeployment is a convenience function that returns Deployment wrapped in ClusterDeployment
func DeploymentAsClusterDeployment(v *Deployment) ClusterDeployment {
	return ClusterDeployment{
		Deployment: v,
	}
}

// stringAsClusterDeployment is a convenience function that returns string wrapped in ClusterDeployment
func StringAsClusterDeployment(v *string) ClusterDeployment {
	return ClusterDeployment{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ClusterDeployment) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Deployment
	err = newStrictDecoder(data).Decode(&dst.Deployment)
	if err == nil {
		jsonDeployment, _ := json.Marshal(dst.Deployment)
		if string(jsonDeployment) == "{}" { // empty struct
			dst.Deployment = nil
		} else {
			if err = validator.Validate(dst.Deployment); err != nil {
				dst.Deployment = nil
			} else {
				match++
			}
		}
	} else {
		dst.Deployment = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Deployment = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ClusterDeployment)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ClusterDeployment)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ClusterDeployment) MarshalJSON() ([]byte, error) {
	if src.Deployment != nil {
		return json.Marshal(&src.Deployment)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ClusterDeployment) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Deployment != nil {
		return obj.Deployment
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableClusterDeployment struct {
	value *ClusterDeployment
	isSet bool
}

func (v NullableClusterDeployment) Get() *ClusterDeployment {
	return v.value
}

func (v *NullableClusterDeployment) Set(val *ClusterDeployment) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterDeployment) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterDeployment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterDeployment(val *ClusterDeployment) *NullableClusterDeployment {
	return &NullableClusterDeployment{value: val, isSet: true}
}

func (v NullableClusterDeployment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterDeployment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
