/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FcPlatformEnum * `docker` - docker * `k8s` - k8s
type FcPlatformEnum string

// List of FcPlatformEnum
const (
	FcPlatformDocker FcPlatformEnum = "docker"
	FcPlatformK8s    FcPlatformEnum = "k8s"
)

// All allowed values of FcPlatformEnum enum
var AllowedFcPlatformEnumEnumValues = []FcPlatformEnum{
	"docker",
	"k8s",
}

func (v *FcPlatformEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FcPlatformEnum(value)
	for _, existing := range AllowedFcPlatformEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FcPlatformEnum", value)
}

// NewFcPlatformEnumFromValue returns a pointer to a valid FcPlatformEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFcPlatformEnumFromValue(v string) (*FcPlatformEnum, error) {
	ev := FcPlatformEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FcPlatformEnum: valid values are %v", v, AllowedFcPlatformEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FcPlatformEnum) IsValid() bool {
	for _, existing := range AllowedFcPlatformEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FcPlatformEnum value
func (v FcPlatformEnum) Ptr() *FcPlatformEnum {
	return &v
}

type NullableFcPlatformEnum struct {
	value *FcPlatformEnum
	isSet bool
}

func (v NullableFcPlatformEnum) Get() *FcPlatformEnum {
	return v.value
}

func (v *NullableFcPlatformEnum) Set(val *FcPlatformEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFcPlatformEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFcPlatformEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFcPlatformEnum(val *FcPlatformEnum) *NullableFcPlatformEnum {
	return &NullableFcPlatformEnum{value: val, isSet: true}
}

func (v NullableFcPlatformEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFcPlatformEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
