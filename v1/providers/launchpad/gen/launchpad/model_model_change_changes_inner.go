/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ModelChangeChangesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelChangeChangesInner{}

// ModelChangeChangesInner struct for ModelChangeChangesInner
type ModelChangeChangesInner struct {
	Field                string                          `json:"field"`
	NewValue             ModelChangeChangesInnerNewValue `json:"new_value"`
	OldValue             ModelChangeChangesInnerNewValue `json:"old_value"`
	AdditionalProperties map[string]interface{}
}

type _ModelChangeChangesInner ModelChangeChangesInner

// NewModelChangeChangesInner instantiates a new ModelChangeChangesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelChangeChangesInner(field string, newValue ModelChangeChangesInnerNewValue, oldValue ModelChangeChangesInnerNewValue) *ModelChangeChangesInner {
	this := ModelChangeChangesInner{}
	this.Field = field
	this.NewValue = newValue
	this.OldValue = oldValue
	return &this
}

// NewModelChangeChangesInnerWithDefaults instantiates a new ModelChangeChangesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelChangeChangesInnerWithDefaults() *ModelChangeChangesInner {
	this := ModelChangeChangesInner{}
	return &this
}

// GetField returns the Field field value
func (o *ModelChangeChangesInner) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *ModelChangeChangesInner) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *ModelChangeChangesInner) SetField(v string) {
	o.Field = v
}

// GetNewValue returns the NewValue field value
func (o *ModelChangeChangesInner) GetNewValue() ModelChangeChangesInnerNewValue {
	if o == nil {
		var ret ModelChangeChangesInnerNewValue
		return ret
	}

	return o.NewValue
}

// GetNewValueOk returns a tuple with the NewValue field value
// and a boolean to check if the value has been set.
func (o *ModelChangeChangesInner) GetNewValueOk() (*ModelChangeChangesInnerNewValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewValue, true
}

// SetNewValue sets field value
func (o *ModelChangeChangesInner) SetNewValue(v ModelChangeChangesInnerNewValue) {
	o.NewValue = v
}

// GetOldValue returns the OldValue field value
func (o *ModelChangeChangesInner) GetOldValue() ModelChangeChangesInnerNewValue {
	if o == nil {
		var ret ModelChangeChangesInnerNewValue
		return ret
	}

	return o.OldValue
}

// GetOldValueOk returns a tuple with the OldValue field value
// and a boolean to check if the value has been set.
func (o *ModelChangeChangesInner) GetOldValueOk() (*ModelChangeChangesInnerNewValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OldValue, true
}

// SetOldValue sets field value
func (o *ModelChangeChangesInner) SetOldValue(v ModelChangeChangesInnerNewValue) {
	o.OldValue = v
}

func (o ModelChangeChangesInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelChangeChangesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	toSerialize["new_value"] = o.NewValue
	toSerialize["old_value"] = o.OldValue

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelChangeChangesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"field",
		"new_value",
		"old_value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelChangeChangesInner := _ModelChangeChangesInner{}

	err = json.Unmarshal(data, &varModelChangeChangesInner)

	if err != nil {
		return err
	}

	*o = ModelChangeChangesInner(varModelChangeChangesInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "field")
		delete(additionalProperties, "new_value")
		delete(additionalProperties, "old_value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelChangeChangesInner struct {
	value *ModelChangeChangesInner
	isSet bool
}

func (v NullableModelChangeChangesInner) Get() *ModelChangeChangesInner {
	return v.value
}

func (v *NullableModelChangeChangesInner) Set(val *ModelChangeChangesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableModelChangeChangesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableModelChangeChangesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelChangeChangesInner(val *ModelChangeChangesInner) *NullableModelChangeChangesInner {
	return &NullableModelChangeChangesInner{value: val, isSet: true}
}

func (v NullableModelChangeChangesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelChangeChangesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
