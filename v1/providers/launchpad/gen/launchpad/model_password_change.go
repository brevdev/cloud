/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the PasswordChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PasswordChange{}

// PasswordChange struct for PasswordChange
type PasswordChange struct {
	Username             string `json:"username"`
	Password             string `json:"password"`
	NewPassword          string `json:"new_password"`
	Result               string `json:"result"`
	AdditionalProperties map[string]interface{}
}

type _PasswordChange PasswordChange

// NewPasswordChange instantiates a new PasswordChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordChange(username string, password string, newPassword string, result string) *PasswordChange {
	this := PasswordChange{}
	this.Username = username
	this.Password = password
	this.NewPassword = newPassword
	this.Result = result
	return &this
}

// NewPasswordChangeWithDefaults instantiates a new PasswordChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordChangeWithDefaults() *PasswordChange {
	this := PasswordChange{}
	return &this
}

// GetUsername returns the Username field value
func (o *PasswordChange) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *PasswordChange) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *PasswordChange) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *PasswordChange) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *PasswordChange) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *PasswordChange) SetPassword(v string) {
	o.Password = v
}

// GetNewPassword returns the NewPassword field value
func (o *PasswordChange) GetNewPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value
// and a boolean to check if the value has been set.
func (o *PasswordChange) GetNewPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewPassword, true
}

// SetNewPassword sets field value
func (o *PasswordChange) SetNewPassword(v string) {
	o.NewPassword = v
}

// GetResult returns the Result field value
func (o *PasswordChange) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *PasswordChange) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *PasswordChange) SetResult(v string) {
	o.Result = v
}

func (o PasswordChange) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PasswordChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["password"] = o.Password
	toSerialize["new_password"] = o.NewPassword
	toSerialize["result"] = o.Result

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PasswordChange) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
		"password",
		"new_password",
		"result",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPasswordChange := _PasswordChange{}

	err = json.Unmarshal(data, &varPasswordChange)

	if err != nil {
		return err
	}

	*o = PasswordChange(varPasswordChange)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		delete(additionalProperties, "new_password")
		delete(additionalProperties, "result")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePasswordChange struct {
	value *PasswordChange
	isSet bool
}

func (v NullablePasswordChange) Get() *PasswordChange {
	return v.value
}

func (v *NullablePasswordChange) Set(val *PasswordChange) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordChange) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordChange(val *PasswordChange) *NullablePasswordChange {
	return &NullablePasswordChange{value: val, isSet: true}
}

func (v NullablePasswordChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
