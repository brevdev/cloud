/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// InventoryClustersAPIService InventoryClustersAPI service
type InventoryClustersAPIService service

type ApiInventoryClustersBulkPartialUpdateRequest struct {
	ctx               context.Context
	ApiService        *InventoryClustersAPIService
	clusterBulkUpdate *ClusterBulkUpdate
}

func (r ApiInventoryClustersBulkPartialUpdateRequest) ClusterBulkUpdate(clusterBulkUpdate ClusterBulkUpdate) ApiInventoryClustersBulkPartialUpdateRequest {
	r.clusterBulkUpdate = &clusterBulkUpdate
	return r
}

func (r ApiInventoryClustersBulkPartialUpdateRequest) Execute() (*ClusterBulkUpdate, *http.Response, error) {
	return r.ApiService.InventoryClustersBulkPartialUpdateExecute(r)
}

/*
InventoryClustersBulkPartialUpdate Method for InventoryClustersBulkPartialUpdate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInventoryClustersBulkPartialUpdateRequest
*/
func (a *InventoryClustersAPIService) InventoryClustersBulkPartialUpdate(ctx context.Context) ApiInventoryClustersBulkPartialUpdateRequest {
	return ApiInventoryClustersBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ClusterBulkUpdate
func (a *InventoryClustersAPIService) InventoryClustersBulkPartialUpdateExecute(r ApiInventoryClustersBulkPartialUpdateRequest) (*ClusterBulkUpdate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ClusterBulkUpdate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryClustersAPIService.InventoryClustersBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/clusters/bulk/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clusterBulkUpdate == nil {
		return localVarReturnValue, nil, reportError("clusterBulkUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clusterBulkUpdate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInventoryClustersCreateRequest struct {
	ctx        context.Context
	ApiService *InventoryClustersAPIService
	cluster    *Cluster
}

func (r ApiInventoryClustersCreateRequest) Cluster(cluster Cluster) ApiInventoryClustersCreateRequest {
	r.cluster = &cluster
	return r
}

func (r ApiInventoryClustersCreateRequest) Execute() (*Cluster, *http.Response, error) {
	return r.ApiService.InventoryClustersCreateExecute(r)
}

/*
InventoryClustersCreate Method for InventoryClustersCreate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInventoryClustersCreateRequest
*/
func (a *InventoryClustersAPIService) InventoryClustersCreate(ctx context.Context) ApiInventoryClustersCreateRequest {
	return ApiInventoryClustersCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Cluster
func (a *InventoryClustersAPIService) InventoryClustersCreateExecute(r ApiInventoryClustersCreateRequest) (*Cluster, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Cluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryClustersAPIService.InventoryClustersCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/clusters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cluster
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInventoryClustersDestroyRequest struct {
	ctx        context.Context
	ApiService *InventoryClustersAPIService
	id         string
}

func (r ApiInventoryClustersDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.InventoryClustersDestroyExecute(r)
}

/*
InventoryClustersDestroy Method for InventoryClustersDestroy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A UUID string identifying this cluster.
	@return ApiInventoryClustersDestroyRequest
*/
func (a *InventoryClustersAPIService) InventoryClustersDestroy(ctx context.Context, id string) ApiInventoryClustersDestroyRequest {
	return ApiInventoryClustersDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *InventoryClustersAPIService) InventoryClustersDestroyExecute(r ApiInventoryClustersDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryClustersAPIService.InventoryClustersDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/clusters/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInventoryClustersHistoryListRequest struct {
	ctx        context.Context
	ApiService *InventoryClustersAPIService
	id         string
	page       *int32
	pageSize   *int32
}

// A page number within the paginated result set.
func (r ApiInventoryClustersHistoryListRequest) Page(page int32) ApiInventoryClustersHistoryListRequest {
	r.page = &page
	return r
}

// Number of results to return per page.
func (r ApiInventoryClustersHistoryListRequest) PageSize(pageSize int32) ApiInventoryClustersHistoryListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiInventoryClustersHistoryListRequest) Execute() (*PaginatedModelChangeList, *http.Response, error) {
	return r.ApiService.InventoryClustersHistoryListExecute(r)
}

/*
InventoryClustersHistoryList Method for InventoryClustersHistoryList

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiInventoryClustersHistoryListRequest
*/
func (a *InventoryClustersAPIService) InventoryClustersHistoryList(ctx context.Context, id string) ApiInventoryClustersHistoryListRequest {
	return ApiInventoryClustersHistoryListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PaginatedModelChangeList
func (a *InventoryClustersAPIService) InventoryClustersHistoryListExecute(r ApiInventoryClustersHistoryListRequest) (*PaginatedModelChangeList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedModelChangeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryClustersAPIService.InventoryClustersHistoryList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/clusters/{id}/history/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInventoryClustersListRequest struct {
	ctx                     context.Context
	ApiService              *InventoryClustersAPIService
	available               *bool
	bastionName             *string
	deployment              *string
	enabled                 *bool
	expand                  *string
	experience              *string
	fields                  *string
	garageId                *string
	gpu                     *[]string
	gpuAlias                *string
	gpuCount                *float32
	gpuModel                *string
	hasDeployment           *bool
	hasRequestId            *bool
	hasWorkshopId           *bool
	id                      *string
	location                *string
	locationName            *string
	locationRegion          *string
	maintenance             *bool
	mgmtIp                  *string
	mgmtMac                 *string
	minGpuCount             *float32
	minNodeCount            *float32
	minProvisioningAttempts *int32
	minTenantCount          *float32
	netmask                 *int32
	nodeCount               *float32
	oem                     *string
	omit                    *string
	ordering                *string
	page                    *int32
	pageSize                *int32
	persist                 *bool
	provider                *string
	providerCapacity        *bool
	providerName            *string
	providerNodeId          *string
	provisionUser           *string
	provisioningAttempts    *int32
	provisioningState       *[]string
	publicAddress           *string
	rack                    *string
	requestId               *string
	reservation             *bool
	search                  *string
	systemArch              *string
	vlanId                  *int32
	workshop                *bool
	workshopId              *string
	workshopIdNot           *string
}

// Is the cluster currently available for provisioning?
func (r ApiInventoryClustersListRequest) Available(available bool) ApiInventoryClustersListRequest {
	r.available = &available
	return r
}

func (r ApiInventoryClustersListRequest) BastionName(bastionName string) ApiInventoryClustersListRequest {
	r.bastionName = &bastionName
	return r
}

func (r ApiInventoryClustersListRequest) Deployment(deployment string) ApiInventoryClustersListRequest {
	r.deployment = &deployment
	return r
}

func (r ApiInventoryClustersListRequest) Enabled(enabled bool) ApiInventoryClustersListRequest {
	r.enabled = &enabled
	return r
}

// Expand related field(s) instead of only showing a UUID. Separate nested relationships with a period (ex: \&quot;nodes.location\&quot;). Separate multiple fields with a comma (ex: \&quot;gpus,nodes\&quot;)
func (r ApiInventoryClustersListRequest) Expand(expand string) ApiInventoryClustersListRequest {
	r.expand = &expand
	return r
}

func (r ApiInventoryClustersListRequest) Experience(experience string) ApiInventoryClustersListRequest {
	r.experience = &experience
	return r
}

// Include only the specified fields in the response
func (r ApiInventoryClustersListRequest) Fields(fields string) ApiInventoryClustersListRequest {
	r.fields = &fields
	return r
}

// Only include clusters whose nodes have the given garage ID
func (r ApiInventoryClustersListRequest) GarageId(garageId string) ApiInventoryClustersListRequest {
	r.garageId = &garageId
	return r
}

// Multiple values may be separated by commas.
func (r ApiInventoryClustersListRequest) Gpu(gpu []string) ApiInventoryClustersListRequest {
	r.gpu = &gpu
	return r
}

// Alias for GPU plan (i.e. installed GPU type and count)
func (r ApiInventoryClustersListRequest) GpuAlias(gpuAlias string) ApiInventoryClustersListRequest {
	r.gpuAlias = &gpuAlias
	return r
}

// Only include clusters with a physical GPU count equal to this value
func (r ApiInventoryClustersListRequest) GpuCount(gpuCount float32) ApiInventoryClustersListRequest {
	r.gpuCount = &gpuCount
	return r
}

// Only include clusters with the given GPU model name
func (r ApiInventoryClustersListRequest) GpuModel(gpuModel string) ApiInventoryClustersListRequest {
	r.gpuModel = &gpuModel
	return r
}

func (r ApiInventoryClustersListRequest) HasDeployment(hasDeployment bool) ApiInventoryClustersListRequest {
	r.hasDeployment = &hasDeployment
	return r
}

func (r ApiInventoryClustersListRequest) HasRequestId(hasRequestId bool) ApiInventoryClustersListRequest {
	r.hasRequestId = &hasRequestId
	return r
}

func (r ApiInventoryClustersListRequest) HasWorkshopId(hasWorkshopId bool) ApiInventoryClustersListRequest {
	r.hasWorkshopId = &hasWorkshopId
	return r
}

func (r ApiInventoryClustersListRequest) Id(id string) ApiInventoryClustersListRequest {
	r.id = &id
	return r
}

func (r ApiInventoryClustersListRequest) Location(location string) ApiInventoryClustersListRequest {
	r.location = &location
	return r
}

// Only include clusters whose nodes are in the location with the given name
func (r ApiInventoryClustersListRequest) LocationName(locationName string) ApiInventoryClustersListRequest {
	r.locationName = &locationName
	return r
}

// Only include clusters whose nodes are in the location in the given region
func (r ApiInventoryClustersListRequest) LocationRegion(locationRegion string) ApiInventoryClustersListRequest {
	r.locationRegion = &locationRegion
	return r
}

func (r ApiInventoryClustersListRequest) Maintenance(maintenance bool) ApiInventoryClustersListRequest {
	r.maintenance = &maintenance
	return r
}

func (r ApiInventoryClustersListRequest) MgmtIp(mgmtIp string) ApiInventoryClustersListRequest {
	r.mgmtIp = &mgmtIp
	return r
}

func (r ApiInventoryClustersListRequest) MgmtMac(mgmtMac string) ApiInventoryClustersListRequest {
	r.mgmtMac = &mgmtMac
	return r
}

// Only include clusters that have a gpu_count greater than or equal to this value
func (r ApiInventoryClustersListRequest) MinGpuCount(minGpuCount float32) ApiInventoryClustersListRequest {
	r.minGpuCount = &minGpuCount
	return r
}

// Only include clusters that have a node_count greater than or equal to this value
func (r ApiInventoryClustersListRequest) MinNodeCount(minNodeCount float32) ApiInventoryClustersListRequest {
	r.minNodeCount = &minNodeCount
	return r
}

// Only include clusters that have a provisioning_attempts value greater than or equal to this value
func (r ApiInventoryClustersListRequest) MinProvisioningAttempts(minProvisioningAttempts int32) ApiInventoryClustersListRequest {
	r.minProvisioningAttempts = &minProvisioningAttempts
	return r
}

// Only include clusters whose number of tenant_ids is greater than or equal to this value
func (r ApiInventoryClustersListRequest) MinTenantCount(minTenantCount float32) ApiInventoryClustersListRequest {
	r.minTenantCount = &minTenantCount
	return r
}

func (r ApiInventoryClustersListRequest) Netmask(netmask int32) ApiInventoryClustersListRequest {
	r.netmask = &netmask
	return r
}

// Only include clusters with a node count equal to this value
func (r ApiInventoryClustersListRequest) NodeCount(nodeCount float32) ApiInventoryClustersListRequest {
	r.nodeCount = &nodeCount
	return r
}

// Only include clusters with nodes that have the given OEM ID
func (r ApiInventoryClustersListRequest) Oem(oem string) ApiInventoryClustersListRequest {
	r.oem = &oem
	return r
}

// Exclude the specified fields in the response
func (r ApiInventoryClustersListRequest) Omit(omit string) ApiInventoryClustersListRequest {
	r.omit = &omit
	return r
}

// Which field to use when ordering the results.
func (r ApiInventoryClustersListRequest) Ordering(ordering string) ApiInventoryClustersListRequest {
	r.ordering = &ordering
	return r
}

// A page number within the paginated result set.
func (r ApiInventoryClustersListRequest) Page(page int32) ApiInventoryClustersListRequest {
	r.page = &page
	return r
}

// Number of results to return per page.
func (r ApiInventoryClustersListRequest) PageSize(pageSize int32) ApiInventoryClustersListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiInventoryClustersListRequest) Persist(persist bool) ApiInventoryClustersListRequest {
	r.persist = &persist
	return r
}

func (r ApiInventoryClustersListRequest) Provider(provider string) ApiInventoryClustersListRequest {
	r.provider = &provider
	return r
}

func (r ApiInventoryClustersListRequest) ProviderCapacity(providerCapacity bool) ApiInventoryClustersListRequest {
	r.providerCapacity = &providerCapacity
	return r
}

// Only include clusters whose nodes are from the provider with the given name
func (r ApiInventoryClustersListRequest) ProviderName(providerName string) ApiInventoryClustersListRequest {
	r.providerName = &providerName
	return r
}

func (r ApiInventoryClustersListRequest) ProviderNodeId(providerNodeId string) ApiInventoryClustersListRequest {
	r.providerNodeId = &providerNodeId
	return r
}

func (r ApiInventoryClustersListRequest) ProvisionUser(provisionUser string) ApiInventoryClustersListRequest {
	r.provisionUser = &provisionUser
	return r
}

func (r ApiInventoryClustersListRequest) ProvisioningAttempts(provisioningAttempts int32) ApiInventoryClustersListRequest {
	r.provisioningAttempts = &provisioningAttempts
	return r
}

// Multiple values may be separated by commas.  * &#x60;deployed&#x60; - Cluster is in use by a deployment * &#x60;deploying&#x60; - Provisioning is in progress * &#x60;destroying&#x60; - Cluster is being destroyed * &#x60;pending&#x60; - Provisioning will begin soon * &#x60;ready&#x60; - Provisioning has completed and is ready for a deployment * &#x60;reserved&#x60; - Cluster is unprovisioned but reserved for later use * &#x60;unprovisioned&#x60; - Cluster has not yet been provisioned
func (r ApiInventoryClustersListRequest) ProvisioningState(provisioningState []string) ApiInventoryClustersListRequest {
	r.provisioningState = &provisioningState
	return r
}

func (r ApiInventoryClustersListRequest) PublicAddress(publicAddress string) ApiInventoryClustersListRequest {
	r.publicAddress = &publicAddress
	return r
}

// Only include clusters whose nodes are in the given rack
func (r ApiInventoryClustersListRequest) Rack(rack string) ApiInventoryClustersListRequest {
	r.rack = &rack
	return r
}

func (r ApiInventoryClustersListRequest) RequestId(requestId string) ApiInventoryClustersListRequest {
	r.requestId = &requestId
	return r
}

func (r ApiInventoryClustersListRequest) Reservation(reservation bool) ApiInventoryClustersListRequest {
	r.reservation = &reservation
	return r
}

// Search for clusters by bastion_name, experience id, gpu_alias, gpus model, id, mgmt_ip, mgmt_mac, netmask, nodes garage_id, nodes location name, nodes location provider name, nodes oem name, nodes provider_node_id, nodes rack, notes, provision_user, provisioning_state, public_address, request_id, tenant_ids, workshop_id
func (r ApiInventoryClustersListRequest) Search(search string) ApiInventoryClustersListRequest {
	r.search = &search
	return r
}

// Only include clusters whose nodes have the given CPU architecture
func (r ApiInventoryClustersListRequest) SystemArch(systemArch string) ApiInventoryClustersListRequest {
	r.systemArch = &systemArch
	return r
}

func (r ApiInventoryClustersListRequest) VlanId(vlanId int32) ApiInventoryClustersListRequest {
	r.vlanId = &vlanId
	return r
}

func (r ApiInventoryClustersListRequest) Workshop(workshop bool) ApiInventoryClustersListRequest {
	r.workshop = &workshop
	return r
}

func (r ApiInventoryClustersListRequest) WorkshopId(workshopId string) ApiInventoryClustersListRequest {
	r.workshopId = &workshopId
	return r
}

func (r ApiInventoryClustersListRequest) WorkshopIdNot(workshopIdNot string) ApiInventoryClustersListRequest {
	r.workshopIdNot = &workshopIdNot
	return r
}

func (r ApiInventoryClustersListRequest) Execute() (*PaginatedClusterList, *http.Response, error) {
	return r.ApiService.InventoryClustersListExecute(r)
}

/*
InventoryClustersList Method for InventoryClustersList

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInventoryClustersListRequest
*/
func (a *InventoryClustersAPIService) InventoryClustersList(ctx context.Context) ApiInventoryClustersListRequest {
	return ApiInventoryClustersListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedClusterList
func (a *InventoryClustersAPIService) InventoryClustersListExecute(r ApiInventoryClustersListRequest) (*PaginatedClusterList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedClusterList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryClustersAPIService.InventoryClustersList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/clusters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.available != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "available", r.available, "form", "")
	}
	if r.bastionName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bastion_name", r.bastionName, "form", "")
	}
	if r.deployment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deployment", r.deployment, "form", "")
	}
	if r.enabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enabled", r.enabled, "form", "")
	}
	if r.expand != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "form", "")
	}
	if r.experience != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "experience", r.experience, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.garageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "garage_id", r.garageId, "form", "")
	}
	if r.gpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gpu", r.gpu, "form", "csv")
	}
	if r.gpuAlias != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gpu_alias", r.gpuAlias, "form", "")
	}
	if r.gpuCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gpu_count", r.gpuCount, "form", "")
	}
	if r.gpuModel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gpu_model", r.gpuModel, "form", "")
	}
	if r.hasDeployment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_deployment", r.hasDeployment, "form", "")
	}
	if r.hasRequestId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_request_id", r.hasRequestId, "form", "")
	}
	if r.hasWorkshopId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_workshop_id", r.hasWorkshopId, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.location != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "location", r.location, "form", "")
	}
	if r.locationName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "location_name", r.locationName, "form", "")
	}
	if r.locationRegion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "location_region", r.locationRegion, "form", "")
	}
	if r.maintenance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maintenance", r.maintenance, "form", "")
	}
	if r.mgmtIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mgmt_ip", r.mgmtIp, "form", "")
	}
	if r.mgmtMac != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mgmt_mac", r.mgmtMac, "form", "")
	}
	if r.minGpuCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "min_gpu_count", r.minGpuCount, "form", "")
	}
	if r.minNodeCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "min_node_count", r.minNodeCount, "form", "")
	}
	if r.minProvisioningAttempts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "min_provisioning_attempts", r.minProvisioningAttempts, "form", "")
	}
	if r.minTenantCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "min_tenant_count", r.minTenantCount, "form", "")
	}
	if r.netmask != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "netmask", r.netmask, "form", "")
	}
	if r.nodeCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "node_count", r.nodeCount, "form", "")
	}
	if r.oem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "oem", r.oem, "form", "")
	}
	if r.omit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "omit", r.omit, "form", "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}
	if r.persist != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "persist", r.persist, "form", "")
	}
	if r.provider != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "provider", r.provider, "form", "")
	}
	if r.providerCapacity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "provider_capacity", r.providerCapacity, "form", "")
	}
	if r.providerName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "provider_name", r.providerName, "form", "")
	}
	if r.providerNodeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "provider_node_id", r.providerNodeId, "form", "")
	}
	if r.provisionUser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "provision_user", r.provisionUser, "form", "")
	}
	if r.provisioningAttempts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "provisioning_attempts", r.provisioningAttempts, "form", "")
	}
	if r.provisioningState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "provisioning_state", r.provisioningState, "form", "csv")
	}
	if r.publicAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "public_address", r.publicAddress, "form", "")
	}
	if r.rack != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rack", r.rack, "form", "")
	}
	if r.requestId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "request_id", r.requestId, "form", "")
	}
	if r.reservation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservation", r.reservation, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.systemArch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "system_arch", r.systemArch, "form", "")
	}
	if r.vlanId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vlan_id", r.vlanId, "form", "")
	}
	if r.workshop != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "workshop", r.workshop, "form", "")
	}
	if r.workshopId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "workshop_id", r.workshopId, "form", "")
	}
	if r.workshopIdNot != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "workshop_id_not", r.workshopIdNot, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInventoryClustersPartialUpdateRequest struct {
	ctx        context.Context
	ApiService *InventoryClustersAPIService
	id         string
	cluster    *Cluster
}

func (r ApiInventoryClustersPartialUpdateRequest) Cluster(cluster Cluster) ApiInventoryClustersPartialUpdateRequest {
	r.cluster = &cluster
	return r
}

func (r ApiInventoryClustersPartialUpdateRequest) Execute() (*Cluster, *http.Response, error) {
	return r.ApiService.InventoryClustersPartialUpdateExecute(r)
}

/*
InventoryClustersPartialUpdate Method for InventoryClustersPartialUpdate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A UUID string identifying this cluster.
	@return ApiInventoryClustersPartialUpdateRequest
*/
func (a *InventoryClustersAPIService) InventoryClustersPartialUpdate(ctx context.Context, id string) ApiInventoryClustersPartialUpdateRequest {
	return ApiInventoryClustersPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Cluster
func (a *InventoryClustersAPIService) InventoryClustersPartialUpdateExecute(r ApiInventoryClustersPartialUpdateRequest) (*Cluster, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Cluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryClustersAPIService.InventoryClustersPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/clusters/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cluster
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInventoryClustersRetrieveRequest struct {
	ctx        context.Context
	ApiService *InventoryClustersAPIService
	id         string
	expand     *string
	fields     *string
	omit       *string
}

// Expand related field(s) instead of only showing a UUID. Separate nested relationships with a period (ex: \&quot;nodes.location\&quot;). Separate multiple fields with a comma (ex: \&quot;gpus,nodes\&quot;)
func (r ApiInventoryClustersRetrieveRequest) Expand(expand string) ApiInventoryClustersRetrieveRequest {
	r.expand = &expand
	return r
}

// Include only the specified fields in the response
func (r ApiInventoryClustersRetrieveRequest) Fields(fields string) ApiInventoryClustersRetrieveRequest {
	r.fields = &fields
	return r
}

// Exclude the specified fields in the response
func (r ApiInventoryClustersRetrieveRequest) Omit(omit string) ApiInventoryClustersRetrieveRequest {
	r.omit = &omit
	return r
}

func (r ApiInventoryClustersRetrieveRequest) Execute() (*Cluster, *http.Response, error) {
	return r.ApiService.InventoryClustersRetrieveExecute(r)
}

/*
InventoryClustersRetrieve Method for InventoryClustersRetrieve

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A UUID string identifying this cluster.
	@return ApiInventoryClustersRetrieveRequest
*/
func (a *InventoryClustersAPIService) InventoryClustersRetrieve(ctx context.Context, id string) ApiInventoryClustersRetrieveRequest {
	return ApiInventoryClustersRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Cluster
func (a *InventoryClustersAPIService) InventoryClustersRetrieveExecute(r ApiInventoryClustersRetrieveRequest) (*Cluster, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Cluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryClustersAPIService.InventoryClustersRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/clusters/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.expand != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.omit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "omit", r.omit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInventoryClustersStatsRetrieveRequest struct {
	ctx        context.Context
	ApiService *InventoryClustersAPIService
}

func (r ApiInventoryClustersStatsRetrieveRequest) Execute() (*http.Response, error) {
	return r.ApiService.InventoryClustersStatsRetrieveExecute(r)
}

/*
InventoryClustersStatsRetrieve 🚧 [Beta Feature]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInventoryClustersStatsRetrieveRequest
*/
func (a *InventoryClustersAPIService) InventoryClustersStatsRetrieve(ctx context.Context) ApiInventoryClustersStatsRetrieveRequest {
	return ApiInventoryClustersStatsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *InventoryClustersAPIService) InventoryClustersStatsRetrieveExecute(r ApiInventoryClustersStatsRetrieveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryClustersAPIService.InventoryClustersStatsRetrieve")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/clusters/stats/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInventoryClustersTenantsCreateRequest struct {
	ctx        context.Context
	ApiService *InventoryClustersAPIService
	clusterId  string
	tenant     *Tenant
}

func (r ApiInventoryClustersTenantsCreateRequest) Tenant(tenant Tenant) ApiInventoryClustersTenantsCreateRequest {
	r.tenant = &tenant
	return r
}

func (r ApiInventoryClustersTenantsCreateRequest) Execute() (*Cluster, *http.Response, error) {
	return r.ApiService.InventoryClustersTenantsCreateExecute(r)
}

/*
InventoryClustersTenantsCreate Method for InventoryClustersTenantsCreate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clusterId
	@return ApiInventoryClustersTenantsCreateRequest
*/
func (a *InventoryClustersAPIService) InventoryClustersTenantsCreate(ctx context.Context, clusterId string) ApiInventoryClustersTenantsCreateRequest {
	return ApiInventoryClustersTenantsCreateRequest{
		ApiService: a,
		ctx:        ctx,
		clusterId:  clusterId,
	}
}

// Execute executes the request
//
//	@return Cluster
func (a *InventoryClustersAPIService) InventoryClustersTenantsCreateExecute(r ApiInventoryClustersTenantsCreateRequest) (*Cluster, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Cluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryClustersAPIService.InventoryClustersTenantsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/clusters/{cluster_id}/tenants/"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_id"+"}", url.PathEscape(parameterValueToString(r.clusterId, "clusterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenant == nil {
		return localVarReturnValue, nil, reportError("tenant is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tenant
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInventoryClustersTenantsDestroyRequest struct {
	ctx        context.Context
	ApiService *InventoryClustersAPIService
	clusterId  string
	id         string
}

func (r ApiInventoryClustersTenantsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.InventoryClustersTenantsDestroyExecute(r)
}

/*
InventoryClustersTenantsDestroy Method for InventoryClustersTenantsDestroy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clusterId
	@param id
	@return ApiInventoryClustersTenantsDestroyRequest
*/
func (a *InventoryClustersAPIService) InventoryClustersTenantsDestroy(ctx context.Context, clusterId string, id string) ApiInventoryClustersTenantsDestroyRequest {
	return ApiInventoryClustersTenantsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		clusterId:  clusterId,
		id:         id,
	}
}

// Execute executes the request
func (a *InventoryClustersAPIService) InventoryClustersTenantsDestroyExecute(r ApiInventoryClustersTenantsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryClustersAPIService.InventoryClustersTenantsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/clusters/{cluster_id}/tenants/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_id"+"}", url.PathEscape(parameterValueToString(r.clusterId, "clusterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInventoryClustersUpdateRequest struct {
	ctx        context.Context
	ApiService *InventoryClustersAPIService
	id         string
	cluster    *Cluster
}

func (r ApiInventoryClustersUpdateRequest) Cluster(cluster Cluster) ApiInventoryClustersUpdateRequest {
	r.cluster = &cluster
	return r
}

func (r ApiInventoryClustersUpdateRequest) Execute() (*Cluster, *http.Response, error) {
	return r.ApiService.InventoryClustersUpdateExecute(r)
}

/*
InventoryClustersUpdate Method for InventoryClustersUpdate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A UUID string identifying this cluster.
	@return ApiInventoryClustersUpdateRequest
*/
func (a *InventoryClustersAPIService) InventoryClustersUpdate(ctx context.Context, id string) ApiInventoryClustersUpdateRequest {
	return ApiInventoryClustersUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Cluster
func (a *InventoryClustersAPIService) InventoryClustersUpdateExecute(r ApiInventoryClustersUpdateRequest) (*Cluster, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Cluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryClustersAPIService.InventoryClustersUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/clusters/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cluster
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
