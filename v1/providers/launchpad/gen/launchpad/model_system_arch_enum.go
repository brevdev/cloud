/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SystemArchEnum * `amd64` - amd64 * `arm64` - arm64
type SystemArchEnum string

// List of SystemArchEnum
const (
	SystemArchAMD64 SystemArchEnum = "amd64"
	SystemArchARM64 SystemArchEnum = "arm64"
)

// All allowed values of SystemArchEnum enum
var AllowedSystemArchEnumEnumValues = []SystemArchEnum{
	"amd64",
	"arm64",
}

func (v *SystemArchEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemArchEnum(value)
	for _, existing := range AllowedSystemArchEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemArchEnum", value)
}

// NewSystemArchEnumFromValue returns a pointer to a valid SystemArchEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemArchEnumFromValue(v string) (*SystemArchEnum, error) {
	ev := SystemArchEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemArchEnum: valid values are %v", v, AllowedSystemArchEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemArchEnum) IsValid() bool {
	for _, existing := range AllowedSystemArchEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SystemArchEnum value
func (v SystemArchEnum) Ptr() *SystemArchEnum {
	return &v
}

type NullableSystemArchEnum struct {
	value *SystemArchEnum
	isSet bool
}

func (v NullableSystemArchEnum) Get() *SystemArchEnum {
	return v.value
}

func (v *NullableSystemArchEnum) Set(val *SystemArchEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemArchEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemArchEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemArchEnum(val *SystemArchEnum) *NullableSystemArchEnum {
	return &NullableSystemArchEnum{value: val, isSet: true}
}

func (v NullableSystemArchEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemArchEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
