/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ExperienceBulkUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExperienceBulkUpdate{}

// ExperienceBulkUpdate struct for ExperienceBulkUpdate
type ExperienceBulkUpdate struct {
	// User ID who is responsible for manual provisioning
	Assignee NullableString `json:"assignee,omitempty"`
	// Can the experience be provisioned without human approval?
	Autoapprove *bool `json:"autoapprove,omitempty"`
	// Can the experience be provisioned without human intervention?
	Autoprovision *bool `json:"autoprovision,omitempty"`
	// Can this experience be used to bootstrap another compatible experience?
	Bootstrap *bool `json:"bootstrap,omitempty"`
	// Unique ID for this experience in the sales catalog. Must be unique.
	CatalogId string `json:"catalog_id"`
	// Human-readable identifier for the experience in the sales catalog (ex: LP-15). Must be unique.
	CatalogIdAlias NullableString `json:"catalog_id_alias"`
	// Functional group that this experience is targetting  * `AI` - AI * `Clara` - Clara * `Data Science` - Data Science * `3D Design Collaboration and Simulation` - 3D Design Collaboration and Simulation * `Developer` - Developer * `Infrastructure Optimization` - Infrastructure Optimization
	Category CategoryEnum `json:"category"`
	// Ansible collection branch initialized within the pipeline
	CollectionBranch *string `json:"collection_branch,omitempty"`
	// Timestamp of when the object was created
	Created     time.Time      `json:"created"`
	Description NullableString `json:"description,omitempty"`
	// Experience name slug
	Experience string `json:"experience"`
	// Experience branch name used during deployment (default: origin/main)
	ExperienceBranch *string                `json:"experience_branch,omitempty"`
	FcPlatform       NullableFcPlatformEnum `json:"fc_platform,omitempty"`
	// Does the experience support Flight Control?
	FcSupport *bool `json:"fc_support,omitempty"`
	// ID of the garage where nodes for this experience should be selected from
	GarageId NullableString `json:"garage_id,omitempty"`
	// Ground Control branch name (default: main)
	GcBranch *string `json:"gc_branch,omitempty"`
	// Number of GPUs used
	GpuCount *int32 `json:"gpu_count,omitempty"`
	GpuOs    GpuOs  `json:"gpu_os"`
	Id       string `json:"id"`
	// Number of days without user interaction before the experience is torn down (default: 3)
	InactivityMax *int32 `json:"inactivity_max,omitempty"`
	// Default number of days a provisioned experience should remain active (default: 3). A null lifetime will cause a deployment to remain active indefinitely.
	Lifetime NullableInt32 `json:"lifetime,omitempty"`
	// Timestamp of when the object was last modified
	Modified time.Time `json:"modified"`
	// Number of Nodes used
	NodeCount *int32 `json:"node_count,omitempty"`
	Persona   string `json:"persona"`
	// Pipeline ID used for provisioning
	Pipeline int64 `json:"pipeline"`
	// Base platform that the experience will be provisioned onto  * `air` - NVIDIA Air * `flight_deck` - Flight Deck * `kvm_bastion` - KVM Bastion * `lp-vmware-platform` - lp-vmware-platform * `minimal` - minimal * `openshift` - OpenShift * `vsphere` - vSphere * `vsphere_horizon` - VMware Horizon * `vsphere7` - vSphere 7 * `vsphere8` - vSphere 8
	Platform PlatformEnum `json:"platform"`
	// If set, the experience must be provisioned to the given provider
	Provider NullableString `json:"provider,omitempty"`
	// Is the experience published for use?  * `draft` - draft * `no` - no * `yes` - yes
	Published *PublishedEnum `json:"published,omitempty"`
	// URL of the repository for provisioning automation
	Repo NullableString `json:"repo,omitempty"`
	// If set, the experience must be provisioned using one of the given GPU types. GPU requirements are evaluated in the order they are set (ex: [\"{l40s_gpu_uuid}\", \"{a100_gpu_uuid}\"] will prefer an l40s).
	RequiredGpus []string `json:"required_gpus,omitempty"`
	// Is this a persistent experience for SAs?
	SaLab *bool `json:"sa_lab,omitempty"`
	// Required CPU architecture  * `amd64` - amd64 * `arm64` - arm64
	SystemArch           SystemArchEnum          `json:"system_arch"`
	Title                string                  `json:"title"`
	VgpuProfile          NullableVgpuProfileEnum `json:"vgpu_profile,omitempty"`
	Count                int32                   `json:"count"`
	Ids                  []string                `json:"ids"`
	Result               string                  `json:"result"`
	AdditionalProperties map[string]interface{}
}

type _ExperienceBulkUpdate ExperienceBulkUpdate

// NewExperienceBulkUpdate instantiates a new ExperienceBulkUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExperienceBulkUpdate(catalogId string, catalogIdAlias NullableString, category CategoryEnum, created time.Time, experience string, gpuOs GpuOs, id string, modified time.Time, persona string, pipeline int64, platform PlatformEnum, systemArch SystemArchEnum, title string, count int32, ids []string, result string) *ExperienceBulkUpdate {
	this := ExperienceBulkUpdate{}
	this.CatalogId = catalogId
	this.CatalogIdAlias = catalogIdAlias
	this.Category = category
	this.Created = created
	this.Experience = experience
	this.GpuOs = gpuOs
	this.Id = id
	this.Modified = modified
	this.Persona = persona
	this.Pipeline = pipeline
	this.Platform = platform
	this.SystemArch = systemArch
	this.Title = title
	this.Count = count
	this.Ids = ids
	this.Result = result
	return &this
}

// NewExperienceBulkUpdateWithDefaults instantiates a new ExperienceBulkUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExperienceBulkUpdateWithDefaults() *ExperienceBulkUpdate {
	this := ExperienceBulkUpdate{}
	return &this
}

// GetAssignee returns the Assignee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExperienceBulkUpdate) GetAssignee() string {
	if o == nil || IsNil(o.Assignee.Get()) {
		var ret string
		return ret
	}
	return *o.Assignee.Get()
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperienceBulkUpdate) GetAssigneeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assignee.Get(), o.Assignee.IsSet()
}

// HasAssignee returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasAssignee() bool {
	if o != nil && o.Assignee.IsSet() {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given NullableString and assigns it to the Assignee field.
func (o *ExperienceBulkUpdate) SetAssignee(v string) {
	o.Assignee.Set(&v)
}

// SetAssigneeNil sets the value for Assignee to be an explicit nil
func (o *ExperienceBulkUpdate) SetAssigneeNil() {
	o.Assignee.Set(nil)
}

// UnsetAssignee ensures that no value is present for Assignee, not even an explicit nil
func (o *ExperienceBulkUpdate) UnsetAssignee() {
	o.Assignee.Unset()
}

// GetAutoapprove returns the Autoapprove field value if set, zero value otherwise.
func (o *ExperienceBulkUpdate) GetAutoapprove() bool {
	if o == nil || IsNil(o.Autoapprove) {
		var ret bool
		return ret
	}
	return *o.Autoapprove
}

// GetAutoapproveOk returns a tuple with the Autoapprove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetAutoapproveOk() (*bool, bool) {
	if o == nil || IsNil(o.Autoapprove) {
		return nil, false
	}
	return o.Autoapprove, true
}

// HasAutoapprove returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasAutoapprove() bool {
	if o != nil && !IsNil(o.Autoapprove) {
		return true
	}

	return false
}

// SetAutoapprove gets a reference to the given bool and assigns it to the Autoapprove field.
func (o *ExperienceBulkUpdate) SetAutoapprove(v bool) {
	o.Autoapprove = &v
}

// GetAutoprovision returns the Autoprovision field value if set, zero value otherwise.
func (o *ExperienceBulkUpdate) GetAutoprovision() bool {
	if o == nil || IsNil(o.Autoprovision) {
		var ret bool
		return ret
	}
	return *o.Autoprovision
}

// GetAutoprovisionOk returns a tuple with the Autoprovision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetAutoprovisionOk() (*bool, bool) {
	if o == nil || IsNil(o.Autoprovision) {
		return nil, false
	}
	return o.Autoprovision, true
}

// HasAutoprovision returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasAutoprovision() bool {
	if o != nil && !IsNil(o.Autoprovision) {
		return true
	}

	return false
}

// SetAutoprovision gets a reference to the given bool and assigns it to the Autoprovision field.
func (o *ExperienceBulkUpdate) SetAutoprovision(v bool) {
	o.Autoprovision = &v
}

// GetBootstrap returns the Bootstrap field value if set, zero value otherwise.
func (o *ExperienceBulkUpdate) GetBootstrap() bool {
	if o == nil || IsNil(o.Bootstrap) {
		var ret bool
		return ret
	}
	return *o.Bootstrap
}

// GetBootstrapOk returns a tuple with the Bootstrap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetBootstrapOk() (*bool, bool) {
	if o == nil || IsNil(o.Bootstrap) {
		return nil, false
	}
	return o.Bootstrap, true
}

// HasBootstrap returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasBootstrap() bool {
	if o != nil && !IsNil(o.Bootstrap) {
		return true
	}

	return false
}

// SetBootstrap gets a reference to the given bool and assigns it to the Bootstrap field.
func (o *ExperienceBulkUpdate) SetBootstrap(v bool) {
	o.Bootstrap = &v
}

// GetCatalogId returns the CatalogId field value
func (o *ExperienceBulkUpdate) GetCatalogId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CatalogId
}

// GetCatalogIdOk returns a tuple with the CatalogId field value
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetCatalogIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogId, true
}

// SetCatalogId sets field value
func (o *ExperienceBulkUpdate) SetCatalogId(v string) {
	o.CatalogId = v
}

// GetCatalogIdAlias returns the CatalogIdAlias field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ExperienceBulkUpdate) GetCatalogIdAlias() string {
	if o == nil || o.CatalogIdAlias.Get() == nil {
		var ret string
		return ret
	}

	return *o.CatalogIdAlias.Get()
}

// GetCatalogIdAliasOk returns a tuple with the CatalogIdAlias field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperienceBulkUpdate) GetCatalogIdAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CatalogIdAlias.Get(), o.CatalogIdAlias.IsSet()
}

// SetCatalogIdAlias sets field value
func (o *ExperienceBulkUpdate) SetCatalogIdAlias(v string) {
	o.CatalogIdAlias.Set(&v)
}

// GetCategory returns the Category field value
func (o *ExperienceBulkUpdate) GetCategory() CategoryEnum {
	if o == nil {
		var ret CategoryEnum
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetCategoryOk() (*CategoryEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *ExperienceBulkUpdate) SetCategory(v CategoryEnum) {
	o.Category = v
}

// GetCollectionBranch returns the CollectionBranch field value if set, zero value otherwise.
func (o *ExperienceBulkUpdate) GetCollectionBranch() string {
	if o == nil || IsNil(o.CollectionBranch) {
		var ret string
		return ret
	}
	return *o.CollectionBranch
}

// GetCollectionBranchOk returns a tuple with the CollectionBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetCollectionBranchOk() (*string, bool) {
	if o == nil || IsNil(o.CollectionBranch) {
		return nil, false
	}
	return o.CollectionBranch, true
}

// HasCollectionBranch returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasCollectionBranch() bool {
	if o != nil && !IsNil(o.CollectionBranch) {
		return true
	}

	return false
}

// SetCollectionBranch gets a reference to the given string and assigns it to the CollectionBranch field.
func (o *ExperienceBulkUpdate) SetCollectionBranch(v string) {
	o.CollectionBranch = &v
}

// GetCreated returns the Created field value
func (o *ExperienceBulkUpdate) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *ExperienceBulkUpdate) SetCreated(v time.Time) {
	o.Created = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExperienceBulkUpdate) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperienceBulkUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ExperienceBulkUpdate) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ExperienceBulkUpdate) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ExperienceBulkUpdate) UnsetDescription() {
	o.Description.Unset()
}

// GetExperience returns the Experience field value
func (o *ExperienceBulkUpdate) GetExperience() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Experience
}

// GetExperienceOk returns a tuple with the Experience field value
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetExperienceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Experience, true
}

// SetExperience sets field value
func (o *ExperienceBulkUpdate) SetExperience(v string) {
	o.Experience = v
}

// GetExperienceBranch returns the ExperienceBranch field value if set, zero value otherwise.
func (o *ExperienceBulkUpdate) GetExperienceBranch() string {
	if o == nil || IsNil(o.ExperienceBranch) {
		var ret string
		return ret
	}
	return *o.ExperienceBranch
}

// GetExperienceBranchOk returns a tuple with the ExperienceBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetExperienceBranchOk() (*string, bool) {
	if o == nil || IsNil(o.ExperienceBranch) {
		return nil, false
	}
	return o.ExperienceBranch, true
}

// HasExperienceBranch returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasExperienceBranch() bool {
	if o != nil && !IsNil(o.ExperienceBranch) {
		return true
	}

	return false
}

// SetExperienceBranch gets a reference to the given string and assigns it to the ExperienceBranch field.
func (o *ExperienceBulkUpdate) SetExperienceBranch(v string) {
	o.ExperienceBranch = &v
}

// GetFcPlatform returns the FcPlatform field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExperienceBulkUpdate) GetFcPlatform() FcPlatformEnum {
	if o == nil || IsNil(o.FcPlatform.Get()) {
		var ret FcPlatformEnum
		return ret
	}
	return *o.FcPlatform.Get()
}

// GetFcPlatformOk returns a tuple with the FcPlatform field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperienceBulkUpdate) GetFcPlatformOk() (*FcPlatformEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.FcPlatform.Get(), o.FcPlatform.IsSet()
}

// HasFcPlatform returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasFcPlatform() bool {
	if o != nil && o.FcPlatform.IsSet() {
		return true
	}

	return false
}

// SetFcPlatform gets a reference to the given NullableFcPlatformEnum and assigns it to the FcPlatform field.
func (o *ExperienceBulkUpdate) SetFcPlatform(v FcPlatformEnum) {
	o.FcPlatform.Set(&v)
}

// SetFcPlatformNil sets the value for FcPlatform to be an explicit nil
func (o *ExperienceBulkUpdate) SetFcPlatformNil() {
	o.FcPlatform.Set(nil)
}

// UnsetFcPlatform ensures that no value is present for FcPlatform, not even an explicit nil
func (o *ExperienceBulkUpdate) UnsetFcPlatform() {
	o.FcPlatform.Unset()
}

// GetFcSupport returns the FcSupport field value if set, zero value otherwise.
func (o *ExperienceBulkUpdate) GetFcSupport() bool {
	if o == nil || IsNil(o.FcSupport) {
		var ret bool
		return ret
	}
	return *o.FcSupport
}

// GetFcSupportOk returns a tuple with the FcSupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetFcSupportOk() (*bool, bool) {
	if o == nil || IsNil(o.FcSupport) {
		return nil, false
	}
	return o.FcSupport, true
}

// HasFcSupport returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasFcSupport() bool {
	if o != nil && !IsNil(o.FcSupport) {
		return true
	}

	return false
}

// SetFcSupport gets a reference to the given bool and assigns it to the FcSupport field.
func (o *ExperienceBulkUpdate) SetFcSupport(v bool) {
	o.FcSupport = &v
}

// GetGarageId returns the GarageId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExperienceBulkUpdate) GetGarageId() string {
	if o == nil || IsNil(o.GarageId.Get()) {
		var ret string
		return ret
	}
	return *o.GarageId.Get()
}

// GetGarageIdOk returns a tuple with the GarageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperienceBulkUpdate) GetGarageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GarageId.Get(), o.GarageId.IsSet()
}

// HasGarageId returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasGarageId() bool {
	if o != nil && o.GarageId.IsSet() {
		return true
	}

	return false
}

// SetGarageId gets a reference to the given NullableString and assigns it to the GarageId field.
func (o *ExperienceBulkUpdate) SetGarageId(v string) {
	o.GarageId.Set(&v)
}

// SetGarageIdNil sets the value for GarageId to be an explicit nil
func (o *ExperienceBulkUpdate) SetGarageIdNil() {
	o.GarageId.Set(nil)
}

// UnsetGarageId ensures that no value is present for GarageId, not even an explicit nil
func (o *ExperienceBulkUpdate) UnsetGarageId() {
	o.GarageId.Unset()
}

// GetGcBranch returns the GcBranch field value if set, zero value otherwise.
func (o *ExperienceBulkUpdate) GetGcBranch() string {
	if o == nil || IsNil(o.GcBranch) {
		var ret string
		return ret
	}
	return *o.GcBranch
}

// GetGcBranchOk returns a tuple with the GcBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetGcBranchOk() (*string, bool) {
	if o == nil || IsNil(o.GcBranch) {
		return nil, false
	}
	return o.GcBranch, true
}

// HasGcBranch returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasGcBranch() bool {
	if o != nil && !IsNil(o.GcBranch) {
		return true
	}

	return false
}

// SetGcBranch gets a reference to the given string and assigns it to the GcBranch field.
func (o *ExperienceBulkUpdate) SetGcBranch(v string) {
	o.GcBranch = &v
}

// GetGpuCount returns the GpuCount field value if set, zero value otherwise.
func (o *ExperienceBulkUpdate) GetGpuCount() int32 {
	if o == nil || IsNil(o.GpuCount) {
		var ret int32
		return ret
	}
	return *o.GpuCount
}

// GetGpuCountOk returns a tuple with the GpuCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetGpuCountOk() (*int32, bool) {
	if o == nil || IsNil(o.GpuCount) {
		return nil, false
	}
	return o.GpuCount, true
}

// HasGpuCount returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasGpuCount() bool {
	if o != nil && !IsNil(o.GpuCount) {
		return true
	}

	return false
}

// SetGpuCount gets a reference to the given int32 and assigns it to the GpuCount field.
func (o *ExperienceBulkUpdate) SetGpuCount(v int32) {
	o.GpuCount = &v
}

// GetGpuOs returns the GpuOs field value
func (o *ExperienceBulkUpdate) GetGpuOs() GpuOs {
	if o == nil {
		var ret GpuOs
		return ret
	}

	return o.GpuOs
}

// GetGpuOsOk returns a tuple with the GpuOs field value
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetGpuOsOk() (*GpuOs, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GpuOs, true
}

// SetGpuOs sets field value
func (o *ExperienceBulkUpdate) SetGpuOs(v GpuOs) {
	o.GpuOs = v
}

// GetId returns the Id field value
func (o *ExperienceBulkUpdate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExperienceBulkUpdate) SetId(v string) {
	o.Id = v
}

// GetInactivityMax returns the InactivityMax field value if set, zero value otherwise.
func (o *ExperienceBulkUpdate) GetInactivityMax() int32 {
	if o == nil || IsNil(o.InactivityMax) {
		var ret int32
		return ret
	}
	return *o.InactivityMax
}

// GetInactivityMaxOk returns a tuple with the InactivityMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetInactivityMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.InactivityMax) {
		return nil, false
	}
	return o.InactivityMax, true
}

// HasInactivityMax returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasInactivityMax() bool {
	if o != nil && !IsNil(o.InactivityMax) {
		return true
	}

	return false
}

// SetInactivityMax gets a reference to the given int32 and assigns it to the InactivityMax field.
func (o *ExperienceBulkUpdate) SetInactivityMax(v int32) {
	o.InactivityMax = &v
}

// GetLifetime returns the Lifetime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExperienceBulkUpdate) GetLifetime() int32 {
	if o == nil || IsNil(o.Lifetime.Get()) {
		var ret int32
		return ret
	}
	return *o.Lifetime.Get()
}

// GetLifetimeOk returns a tuple with the Lifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperienceBulkUpdate) GetLifetimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lifetime.Get(), o.Lifetime.IsSet()
}

// HasLifetime returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasLifetime() bool {
	if o != nil && o.Lifetime.IsSet() {
		return true
	}

	return false
}

// SetLifetime gets a reference to the given NullableInt32 and assigns it to the Lifetime field.
func (o *ExperienceBulkUpdate) SetLifetime(v int32) {
	o.Lifetime.Set(&v)
}

// SetLifetimeNil sets the value for Lifetime to be an explicit nil
func (o *ExperienceBulkUpdate) SetLifetimeNil() {
	o.Lifetime.Set(nil)
}

// UnsetLifetime ensures that no value is present for Lifetime, not even an explicit nil
func (o *ExperienceBulkUpdate) UnsetLifetime() {
	o.Lifetime.Unset()
}

// GetModified returns the Modified field value
func (o *ExperienceBulkUpdate) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *ExperienceBulkUpdate) SetModified(v time.Time) {
	o.Modified = v
}

// GetNodeCount returns the NodeCount field value if set, zero value otherwise.
func (o *ExperienceBulkUpdate) GetNodeCount() int32 {
	if o == nil || IsNil(o.NodeCount) {
		var ret int32
		return ret
	}
	return *o.NodeCount
}

// GetNodeCountOk returns a tuple with the NodeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetNodeCountOk() (*int32, bool) {
	if o == nil || IsNil(o.NodeCount) {
		return nil, false
	}
	return o.NodeCount, true
}

// HasNodeCount returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasNodeCount() bool {
	if o != nil && !IsNil(o.NodeCount) {
		return true
	}

	return false
}

// SetNodeCount gets a reference to the given int32 and assigns it to the NodeCount field.
func (o *ExperienceBulkUpdate) SetNodeCount(v int32) {
	o.NodeCount = &v
}

// GetPersona returns the Persona field value
func (o *ExperienceBulkUpdate) GetPersona() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Persona
}

// GetPersonaOk returns a tuple with the Persona field value
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetPersonaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Persona, true
}

// SetPersona sets field value
func (o *ExperienceBulkUpdate) SetPersona(v string) {
	o.Persona = v
}

// GetPipeline returns the Pipeline field value
func (o *ExperienceBulkUpdate) GetPipeline() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Pipeline
}

// GetPipelineOk returns a tuple with the Pipeline field value
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetPipelineOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pipeline, true
}

// SetPipeline sets field value
func (o *ExperienceBulkUpdate) SetPipeline(v int64) {
	o.Pipeline = v
}

// GetPlatform returns the Platform field value
func (o *ExperienceBulkUpdate) GetPlatform() PlatformEnum {
	if o == nil {
		var ret PlatformEnum
		return ret
	}

	return o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetPlatformOk() (*PlatformEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Platform, true
}

// SetPlatform sets field value
func (o *ExperienceBulkUpdate) SetPlatform(v PlatformEnum) {
	o.Platform = v
}

// GetProvider returns the Provider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExperienceBulkUpdate) GetProvider() string {
	if o == nil || IsNil(o.Provider.Get()) {
		var ret string
		return ret
	}
	return *o.Provider.Get()
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperienceBulkUpdate) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Provider.Get(), o.Provider.IsSet()
}

// HasProvider returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasProvider() bool {
	if o != nil && o.Provider.IsSet() {
		return true
	}

	return false
}

// SetProvider gets a reference to the given NullableString and assigns it to the Provider field.
func (o *ExperienceBulkUpdate) SetProvider(v string) {
	o.Provider.Set(&v)
}

// SetProviderNil sets the value for Provider to be an explicit nil
func (o *ExperienceBulkUpdate) SetProviderNil() {
	o.Provider.Set(nil)
}

// UnsetProvider ensures that no value is present for Provider, not even an explicit nil
func (o *ExperienceBulkUpdate) UnsetProvider() {
	o.Provider.Unset()
}

// GetPublished returns the Published field value if set, zero value otherwise.
func (o *ExperienceBulkUpdate) GetPublished() PublishedEnum {
	if o == nil || IsNil(o.Published) {
		var ret PublishedEnum
		return ret
	}
	return *o.Published
}

// GetPublishedOk returns a tuple with the Published field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetPublishedOk() (*PublishedEnum, bool) {
	if o == nil || IsNil(o.Published) {
		return nil, false
	}
	return o.Published, true
}

// HasPublished returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasPublished() bool {
	if o != nil && !IsNil(o.Published) {
		return true
	}

	return false
}

// SetPublished gets a reference to the given PublishedEnum and assigns it to the Published field.
func (o *ExperienceBulkUpdate) SetPublished(v PublishedEnum) {
	o.Published = &v
}

// GetRepo returns the Repo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExperienceBulkUpdate) GetRepo() string {
	if o == nil || IsNil(o.Repo.Get()) {
		var ret string
		return ret
	}
	return *o.Repo.Get()
}

// GetRepoOk returns a tuple with the Repo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperienceBulkUpdate) GetRepoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Repo.Get(), o.Repo.IsSet()
}

// HasRepo returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasRepo() bool {
	if o != nil && o.Repo.IsSet() {
		return true
	}

	return false
}

// SetRepo gets a reference to the given NullableString and assigns it to the Repo field.
func (o *ExperienceBulkUpdate) SetRepo(v string) {
	o.Repo.Set(&v)
}

// SetRepoNil sets the value for Repo to be an explicit nil
func (o *ExperienceBulkUpdate) SetRepoNil() {
	o.Repo.Set(nil)
}

// UnsetRepo ensures that no value is present for Repo, not even an explicit nil
func (o *ExperienceBulkUpdate) UnsetRepo() {
	o.Repo.Unset()
}

// GetRequiredGpus returns the RequiredGpus field value if set, zero value otherwise.
func (o *ExperienceBulkUpdate) GetRequiredGpus() []string {
	if o == nil || IsNil(o.RequiredGpus) {
		var ret []string
		return ret
	}
	return o.RequiredGpus
}

// GetRequiredGpusOk returns a tuple with the RequiredGpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetRequiredGpusOk() ([]string, bool) {
	if o == nil || IsNil(o.RequiredGpus) {
		return nil, false
	}
	return o.RequiredGpus, true
}

// HasRequiredGpus returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasRequiredGpus() bool {
	if o != nil && !IsNil(o.RequiredGpus) {
		return true
	}

	return false
}

// SetRequiredGpus gets a reference to the given []string and assigns it to the RequiredGpus field.
func (o *ExperienceBulkUpdate) SetRequiredGpus(v []string) {
	o.RequiredGpus = v
}

// GetSaLab returns the SaLab field value if set, zero value otherwise.
func (o *ExperienceBulkUpdate) GetSaLab() bool {
	if o == nil || IsNil(o.SaLab) {
		var ret bool
		return ret
	}
	return *o.SaLab
}

// GetSaLabOk returns a tuple with the SaLab field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetSaLabOk() (*bool, bool) {
	if o == nil || IsNil(o.SaLab) {
		return nil, false
	}
	return o.SaLab, true
}

// HasSaLab returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasSaLab() bool {
	if o != nil && !IsNil(o.SaLab) {
		return true
	}

	return false
}

// SetSaLab gets a reference to the given bool and assigns it to the SaLab field.
func (o *ExperienceBulkUpdate) SetSaLab(v bool) {
	o.SaLab = &v
}

// GetSystemArch returns the SystemArch field value
func (o *ExperienceBulkUpdate) GetSystemArch() SystemArchEnum {
	if o == nil {
		var ret SystemArchEnum
		return ret
	}

	return o.SystemArch
}

// GetSystemArchOk returns a tuple with the SystemArch field value
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetSystemArchOk() (*SystemArchEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemArch, true
}

// SetSystemArch sets field value
func (o *ExperienceBulkUpdate) SetSystemArch(v SystemArchEnum) {
	o.SystemArch = v
}

// GetTitle returns the Title field value
func (o *ExperienceBulkUpdate) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ExperienceBulkUpdate) SetTitle(v string) {
	o.Title = v
}

// GetVgpuProfile returns the VgpuProfile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExperienceBulkUpdate) GetVgpuProfile() VgpuProfileEnum {
	if o == nil || IsNil(o.VgpuProfile.Get()) {
		var ret VgpuProfileEnum
		return ret
	}
	return *o.VgpuProfile.Get()
}

// GetVgpuProfileOk returns a tuple with the VgpuProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperienceBulkUpdate) GetVgpuProfileOk() (*VgpuProfileEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.VgpuProfile.Get(), o.VgpuProfile.IsSet()
}

// HasVgpuProfile returns a boolean if a field has been set.
func (o *ExperienceBulkUpdate) HasVgpuProfile() bool {
	if o != nil && o.VgpuProfile.IsSet() {
		return true
	}

	return false
}

// SetVgpuProfile gets a reference to the given NullableVgpuProfileEnum and assigns it to the VgpuProfile field.
func (o *ExperienceBulkUpdate) SetVgpuProfile(v VgpuProfileEnum) {
	o.VgpuProfile.Set(&v)
}

// SetVgpuProfileNil sets the value for VgpuProfile to be an explicit nil
func (o *ExperienceBulkUpdate) SetVgpuProfileNil() {
	o.VgpuProfile.Set(nil)
}

// UnsetVgpuProfile ensures that no value is present for VgpuProfile, not even an explicit nil
func (o *ExperienceBulkUpdate) UnsetVgpuProfile() {
	o.VgpuProfile.Unset()
}

// GetCount returns the Count field value
func (o *ExperienceBulkUpdate) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *ExperienceBulkUpdate) SetCount(v int32) {
	o.Count = v
}

// GetIds returns the Ids field value
func (o *ExperienceBulkUpdate) GetIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ids, true
}

// SetIds sets field value
func (o *ExperienceBulkUpdate) SetIds(v []string) {
	o.Ids = v
}

// GetResult returns the Result field value
func (o *ExperienceBulkUpdate) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *ExperienceBulkUpdate) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *ExperienceBulkUpdate) SetResult(v string) {
	o.Result = v
}

func (o ExperienceBulkUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExperienceBulkUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Assignee.IsSet() {
		toSerialize["assignee"] = o.Assignee.Get()
	}
	if !IsNil(o.Autoapprove) {
		toSerialize["autoapprove"] = o.Autoapprove
	}
	if !IsNil(o.Autoprovision) {
		toSerialize["autoprovision"] = o.Autoprovision
	}
	if !IsNil(o.Bootstrap) {
		toSerialize["bootstrap"] = o.Bootstrap
	}
	toSerialize["catalog_id"] = o.CatalogId
	toSerialize["catalog_id_alias"] = o.CatalogIdAlias.Get()
	toSerialize["category"] = o.Category
	if !IsNil(o.CollectionBranch) {
		toSerialize["collection_branch"] = o.CollectionBranch
	}
	toSerialize["created"] = o.Created
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["experience"] = o.Experience
	if !IsNil(o.ExperienceBranch) {
		toSerialize["experience_branch"] = o.ExperienceBranch
	}
	if o.FcPlatform.IsSet() {
		toSerialize["fc_platform"] = o.FcPlatform.Get()
	}
	if !IsNil(o.FcSupport) {
		toSerialize["fc_support"] = o.FcSupport
	}
	if o.GarageId.IsSet() {
		toSerialize["garage_id"] = o.GarageId.Get()
	}
	if !IsNil(o.GcBranch) {
		toSerialize["gc_branch"] = o.GcBranch
	}
	if !IsNil(o.GpuCount) {
		toSerialize["gpu_count"] = o.GpuCount
	}
	toSerialize["gpu_os"] = o.GpuOs
	toSerialize["id"] = o.Id
	if !IsNil(o.InactivityMax) {
		toSerialize["inactivity_max"] = o.InactivityMax
	}
	if o.Lifetime.IsSet() {
		toSerialize["lifetime"] = o.Lifetime.Get()
	}
	toSerialize["modified"] = o.Modified
	if !IsNil(o.NodeCount) {
		toSerialize["node_count"] = o.NodeCount
	}
	toSerialize["persona"] = o.Persona
	toSerialize["pipeline"] = o.Pipeline
	toSerialize["platform"] = o.Platform
	if o.Provider.IsSet() {
		toSerialize["provider"] = o.Provider.Get()
	}
	if !IsNil(o.Published) {
		toSerialize["published"] = o.Published
	}
	if o.Repo.IsSet() {
		toSerialize["repo"] = o.Repo.Get()
	}
	if !IsNil(o.RequiredGpus) {
		toSerialize["required_gpus"] = o.RequiredGpus
	}
	if !IsNil(o.SaLab) {
		toSerialize["sa_lab"] = o.SaLab
	}
	toSerialize["system_arch"] = o.SystemArch
	toSerialize["title"] = o.Title
	if o.VgpuProfile.IsSet() {
		toSerialize["vgpu_profile"] = o.VgpuProfile.Get()
	}
	toSerialize["count"] = o.Count
	toSerialize["ids"] = o.Ids
	toSerialize["result"] = o.Result

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExperienceBulkUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"catalog_id",
		"catalog_id_alias",
		"category",
		"created",
		"experience",
		"gpu_os",
		"id",
		"modified",
		"persona",
		"pipeline",
		"platform",
		"system_arch",
		"title",
		"count",
		"ids",
		"result",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExperienceBulkUpdate := _ExperienceBulkUpdate{}

	err = json.Unmarshal(data, &varExperienceBulkUpdate)

	if err != nil {
		return err
	}

	*o = ExperienceBulkUpdate(varExperienceBulkUpdate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "assignee")
		delete(additionalProperties, "autoapprove")
		delete(additionalProperties, "autoprovision")
		delete(additionalProperties, "bootstrap")
		delete(additionalProperties, "catalog_id")
		delete(additionalProperties, "catalog_id_alias")
		delete(additionalProperties, "category")
		delete(additionalProperties, "collection_branch")
		delete(additionalProperties, "created")
		delete(additionalProperties, "description")
		delete(additionalProperties, "experience")
		delete(additionalProperties, "experience_branch")
		delete(additionalProperties, "fc_platform")
		delete(additionalProperties, "fc_support")
		delete(additionalProperties, "garage_id")
		delete(additionalProperties, "gc_branch")
		delete(additionalProperties, "gpu_count")
		delete(additionalProperties, "gpu_os")
		delete(additionalProperties, "id")
		delete(additionalProperties, "inactivity_max")
		delete(additionalProperties, "lifetime")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "node_count")
		delete(additionalProperties, "persona")
		delete(additionalProperties, "pipeline")
		delete(additionalProperties, "platform")
		delete(additionalProperties, "provider")
		delete(additionalProperties, "published")
		delete(additionalProperties, "repo")
		delete(additionalProperties, "required_gpus")
		delete(additionalProperties, "sa_lab")
		delete(additionalProperties, "system_arch")
		delete(additionalProperties, "title")
		delete(additionalProperties, "vgpu_profile")
		delete(additionalProperties, "count")
		delete(additionalProperties, "ids")
		delete(additionalProperties, "result")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExperienceBulkUpdate struct {
	value *ExperienceBulkUpdate
	isSet bool
}

func (v NullableExperienceBulkUpdate) Get() *ExperienceBulkUpdate {
	return v.value
}

func (v *NullableExperienceBulkUpdate) Set(val *ExperienceBulkUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableExperienceBulkUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableExperienceBulkUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperienceBulkUpdate(val *ExperienceBulkUpdate) *NullableExperienceBulkUpdate {
	return &NullableExperienceBulkUpdate{value: val, isSet: true}
}

func (v NullableExperienceBulkUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperienceBulkUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
