/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PreferredThemeEnum * `light` - light * `dark` - dark
type PreferredThemeEnum string

// List of PreferredThemeEnum
const (
	PreferredThemeLight PreferredThemeEnum = "light"
	PreferredThemeDark  PreferredThemeEnum = "dark"
)

// All allowed values of PreferredThemeEnum enum
var AllowedPreferredThemeEnumEnumValues = []PreferredThemeEnum{
	"light",
	"dark",
}

func (v *PreferredThemeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PreferredThemeEnum(value)
	for _, existing := range AllowedPreferredThemeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PreferredThemeEnum", value)
}

// NewPreferredThemeEnumFromValue returns a pointer to a valid PreferredThemeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPreferredThemeEnumFromValue(v string) (*PreferredThemeEnum, error) {
	ev := PreferredThemeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PreferredThemeEnum: valid values are %v", v, AllowedPreferredThemeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PreferredThemeEnum) IsValid() bool {
	for _, existing := range AllowedPreferredThemeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PreferredThemeEnum value
func (v PreferredThemeEnum) Ptr() *PreferredThemeEnum {
	return &v
}

type NullablePreferredThemeEnum struct {
	value *PreferredThemeEnum
	isSet bool
}

func (v NullablePreferredThemeEnum) Get() *PreferredThemeEnum {
	return v.value
}

func (v *NullablePreferredThemeEnum) Set(val *PreferredThemeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePreferredThemeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePreferredThemeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreferredThemeEnum(val *PreferredThemeEnum) *NullablePreferredThemeEnum {
	return &NullablePreferredThemeEnum{value: val, isSet: true}
}

func (v NullablePreferredThemeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreferredThemeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
