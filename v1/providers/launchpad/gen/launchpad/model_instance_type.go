/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceType{}

// InstanceType struct for InstanceType
type InstanceType struct {
	// Key/value pairs of region name and total available capacity for the instance type
	Capacity map[string]int32 `json:"capacity"`
	// Cloud provider name
	Cloud string `json:"cloud"`
	// Total number of CPUs/vCPUs available
	Cpu int32           `json:"cpu"`
	Gpu InstanceTypeGpu `json:"gpu"`
	// Total system memory (in GB)
	MemoryGb int32             `json:"memory_gb"`
	Price    InstanceTypePrice `json:"price"`
	// List of regions names that have available capacity for the instance type
	Regions []string              `json:"regions"`
	Storage []InstanceTypeStorage `json:"storage"`
	// CPU architecture  * `amd64` - amd64 * `arm64` - arm64
	SystemArch SystemArchEnum `json:"system_arch"`
	// ID of the workshop this instance type is reserved for
	WorkshopId           string `json:"workshop_id"`
	AdditionalProperties map[string]interface{}
}

type _InstanceType InstanceType

// NewInstanceType instantiates a new InstanceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceType(capacity map[string]int32, cloud string, cpu int32, gpu InstanceTypeGpu, memoryGb int32, price InstanceTypePrice, regions []string, storage []InstanceTypeStorage, systemArch SystemArchEnum, workshopId string) *InstanceType {
	this := InstanceType{}
	this.Capacity = capacity
	this.Cloud = cloud
	this.Cpu = cpu
	this.Gpu = gpu
	this.MemoryGb = memoryGb
	this.Price = price
	this.Regions = regions
	this.Storage = storage
	this.SystemArch = systemArch
	this.WorkshopId = workshopId
	return &this
}

// NewInstanceTypeWithDefaults instantiates a new InstanceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypeWithDefaults() *InstanceType {
	this := InstanceType{}
	return &this
}

// GetCapacity returns the Capacity field value
func (o *InstanceType) GetCapacity() map[string]int32 {
	if o == nil {
		var ret map[string]int32
		return ret
	}

	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetCapacityOk() (map[string]int32, bool) {
	if o == nil {
		return map[string]int32{}, false
	}
	return o.Capacity, true
}

// SetCapacity sets field value
func (o *InstanceType) SetCapacity(v map[string]int32) {
	o.Capacity = v
}

// GetCloud returns the Cloud field value
func (o *InstanceType) GetCloud() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cloud
}

// GetCloudOk returns a tuple with the Cloud field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetCloudOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cloud, true
}

// SetCloud sets field value
func (o *InstanceType) SetCloud(v string) {
	o.Cloud = v
}

// GetCpu returns the Cpu field value
func (o *InstanceType) GetCpu() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetCpuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *InstanceType) SetCpu(v int32) {
	o.Cpu = v
}

// GetGpu returns the Gpu field value
func (o *InstanceType) GetGpu() InstanceTypeGpu {
	if o == nil {
		var ret InstanceTypeGpu
		return ret
	}

	return o.Gpu
}

// GetGpuOk returns a tuple with the Gpu field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetGpuOk() (*InstanceTypeGpu, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gpu, true
}

// SetGpu sets field value
func (o *InstanceType) SetGpu(v InstanceTypeGpu) {
	o.Gpu = v
}

// GetMemoryGb returns the MemoryGb field value
func (o *InstanceType) GetMemoryGb() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MemoryGb
}

// GetMemoryGbOk returns a tuple with the MemoryGb field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetMemoryGbOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemoryGb, true
}

// SetMemoryGb sets field value
func (o *InstanceType) SetMemoryGb(v int32) {
	o.MemoryGb = v
}

// GetPrice returns the Price field value
func (o *InstanceType) GetPrice() InstanceTypePrice {
	if o == nil {
		var ret InstanceTypePrice
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetPriceOk() (*InstanceTypePrice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *InstanceType) SetPrice(v InstanceTypePrice) {
	o.Price = v
}

// GetRegions returns the Regions field value
func (o *InstanceType) GetRegions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetRegionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Regions, true
}

// SetRegions sets field value
func (o *InstanceType) SetRegions(v []string) {
	o.Regions = v
}

// GetStorage returns the Storage field value
func (o *InstanceType) GetStorage() []InstanceTypeStorage {
	if o == nil {
		var ret []InstanceTypeStorage
		return ret
	}

	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetStorageOk() ([]InstanceTypeStorage, bool) {
	if o == nil {
		return nil, false
	}
	return o.Storage, true
}

// SetStorage sets field value
func (o *InstanceType) SetStorage(v []InstanceTypeStorage) {
	o.Storage = v
}

// GetSystemArch returns the SystemArch field value
func (o *InstanceType) GetSystemArch() SystemArchEnum {
	if o == nil {
		var ret SystemArchEnum
		return ret
	}

	return o.SystemArch
}

// GetSystemArchOk returns a tuple with the SystemArch field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetSystemArchOk() (*SystemArchEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemArch, true
}

// SetSystemArch sets field value
func (o *InstanceType) SetSystemArch(v SystemArchEnum) {
	o.SystemArch = v
}

// GetWorkshopId returns the WorkshopId field value
func (o *InstanceType) GetWorkshopId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkshopId
}

// GetWorkshopIdOk returns a tuple with the WorkshopId field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetWorkshopIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkshopId, true
}

// SetWorkshopId sets field value
func (o *InstanceType) SetWorkshopId(v string) {
	o.WorkshopId = v
}

func (o InstanceType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["capacity"] = o.Capacity
	toSerialize["cloud"] = o.Cloud
	toSerialize["cpu"] = o.Cpu
	toSerialize["gpu"] = o.Gpu
	toSerialize["memory_gb"] = o.MemoryGb
	toSerialize["price"] = o.Price
	toSerialize["regions"] = o.Regions
	toSerialize["storage"] = o.Storage
	toSerialize["system_arch"] = o.SystemArch
	toSerialize["workshop_id"] = o.WorkshopId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"capacity",
		"cloud",
		"cpu",
		"gpu",
		"memory_gb",
		"price",
		"regions",
		"storage",
		"system_arch",
		"workshop_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceType := _InstanceType{}

	err = json.Unmarshal(data, &varInstanceType)

	if err != nil {
		return err
	}

	*o = InstanceType(varInstanceType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "capacity")
		delete(additionalProperties, "cloud")
		delete(additionalProperties, "cpu")
		delete(additionalProperties, "gpu")
		delete(additionalProperties, "memory_gb")
		delete(additionalProperties, "price")
		delete(additionalProperties, "regions")
		delete(additionalProperties, "storage")
		delete(additionalProperties, "system_arch")
		delete(additionalProperties, "workshop_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceType struct {
	value *InstanceType
	isSet bool
}

func (v NullableInstanceType) Get() *InstanceType {
	return v.value
}

func (v *NullableInstanceType) Set(val *InstanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceType(val *InstanceType) *NullableInstanceType {
	return &NullableInstanceType{value: val, isSet: true}
}

func (v NullableInstanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
