/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuthLogin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthLogin{}

// AuthLogin struct for AuthLogin
type AuthLogin struct {
	AuthCode             *string `json:"auth_code,omitempty"`
	Password             *string `json:"password,omitempty"`
	Username             *string `json:"username,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuthLogin AuthLogin

// NewAuthLogin instantiates a new AuthLogin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthLogin() *AuthLogin {
	this := AuthLogin{}
	return &this
}

// NewAuthLoginWithDefaults instantiates a new AuthLogin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthLoginWithDefaults() *AuthLogin {
	this := AuthLogin{}
	return &this
}

// GetAuthCode returns the AuthCode field value if set, zero value otherwise.
func (o *AuthLogin) GetAuthCode() string {
	if o == nil || IsNil(o.AuthCode) {
		var ret string
		return ret
	}
	return *o.AuthCode
}

// GetAuthCodeOk returns a tuple with the AuthCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthLogin) GetAuthCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthCode) {
		return nil, false
	}
	return o.AuthCode, true
}

// HasAuthCode returns a boolean if a field has been set.
func (o *AuthLogin) HasAuthCode() bool {
	if o != nil && !IsNil(o.AuthCode) {
		return true
	}

	return false
}

// SetAuthCode gets a reference to the given string and assigns it to the AuthCode field.
func (o *AuthLogin) SetAuthCode(v string) {
	o.AuthCode = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *AuthLogin) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthLogin) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *AuthLogin) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *AuthLogin) SetPassword(v string) {
	o.Password = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *AuthLogin) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthLogin) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *AuthLogin) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *AuthLogin) SetUsername(v string) {
	o.Username = &v
}

func (o AuthLogin) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthLogin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthCode) {
		toSerialize["auth_code"] = o.AuthCode
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuthLogin) UnmarshalJSON(data []byte) (err error) {
	varAuthLogin := _AuthLogin{}

	err = json.Unmarshal(data, &varAuthLogin)

	if err != nil {
		return err
	}

	*o = AuthLogin(varAuthLogin)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "auth_code")
		delete(additionalProperties, "password")
		delete(additionalProperties, "username")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthLogin struct {
	value *AuthLogin
	isSet bool
}

func (v NullableAuthLogin) Get() *AuthLogin {
	return v.value
}

func (v *NullableAuthLogin) Set(val *AuthLogin) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthLogin) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthLogin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthLogin(val *AuthLogin) *NullableAuthLogin {
	return &NullableAuthLogin{value: val, isSet: true}
}

func (v NullableAuthLogin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthLogin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
