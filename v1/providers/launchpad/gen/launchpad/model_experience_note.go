/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ExperienceNote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExperienceNote{}

// ExperienceNote struct for ExperienceNote
type ExperienceNote struct {
	// Text content of the note
	Content *string `json:"content,omitempty"`
	// Timestamp of when the object was created
	Created    time.Time            `json:"created"`
	CreatedBy  string               `json:"created_by"`
	Experience DeploymentExperience `json:"experience"`
	Id         string               `json:"id"`
	// Timestamp of when the object was last modified
	Modified             time.Time `json:"modified"`
	ModifiedBy           string    `json:"modified_by"`
	AdditionalProperties map[string]interface{}
}

type _ExperienceNote ExperienceNote

// NewExperienceNote instantiates a new ExperienceNote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExperienceNote(created time.Time, createdBy string, experience DeploymentExperience, id string, modified time.Time, modifiedBy string) *ExperienceNote {
	this := ExperienceNote{}
	this.Created = created
	this.CreatedBy = createdBy
	this.Experience = experience
	this.Id = id
	this.Modified = modified
	this.ModifiedBy = modifiedBy
	return &this
}

// NewExperienceNoteWithDefaults instantiates a new ExperienceNote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExperienceNoteWithDefaults() *ExperienceNote {
	this := ExperienceNote{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ExperienceNote) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperienceNote) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ExperienceNote) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ExperienceNote) SetContent(v string) {
	o.Content = &v
}

// GetCreated returns the Created field value
func (o *ExperienceNote) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *ExperienceNote) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *ExperienceNote) SetCreated(v time.Time) {
	o.Created = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *ExperienceNote) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *ExperienceNote) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *ExperienceNote) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetExperience returns the Experience field value
func (o *ExperienceNote) GetExperience() DeploymentExperience {
	if o == nil {
		var ret DeploymentExperience
		return ret
	}

	return o.Experience
}

// GetExperienceOk returns a tuple with the Experience field value
// and a boolean to check if the value has been set.
func (o *ExperienceNote) GetExperienceOk() (*DeploymentExperience, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Experience, true
}

// SetExperience sets field value
func (o *ExperienceNote) SetExperience(v DeploymentExperience) {
	o.Experience = v
}

// GetId returns the Id field value
func (o *ExperienceNote) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExperienceNote) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExperienceNote) SetId(v string) {
	o.Id = v
}

// GetModified returns the Modified field value
func (o *ExperienceNote) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *ExperienceNote) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *ExperienceNote) SetModified(v time.Time) {
	o.Modified = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *ExperienceNote) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *ExperienceNote) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *ExperienceNote) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

func (o ExperienceNote) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExperienceNote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	toSerialize["created"] = o.Created
	toSerialize["created_by"] = o.CreatedBy
	toSerialize["experience"] = o.Experience
	toSerialize["id"] = o.Id
	toSerialize["modified"] = o.Modified
	toSerialize["modified_by"] = o.ModifiedBy

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExperienceNote) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created",
		"created_by",
		"experience",
		"id",
		"modified",
		"modified_by",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExperienceNote := _ExperienceNote{}

	err = json.Unmarshal(data, &varExperienceNote)

	if err != nil {
		return err
	}

	*o = ExperienceNote(varExperienceNote)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "content")
		delete(additionalProperties, "created")
		delete(additionalProperties, "created_by")
		delete(additionalProperties, "experience")
		delete(additionalProperties, "id")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "modified_by")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExperienceNote struct {
	value *ExperienceNote
	isSet bool
}

func (v NullableExperienceNote) Get() *ExperienceNote {
	return v.value
}

func (v *NullableExperienceNote) Set(val *ExperienceNote) {
	v.value = val
	v.isSet = true
}

func (v NullableExperienceNote) IsSet() bool {
	return v.isSet
}

func (v *NullableExperienceNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperienceNote(val *ExperienceNote) *NullableExperienceNote {
	return &NullableExperienceNote{value: val, isSet: true}
}

func (v NullableExperienceNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperienceNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
