/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the NodeStorage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeStorage{}

// NodeStorage struct for NodeStorage
type NodeStorage struct {
	// Disk size (in GB)
	Size *int32 `json:"size,omitempty"`
	// Disk type  * `nvme` - NVMe * `ssd` - ssd
	Type                 TypeEnum `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _NodeStorage NodeStorage

// NewNodeStorage instantiates a new NodeStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeStorage(type_ TypeEnum) *NodeStorage {
	this := NodeStorage{}
	var size int32 = 0
	this.Size = &size
	this.Type = type_
	return &this
}

// NewNodeStorageWithDefaults instantiates a new NodeStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeStorageWithDefaults() *NodeStorage {
	this := NodeStorage{}
	var size int32 = 0
	this.Size = &size
	return &this
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *NodeStorage) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeStorage) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *NodeStorage) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *NodeStorage) SetSize(v int32) {
	o.Size = &v
}

// GetType returns the Type field value
func (o *NodeStorage) GetType() TypeEnum {
	if o == nil {
		var ret TypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NodeStorage) GetTypeOk() (*TypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NodeStorage) SetType(v TypeEnum) {
	o.Type = v
}

func (o NodeStorage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeStorage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NodeStorage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeStorage := _NodeStorage{}

	err = json.Unmarshal(data, &varNodeStorage)

	if err != nil {
		return err
	}

	*o = NodeStorage(varNodeStorage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "size")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNodeStorage struct {
	value *NodeStorage
	isSet bool
}

func (v NullableNodeStorage) Get() *NodeStorage {
	return v.value
}

func (v *NullableNodeStorage) Set(val *NodeStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeStorage(val *NodeStorage) *NullableNodeStorage {
	return &NullableNodeStorage{value: val, isSet: true}
}

func (v NullableNodeStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
