/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DeploymentState * `destroyed` - Deployment has been fully destroyed * `destroying` - Deployment is being destroyed * `error` - Deployment has encountered a fatal error and will not be retried * `failed` - Deployment has failed but may be retried * `paused` - Deployment is paused but may be retried later * `ready` - Deployment is ready and all instances are running * `retrying` - Deployment is retrying * `starting` - Deployment instances are starting * `stopped` - Deployment instances are stopped * `stopping` - Deployment instances are stopping * `waiting` - Waiting for deployment to be ready
type DeploymentState string

// List of DeploymentState
const (
	DeploymentStateDestroyed  DeploymentState = "destroyed"
	DeploymentStateDestroying DeploymentState = "destroying"
	DeploymentStateError      DeploymentState = "error"
	DeploymentStateFailed     DeploymentState = "failed"
	DeploymentStatePaused     DeploymentState = "paused"
	DeploymentStateReady      DeploymentState = "ready"
	DeploymentStateRetrying   DeploymentState = "retrying"
	DeploymentStateStarting   DeploymentState = "starting"
	DeploymentStateStopped    DeploymentState = "stopped"
	DeploymentStateStopping   DeploymentState = "stopping"
	DeploymentStateWaiting    DeploymentState = "waiting"
)

// All allowed values of DeploymentState enum
var AllowedDeploymentStateEnumValues = []DeploymentState{
	"destroyed",
	"destroying",
	"error",
	"failed",
	"paused",
	"ready",
	"retrying",
	"starting",
	"stopped",
	"stopping",
	"waiting",
}

func (v *DeploymentState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeploymentState(value)
	for _, existing := range AllowedDeploymentStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeploymentState", value)
}

// NewDeploymentStateFromValue returns a pointer to a valid DeploymentState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeploymentStateFromValue(v string) (*DeploymentState, error) {
	ev := DeploymentState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeploymentState: valid values are %v", v, AllowedDeploymentStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeploymentState) IsValid() bool {
	for _, existing := range AllowedDeploymentStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeploymentState value
func (v DeploymentState) Ptr() *DeploymentState {
	return &v
}

type NullableDeploymentState struct {
	value *DeploymentState
	isSet bool
}

func (v NullableDeploymentState) Get() *DeploymentState {
	return v.value
}

func (v *NullableDeploymentState) Set(val *DeploymentState) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentState) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentState(val *DeploymentState) *NullableDeploymentState {
	return &NullableDeploymentState{value: val, isSet: true}
}

func (v NullableDeploymentState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
