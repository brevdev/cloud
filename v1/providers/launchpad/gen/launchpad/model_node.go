/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Node type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Node{}

// Node struct for Node
type Node struct {
	// IP address of the BMC
	BmcIp NullableString `json:"bmc_ip,omitempty"`
	// MAC address of the BMC
	BmcMac NullableString `json:"bmc_mac,omitempty"`
	// Password for the BMC
	BmcPassword NullableString `json:"bmc_password,omitempty"`
	// Username for the BMC
	BmcUser NullableString `json:"bmc_user,omitempty"`
	// UUID of the node's parent cluster
	Cluster NullableString `json:"cluster,omitempty"`
	// Number of CPU cores installed
	Cpu             *int32                      `json:"cpu,omitempty"`
	CpuManufacturer NullableCpuManufacturerEnum `json:"cpu_manufacturer,omitempty"`
	// Model information for the node's CPU
	CpuModel NullableString `json:"cpu_model,omitempty"`
	// Timestamp of when the object was created
	Created time.Time `json:"created"`
	// ID for the garage where a node is parked when unprovisioned
	GarageId NullableString   `json:"garage_id,omitempty"`
	Gpu      ClusterGpusInner `json:"gpu"`
	// Alias for GPU plan (i.e. installed GPU type and count)
	GpuAlias string `json:"gpu_alias"`
	// Number of GPUs installed
	GpuCount *int32 `json:"gpu_count,omitempty"`
	// Model of GPU(s) installed
	GpuModel string `json:"gpu_model"`
	// VBIOS version used by installed GPU(s)
	GpuVbios NullableString `json:"gpu_vbios,omitempty"`
	Id       string         `json:"id"`
	Location NodeLocation   `json:"location"`
	// Amount of RAM installed (in GB)
	Memory *int32 `json:"memory,omitempty"`
	// Management IP address
	MgmtIp *string `json:"mgmt_ip,omitempty"`
	// Management MAC address
	MgmtMac NullableString `json:"mgmt_mac,omitempty"`
	// Hardware model of the node
	Model NullableString `json:"model,omitempty"`
	// Timestamp of when the object was last modified
	Modified time.Time `json:"modified"`
	// Type of networking technology used  * `ethernet` - Ethernet * `infiniband` - InfiniBand
	NetworkType *NetworkTypeEnum `json:"network_type,omitempty"`
	// Prefixes for the node's network interface(s)
	NicPrefixes []string `json:"nic_prefixes,omitempty"`
	// Administrative comments about the node
	Notes NullableString `json:"notes,omitempty"`
	// UUID of the node's OEM
	Oem NullableString `json:"oem,omitempty"`
	// Unique ID for this node assigned by its provider
	ProviderNodeId NullableString `json:"provider_node_id,omitempty"`
	// Physical rack identifier
	Rack NullableString `json:"rack,omitempty"`
	// The rack unit (RU) within the rack where the node is installed
	RackUnit NullableInt32 `json:"rack_unit,omitempty"`
	// Serial number of the node
	SerialNumber NullableString `json:"serial_number,omitempty"`
	Storage      []NodeStorage  `json:"storage"`
	// CPU architecture  * `amd64` - amd64 * `arm64` - arm64
	SystemArch SystemArchEnum `json:"system_arch"`
	// Does the node support Trusted Execution Environment (TEE)?
	Tee                  *bool `json:"tee,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Node Node

// NewNode instantiates a new Node object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNode(created time.Time, gpu ClusterGpusInner, gpuAlias string, gpuModel string, id string, location NodeLocation, modified time.Time, storage []NodeStorage, systemArch SystemArchEnum) *Node {
	this := Node{}
	this.Created = created
	this.Gpu = gpu
	this.GpuAlias = gpuAlias
	this.GpuModel = gpuModel
	this.Id = id
	this.Location = location
	this.Modified = modified
	this.Storage = storage
	this.SystemArch = systemArch
	return &this
}

// NewNodeWithDefaults instantiates a new Node object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeWithDefaults() *Node {
	this := Node{}
	return &this
}

// GetBmcIp returns the BmcIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetBmcIp() string {
	if o == nil || IsNil(o.BmcIp.Get()) {
		var ret string
		return ret
	}
	return *o.BmcIp.Get()
}

// GetBmcIpOk returns a tuple with the BmcIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetBmcIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BmcIp.Get(), o.BmcIp.IsSet()
}

// HasBmcIp returns a boolean if a field has been set.
func (o *Node) HasBmcIp() bool {
	if o != nil && o.BmcIp.IsSet() {
		return true
	}

	return false
}

// SetBmcIp gets a reference to the given NullableString and assigns it to the BmcIp field.
func (o *Node) SetBmcIp(v string) {
	o.BmcIp.Set(&v)
}

// SetBmcIpNil sets the value for BmcIp to be an explicit nil
func (o *Node) SetBmcIpNil() {
	o.BmcIp.Set(nil)
}

// UnsetBmcIp ensures that no value is present for BmcIp, not even an explicit nil
func (o *Node) UnsetBmcIp() {
	o.BmcIp.Unset()
}

// GetBmcMac returns the BmcMac field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetBmcMac() string {
	if o == nil || IsNil(o.BmcMac.Get()) {
		var ret string
		return ret
	}
	return *o.BmcMac.Get()
}

// GetBmcMacOk returns a tuple with the BmcMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetBmcMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BmcMac.Get(), o.BmcMac.IsSet()
}

// HasBmcMac returns a boolean if a field has been set.
func (o *Node) HasBmcMac() bool {
	if o != nil && o.BmcMac.IsSet() {
		return true
	}

	return false
}

// SetBmcMac gets a reference to the given NullableString and assigns it to the BmcMac field.
func (o *Node) SetBmcMac(v string) {
	o.BmcMac.Set(&v)
}

// SetBmcMacNil sets the value for BmcMac to be an explicit nil
func (o *Node) SetBmcMacNil() {
	o.BmcMac.Set(nil)
}

// UnsetBmcMac ensures that no value is present for BmcMac, not even an explicit nil
func (o *Node) UnsetBmcMac() {
	o.BmcMac.Unset()
}

// GetBmcPassword returns the BmcPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetBmcPassword() string {
	if o == nil || IsNil(o.BmcPassword.Get()) {
		var ret string
		return ret
	}
	return *o.BmcPassword.Get()
}

// GetBmcPasswordOk returns a tuple with the BmcPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetBmcPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BmcPassword.Get(), o.BmcPassword.IsSet()
}

// HasBmcPassword returns a boolean if a field has been set.
func (o *Node) HasBmcPassword() bool {
	if o != nil && o.BmcPassword.IsSet() {
		return true
	}

	return false
}

// SetBmcPassword gets a reference to the given NullableString and assigns it to the BmcPassword field.
func (o *Node) SetBmcPassword(v string) {
	o.BmcPassword.Set(&v)
}

// SetBmcPasswordNil sets the value for BmcPassword to be an explicit nil
func (o *Node) SetBmcPasswordNil() {
	o.BmcPassword.Set(nil)
}

// UnsetBmcPassword ensures that no value is present for BmcPassword, not even an explicit nil
func (o *Node) UnsetBmcPassword() {
	o.BmcPassword.Unset()
}

// GetBmcUser returns the BmcUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetBmcUser() string {
	if o == nil || IsNil(o.BmcUser.Get()) {
		var ret string
		return ret
	}
	return *o.BmcUser.Get()
}

// GetBmcUserOk returns a tuple with the BmcUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetBmcUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BmcUser.Get(), o.BmcUser.IsSet()
}

// HasBmcUser returns a boolean if a field has been set.
func (o *Node) HasBmcUser() bool {
	if o != nil && o.BmcUser.IsSet() {
		return true
	}

	return false
}

// SetBmcUser gets a reference to the given NullableString and assigns it to the BmcUser field.
func (o *Node) SetBmcUser(v string) {
	o.BmcUser.Set(&v)
}

// SetBmcUserNil sets the value for BmcUser to be an explicit nil
func (o *Node) SetBmcUserNil() {
	o.BmcUser.Set(nil)
}

// UnsetBmcUser ensures that no value is present for BmcUser, not even an explicit nil
func (o *Node) UnsetBmcUser() {
	o.BmcUser.Unset()
}

// GetCluster returns the Cluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetCluster() string {
	if o == nil || IsNil(o.Cluster.Get()) {
		var ret string
		return ret
	}
	return *o.Cluster.Get()
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetClusterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cluster.Get(), o.Cluster.IsSet()
}

// HasCluster returns a boolean if a field has been set.
func (o *Node) HasCluster() bool {
	if o != nil && o.Cluster.IsSet() {
		return true
	}

	return false
}

// SetCluster gets a reference to the given NullableString and assigns it to the Cluster field.
func (o *Node) SetCluster(v string) {
	o.Cluster.Set(&v)
}

// SetClusterNil sets the value for Cluster to be an explicit nil
func (o *Node) SetClusterNil() {
	o.Cluster.Set(nil)
}

// UnsetCluster ensures that no value is present for Cluster, not even an explicit nil
func (o *Node) UnsetCluster() {
	o.Cluster.Unset()
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *Node) GetCpu() int32 {
	if o == nil || IsNil(o.Cpu) {
		var ret int32
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetCpuOk() (*int32, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *Node) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given int32 and assigns it to the Cpu field.
func (o *Node) SetCpu(v int32) {
	o.Cpu = &v
}

// GetCpuManufacturer returns the CpuManufacturer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetCpuManufacturer() CpuManufacturerEnum {
	if o == nil || IsNil(o.CpuManufacturer.Get()) {
		var ret CpuManufacturerEnum
		return ret
	}
	return *o.CpuManufacturer.Get()
}

// GetCpuManufacturerOk returns a tuple with the CpuManufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetCpuManufacturerOk() (*CpuManufacturerEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.CpuManufacturer.Get(), o.CpuManufacturer.IsSet()
}

// HasCpuManufacturer returns a boolean if a field has been set.
func (o *Node) HasCpuManufacturer() bool {
	if o != nil && o.CpuManufacturer.IsSet() {
		return true
	}

	return false
}

// SetCpuManufacturer gets a reference to the given NullableCpuManufacturerEnum and assigns it to the CpuManufacturer field.
func (o *Node) SetCpuManufacturer(v CpuManufacturerEnum) {
	o.CpuManufacturer.Set(&v)
}

// SetCpuManufacturerNil sets the value for CpuManufacturer to be an explicit nil
func (o *Node) SetCpuManufacturerNil() {
	o.CpuManufacturer.Set(nil)
}

// UnsetCpuManufacturer ensures that no value is present for CpuManufacturer, not even an explicit nil
func (o *Node) UnsetCpuManufacturer() {
	o.CpuManufacturer.Unset()
}

// GetCpuModel returns the CpuModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetCpuModel() string {
	if o == nil || IsNil(o.CpuModel.Get()) {
		var ret string
		return ret
	}
	return *o.CpuModel.Get()
}

// GetCpuModelOk returns a tuple with the CpuModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetCpuModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CpuModel.Get(), o.CpuModel.IsSet()
}

// HasCpuModel returns a boolean if a field has been set.
func (o *Node) HasCpuModel() bool {
	if o != nil && o.CpuModel.IsSet() {
		return true
	}

	return false
}

// SetCpuModel gets a reference to the given NullableString and assigns it to the CpuModel field.
func (o *Node) SetCpuModel(v string) {
	o.CpuModel.Set(&v)
}

// SetCpuModelNil sets the value for CpuModel to be an explicit nil
func (o *Node) SetCpuModelNil() {
	o.CpuModel.Set(nil)
}

// UnsetCpuModel ensures that no value is present for CpuModel, not even an explicit nil
func (o *Node) UnsetCpuModel() {
	o.CpuModel.Unset()
}

// GetCreated returns the Created field value
func (o *Node) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Node) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Node) SetCreated(v time.Time) {
	o.Created = v
}

// GetGarageId returns the GarageId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetGarageId() string {
	if o == nil || IsNil(o.GarageId.Get()) {
		var ret string
		return ret
	}
	return *o.GarageId.Get()
}

// GetGarageIdOk returns a tuple with the GarageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetGarageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GarageId.Get(), o.GarageId.IsSet()
}

// HasGarageId returns a boolean if a field has been set.
func (o *Node) HasGarageId() bool {
	if o != nil && o.GarageId.IsSet() {
		return true
	}

	return false
}

// SetGarageId gets a reference to the given NullableString and assigns it to the GarageId field.
func (o *Node) SetGarageId(v string) {
	o.GarageId.Set(&v)
}

// SetGarageIdNil sets the value for GarageId to be an explicit nil
func (o *Node) SetGarageIdNil() {
	o.GarageId.Set(nil)
}

// UnsetGarageId ensures that no value is present for GarageId, not even an explicit nil
func (o *Node) UnsetGarageId() {
	o.GarageId.Unset()
}

// GetGpu returns the Gpu field value
func (o *Node) GetGpu() ClusterGpusInner {
	if o == nil {
		var ret ClusterGpusInner
		return ret
	}

	return o.Gpu
}

// GetGpuOk returns a tuple with the Gpu field value
// and a boolean to check if the value has been set.
func (o *Node) GetGpuOk() (*ClusterGpusInner, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gpu, true
}

// SetGpu sets field value
func (o *Node) SetGpu(v ClusterGpusInner) {
	o.Gpu = v
}

// GetGpuAlias returns the GpuAlias field value
func (o *Node) GetGpuAlias() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GpuAlias
}

// GetGpuAliasOk returns a tuple with the GpuAlias field value
// and a boolean to check if the value has been set.
func (o *Node) GetGpuAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GpuAlias, true
}

// SetGpuAlias sets field value
func (o *Node) SetGpuAlias(v string) {
	o.GpuAlias = v
}

// GetGpuCount returns the GpuCount field value if set, zero value otherwise.
func (o *Node) GetGpuCount() int32 {
	if o == nil || IsNil(o.GpuCount) {
		var ret int32
		return ret
	}
	return *o.GpuCount
}

// GetGpuCountOk returns a tuple with the GpuCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetGpuCountOk() (*int32, bool) {
	if o == nil || IsNil(o.GpuCount) {
		return nil, false
	}
	return o.GpuCount, true
}

// HasGpuCount returns a boolean if a field has been set.
func (o *Node) HasGpuCount() bool {
	if o != nil && !IsNil(o.GpuCount) {
		return true
	}

	return false
}

// SetGpuCount gets a reference to the given int32 and assigns it to the GpuCount field.
func (o *Node) SetGpuCount(v int32) {
	o.GpuCount = &v
}

// GetGpuModel returns the GpuModel field value
func (o *Node) GetGpuModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GpuModel
}

// GetGpuModelOk returns a tuple with the GpuModel field value
// and a boolean to check if the value has been set.
func (o *Node) GetGpuModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GpuModel, true
}

// SetGpuModel sets field value
func (o *Node) SetGpuModel(v string) {
	o.GpuModel = v
}

// GetGpuVbios returns the GpuVbios field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetGpuVbios() string {
	if o == nil || IsNil(o.GpuVbios.Get()) {
		var ret string
		return ret
	}
	return *o.GpuVbios.Get()
}

// GetGpuVbiosOk returns a tuple with the GpuVbios field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetGpuVbiosOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GpuVbios.Get(), o.GpuVbios.IsSet()
}

// HasGpuVbios returns a boolean if a field has been set.
func (o *Node) HasGpuVbios() bool {
	if o != nil && o.GpuVbios.IsSet() {
		return true
	}

	return false
}

// SetGpuVbios gets a reference to the given NullableString and assigns it to the GpuVbios field.
func (o *Node) SetGpuVbios(v string) {
	o.GpuVbios.Set(&v)
}

// SetGpuVbiosNil sets the value for GpuVbios to be an explicit nil
func (o *Node) SetGpuVbiosNil() {
	o.GpuVbios.Set(nil)
}

// UnsetGpuVbios ensures that no value is present for GpuVbios, not even an explicit nil
func (o *Node) UnsetGpuVbios() {
	o.GpuVbios.Unset()
}

// GetId returns the Id field value
func (o *Node) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Node) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Node) SetId(v string) {
	o.Id = v
}

// GetLocation returns the Location field value
func (o *Node) GetLocation() NodeLocation {
	if o == nil {
		var ret NodeLocation
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *Node) GetLocationOk() (*NodeLocation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *Node) SetLocation(v NodeLocation) {
	o.Location = v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *Node) GetMemory() int32 {
	if o == nil || IsNil(o.Memory) {
		var ret int32
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetMemoryOk() (*int32, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *Node) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int32 and assigns it to the Memory field.
func (o *Node) SetMemory(v int32) {
	o.Memory = &v
}

// GetMgmtIp returns the MgmtIp field value if set, zero value otherwise.
func (o *Node) GetMgmtIp() string {
	if o == nil || IsNil(o.MgmtIp) {
		var ret string
		return ret
	}
	return *o.MgmtIp
}

// GetMgmtIpOk returns a tuple with the MgmtIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetMgmtIpOk() (*string, bool) {
	if o == nil || IsNil(o.MgmtIp) {
		return nil, false
	}
	return o.MgmtIp, true
}

// HasMgmtIp returns a boolean if a field has been set.
func (o *Node) HasMgmtIp() bool {
	if o != nil && !IsNil(o.MgmtIp) {
		return true
	}

	return false
}

// SetMgmtIp gets a reference to the given string and assigns it to the MgmtIp field.
func (o *Node) SetMgmtIp(v string) {
	o.MgmtIp = &v
}

// GetMgmtMac returns the MgmtMac field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetMgmtMac() string {
	if o == nil || IsNil(o.MgmtMac.Get()) {
		var ret string
		return ret
	}
	return *o.MgmtMac.Get()
}

// GetMgmtMacOk returns a tuple with the MgmtMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetMgmtMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MgmtMac.Get(), o.MgmtMac.IsSet()
}

// HasMgmtMac returns a boolean if a field has been set.
func (o *Node) HasMgmtMac() bool {
	if o != nil && o.MgmtMac.IsSet() {
		return true
	}

	return false
}

// SetMgmtMac gets a reference to the given NullableString and assigns it to the MgmtMac field.
func (o *Node) SetMgmtMac(v string) {
	o.MgmtMac.Set(&v)
}

// SetMgmtMacNil sets the value for MgmtMac to be an explicit nil
func (o *Node) SetMgmtMacNil() {
	o.MgmtMac.Set(nil)
}

// UnsetMgmtMac ensures that no value is present for MgmtMac, not even an explicit nil
func (o *Node) UnsetMgmtMac() {
	o.MgmtMac.Unset()
}

// GetModel returns the Model field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetModel() string {
	if o == nil || IsNil(o.Model.Get()) {
		var ret string
		return ret
	}
	return *o.Model.Get()
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Model.Get(), o.Model.IsSet()
}

// HasModel returns a boolean if a field has been set.
func (o *Node) HasModel() bool {
	if o != nil && o.Model.IsSet() {
		return true
	}

	return false
}

// SetModel gets a reference to the given NullableString and assigns it to the Model field.
func (o *Node) SetModel(v string) {
	o.Model.Set(&v)
}

// SetModelNil sets the value for Model to be an explicit nil
func (o *Node) SetModelNil() {
	o.Model.Set(nil)
}

// UnsetModel ensures that no value is present for Model, not even an explicit nil
func (o *Node) UnsetModel() {
	o.Model.Unset()
}

// GetModified returns the Modified field value
func (o *Node) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *Node) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *Node) SetModified(v time.Time) {
	o.Modified = v
}

// GetNetworkType returns the NetworkType field value if set, zero value otherwise.
func (o *Node) GetNetworkType() NetworkTypeEnum {
	if o == nil || IsNil(o.NetworkType) {
		var ret NetworkTypeEnum
		return ret
	}
	return *o.NetworkType
}

// GetNetworkTypeOk returns a tuple with the NetworkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetNetworkTypeOk() (*NetworkTypeEnum, bool) {
	if o == nil || IsNil(o.NetworkType) {
		return nil, false
	}
	return o.NetworkType, true
}

// HasNetworkType returns a boolean if a field has been set.
func (o *Node) HasNetworkType() bool {
	if o != nil && !IsNil(o.NetworkType) {
		return true
	}

	return false
}

// SetNetworkType gets a reference to the given NetworkTypeEnum and assigns it to the NetworkType field.
func (o *Node) SetNetworkType(v NetworkTypeEnum) {
	o.NetworkType = &v
}

// GetNicPrefixes returns the NicPrefixes field value if set, zero value otherwise.
func (o *Node) GetNicPrefixes() []string {
	if o == nil || IsNil(o.NicPrefixes) {
		var ret []string
		return ret
	}
	return o.NicPrefixes
}

// GetNicPrefixesOk returns a tuple with the NicPrefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetNicPrefixesOk() ([]string, bool) {
	if o == nil || IsNil(o.NicPrefixes) {
		return nil, false
	}
	return o.NicPrefixes, true
}

// HasNicPrefixes returns a boolean if a field has been set.
func (o *Node) HasNicPrefixes() bool {
	if o != nil && !IsNil(o.NicPrefixes) {
		return true
	}

	return false
}

// SetNicPrefixes gets a reference to the given []string and assigns it to the NicPrefixes field.
func (o *Node) SetNicPrefixes(v []string) {
	o.NicPrefixes = v
}

// GetNotes returns the Notes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetNotes() string {
	if o == nil || IsNil(o.Notes.Get()) {
		var ret string
		return ret
	}
	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetNotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// HasNotes returns a boolean if a field has been set.
func (o *Node) HasNotes() bool {
	if o != nil && o.Notes.IsSet() {
		return true
	}

	return false
}

// SetNotes gets a reference to the given NullableString and assigns it to the Notes field.
func (o *Node) SetNotes(v string) {
	o.Notes.Set(&v)
}

// SetNotesNil sets the value for Notes to be an explicit nil
func (o *Node) SetNotesNil() {
	o.Notes.Set(nil)
}

// UnsetNotes ensures that no value is present for Notes, not even an explicit nil
func (o *Node) UnsetNotes() {
	o.Notes.Unset()
}

// GetOem returns the Oem field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetOem() string {
	if o == nil || IsNil(o.Oem.Get()) {
		var ret string
		return ret
	}
	return *o.Oem.Get()
}

// GetOemOk returns a tuple with the Oem field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetOemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Oem.Get(), o.Oem.IsSet()
}

// HasOem returns a boolean if a field has been set.
func (o *Node) HasOem() bool {
	if o != nil && o.Oem.IsSet() {
		return true
	}

	return false
}

// SetOem gets a reference to the given NullableString and assigns it to the Oem field.
func (o *Node) SetOem(v string) {
	o.Oem.Set(&v)
}

// SetOemNil sets the value for Oem to be an explicit nil
func (o *Node) SetOemNil() {
	o.Oem.Set(nil)
}

// UnsetOem ensures that no value is present for Oem, not even an explicit nil
func (o *Node) UnsetOem() {
	o.Oem.Unset()
}

// GetProviderNodeId returns the ProviderNodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetProviderNodeId() string {
	if o == nil || IsNil(o.ProviderNodeId.Get()) {
		var ret string
		return ret
	}
	return *o.ProviderNodeId.Get()
}

// GetProviderNodeIdOk returns a tuple with the ProviderNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetProviderNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProviderNodeId.Get(), o.ProviderNodeId.IsSet()
}

// HasProviderNodeId returns a boolean if a field has been set.
func (o *Node) HasProviderNodeId() bool {
	if o != nil && o.ProviderNodeId.IsSet() {
		return true
	}

	return false
}

// SetProviderNodeId gets a reference to the given NullableString and assigns it to the ProviderNodeId field.
func (o *Node) SetProviderNodeId(v string) {
	o.ProviderNodeId.Set(&v)
}

// SetProviderNodeIdNil sets the value for ProviderNodeId to be an explicit nil
func (o *Node) SetProviderNodeIdNil() {
	o.ProviderNodeId.Set(nil)
}

// UnsetProviderNodeId ensures that no value is present for ProviderNodeId, not even an explicit nil
func (o *Node) UnsetProviderNodeId() {
	o.ProviderNodeId.Unset()
}

// GetRack returns the Rack field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetRack() string {
	if o == nil || IsNil(o.Rack.Get()) {
		var ret string
		return ret
	}
	return *o.Rack.Get()
}

// GetRackOk returns a tuple with the Rack field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetRackOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rack.Get(), o.Rack.IsSet()
}

// HasRack returns a boolean if a field has been set.
func (o *Node) HasRack() bool {
	if o != nil && o.Rack.IsSet() {
		return true
	}

	return false
}

// SetRack gets a reference to the given NullableString and assigns it to the Rack field.
func (o *Node) SetRack(v string) {
	o.Rack.Set(&v)
}

// SetRackNil sets the value for Rack to be an explicit nil
func (o *Node) SetRackNil() {
	o.Rack.Set(nil)
}

// UnsetRack ensures that no value is present for Rack, not even an explicit nil
func (o *Node) UnsetRack() {
	o.Rack.Unset()
}

// GetRackUnit returns the RackUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetRackUnit() int32 {
	if o == nil || IsNil(o.RackUnit.Get()) {
		var ret int32
		return ret
	}
	return *o.RackUnit.Get()
}

// GetRackUnitOk returns a tuple with the RackUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetRackUnitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RackUnit.Get(), o.RackUnit.IsSet()
}

// HasRackUnit returns a boolean if a field has been set.
func (o *Node) HasRackUnit() bool {
	if o != nil && o.RackUnit.IsSet() {
		return true
	}

	return false
}

// SetRackUnit gets a reference to the given NullableInt32 and assigns it to the RackUnit field.
func (o *Node) SetRackUnit(v int32) {
	o.RackUnit.Set(&v)
}

// SetRackUnitNil sets the value for RackUnit to be an explicit nil
func (o *Node) SetRackUnitNil() {
	o.RackUnit.Set(nil)
}

// UnsetRackUnit ensures that no value is present for RackUnit, not even an explicit nil
func (o *Node) UnsetRackUnit() {
	o.RackUnit.Unset()
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber.Get()) {
		var ret string
		return ret
	}
	return *o.SerialNumber.Get()
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SerialNumber.Get(), o.SerialNumber.IsSet()
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *Node) HasSerialNumber() bool {
	if o != nil && o.SerialNumber.IsSet() {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given NullableString and assigns it to the SerialNumber field.
func (o *Node) SetSerialNumber(v string) {
	o.SerialNumber.Set(&v)
}

// SetSerialNumberNil sets the value for SerialNumber to be an explicit nil
func (o *Node) SetSerialNumberNil() {
	o.SerialNumber.Set(nil)
}

// UnsetSerialNumber ensures that no value is present for SerialNumber, not even an explicit nil
func (o *Node) UnsetSerialNumber() {
	o.SerialNumber.Unset()
}

// GetStorage returns the Storage field value
func (o *Node) GetStorage() []NodeStorage {
	if o == nil {
		var ret []NodeStorage
		return ret
	}

	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value
// and a boolean to check if the value has been set.
func (o *Node) GetStorageOk() ([]NodeStorage, bool) {
	if o == nil {
		return nil, false
	}
	return o.Storage, true
}

// SetStorage sets field value
func (o *Node) SetStorage(v []NodeStorage) {
	o.Storage = v
}

// GetSystemArch returns the SystemArch field value
func (o *Node) GetSystemArch() SystemArchEnum {
	if o == nil {
		var ret SystemArchEnum
		return ret
	}

	return o.SystemArch
}

// GetSystemArchOk returns a tuple with the SystemArch field value
// and a boolean to check if the value has been set.
func (o *Node) GetSystemArchOk() (*SystemArchEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemArch, true
}

// SetSystemArch sets field value
func (o *Node) SetSystemArch(v SystemArchEnum) {
	o.SystemArch = v
}

// GetTee returns the Tee field value if set, zero value otherwise.
func (o *Node) GetTee() bool {
	if o == nil || IsNil(o.Tee) {
		var ret bool
		return ret
	}
	return *o.Tee
}

// GetTeeOk returns a tuple with the Tee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetTeeOk() (*bool, bool) {
	if o == nil || IsNil(o.Tee) {
		return nil, false
	}
	return o.Tee, true
}

// HasTee returns a boolean if a field has been set.
func (o *Node) HasTee() bool {
	if o != nil && !IsNil(o.Tee) {
		return true
	}

	return false
}

// SetTee gets a reference to the given bool and assigns it to the Tee field.
func (o *Node) SetTee(v bool) {
	o.Tee = &v
}

func (o Node) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Node) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BmcIp.IsSet() {
		toSerialize["bmc_ip"] = o.BmcIp.Get()
	}
	if o.BmcMac.IsSet() {
		toSerialize["bmc_mac"] = o.BmcMac.Get()
	}
	if o.BmcPassword.IsSet() {
		toSerialize["bmc_password"] = o.BmcPassword.Get()
	}
	if o.BmcUser.IsSet() {
		toSerialize["bmc_user"] = o.BmcUser.Get()
	}
	if o.Cluster.IsSet() {
		toSerialize["cluster"] = o.Cluster.Get()
	}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if o.CpuManufacturer.IsSet() {
		toSerialize["cpu_manufacturer"] = o.CpuManufacturer.Get()
	}
	if o.CpuModel.IsSet() {
		toSerialize["cpu_model"] = o.CpuModel.Get()
	}
	toSerialize["created"] = o.Created
	if o.GarageId.IsSet() {
		toSerialize["garage_id"] = o.GarageId.Get()
	}
	toSerialize["gpu"] = o.Gpu
	toSerialize["gpu_alias"] = o.GpuAlias
	if !IsNil(o.GpuCount) {
		toSerialize["gpu_count"] = o.GpuCount
	}
	toSerialize["gpu_model"] = o.GpuModel
	if o.GpuVbios.IsSet() {
		toSerialize["gpu_vbios"] = o.GpuVbios.Get()
	}
	toSerialize["id"] = o.Id
	toSerialize["location"] = o.Location
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.MgmtIp) {
		toSerialize["mgmt_ip"] = o.MgmtIp
	}
	if o.MgmtMac.IsSet() {
		toSerialize["mgmt_mac"] = o.MgmtMac.Get()
	}
	if o.Model.IsSet() {
		toSerialize["model"] = o.Model.Get()
	}
	toSerialize["modified"] = o.Modified
	if !IsNil(o.NetworkType) {
		toSerialize["network_type"] = o.NetworkType
	}
	if !IsNil(o.NicPrefixes) {
		toSerialize["nic_prefixes"] = o.NicPrefixes
	}
	if o.Notes.IsSet() {
		toSerialize["notes"] = o.Notes.Get()
	}
	if o.Oem.IsSet() {
		toSerialize["oem"] = o.Oem.Get()
	}
	if o.ProviderNodeId.IsSet() {
		toSerialize["provider_node_id"] = o.ProviderNodeId.Get()
	}
	if o.Rack.IsSet() {
		toSerialize["rack"] = o.Rack.Get()
	}
	if o.RackUnit.IsSet() {
		toSerialize["rack_unit"] = o.RackUnit.Get()
	}
	if o.SerialNumber.IsSet() {
		toSerialize["serial_number"] = o.SerialNumber.Get()
	}
	toSerialize["storage"] = o.Storage
	toSerialize["system_arch"] = o.SystemArch
	if !IsNil(o.Tee) {
		toSerialize["tee"] = o.Tee
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Node) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created",
		"gpu",
		"gpu_alias",
		"gpu_model",
		"id",
		"location",
		"modified",
		"storage",
		"system_arch",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNode := _Node{}

	err = json.Unmarshal(data, &varNode)

	if err != nil {
		return err
	}

	*o = Node(varNode)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "bmc_ip")
		delete(additionalProperties, "bmc_mac")
		delete(additionalProperties, "bmc_password")
		delete(additionalProperties, "bmc_user")
		delete(additionalProperties, "cluster")
		delete(additionalProperties, "cpu")
		delete(additionalProperties, "cpu_manufacturer")
		delete(additionalProperties, "cpu_model")
		delete(additionalProperties, "created")
		delete(additionalProperties, "garage_id")
		delete(additionalProperties, "gpu")
		delete(additionalProperties, "gpu_alias")
		delete(additionalProperties, "gpu_count")
		delete(additionalProperties, "gpu_model")
		delete(additionalProperties, "gpu_vbios")
		delete(additionalProperties, "id")
		delete(additionalProperties, "location")
		delete(additionalProperties, "memory")
		delete(additionalProperties, "mgmt_ip")
		delete(additionalProperties, "mgmt_mac")
		delete(additionalProperties, "model")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "network_type")
		delete(additionalProperties, "nic_prefixes")
		delete(additionalProperties, "notes")
		delete(additionalProperties, "oem")
		delete(additionalProperties, "provider_node_id")
		delete(additionalProperties, "rack")
		delete(additionalProperties, "rack_unit")
		delete(additionalProperties, "serial_number")
		delete(additionalProperties, "storage")
		delete(additionalProperties, "system_arch")
		delete(additionalProperties, "tee")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNode struct {
	value *Node
	isSet bool
}

func (v NullableNode) Get() *Node {
	return v.value
}

func (v *NullableNode) Set(val *Node) {
	v.value = val
	v.isSet = true
}

func (v NullableNode) IsSet() bool {
	return v.isSet
}

func (v *NullableNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNode(val *Node) *NullableNode {
	return &NullableNode{value: val, isSet: true}
}

func (v NullableNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
