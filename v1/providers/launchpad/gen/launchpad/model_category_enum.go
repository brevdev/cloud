/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CategoryEnum * `AI` - AI * `Clara` - Clara * `Data Science` - Data Science * `3D Design Collaboration and Simulation` - 3D Design Collaboration and Simulation * `Developer` - Developer * `Infrastructure Optimization` - Infrastructure Optimization
type CategoryEnum string

// List of CategoryEnum
const (
	CategoryAI                                 CategoryEnum = "AI"
	CategoryClara                              CategoryEnum = "Clara"
	CategoryDataScience                        CategoryEnum = "Data Science"
	Category3DDesignCollaborationAndSimulation CategoryEnum = "3D Design Collaboration and Simulation"
	CategoryDeveloper                          CategoryEnum = "Developer"
	CategoryInfrastructureOptimization         CategoryEnum = "Infrastructure Optimization"
)

// All allowed values of CategoryEnum enum
var AllowedCategoryEnumEnumValues = []CategoryEnum{
	"AI",
	"Clara",
	"Data Science",
	"3D Design Collaboration and Simulation",
	"Developer",
	"Infrastructure Optimization",
}

func (v *CategoryEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CategoryEnum(value)
	for _, existing := range AllowedCategoryEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CategoryEnum", value)
}

// NewCategoryEnumFromValue returns a pointer to a valid CategoryEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCategoryEnumFromValue(v string) (*CategoryEnum, error) {
	ev := CategoryEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CategoryEnum: valid values are %v", v, AllowedCategoryEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CategoryEnum) IsValid() bool {
	for _, existing := range AllowedCategoryEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CategoryEnum value
func (v CategoryEnum) Ptr() *CategoryEnum {
	return &v
}

type NullableCategoryEnum struct {
	value *CategoryEnum
	isSet bool
}

func (v NullableCategoryEnum) Get() *CategoryEnum {
	return v.value
}

func (v *NullableCategoryEnum) Set(val *CategoryEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryEnum(val *CategoryEnum) *NullableCategoryEnum {
	return &NullableCategoryEnum{value: val, isSet: true}
}

func (v NullableCategoryEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
