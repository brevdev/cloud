/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the OEM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OEM{}

// OEM struct for OEM
type OEM struct {
	// Timestamp of when the object was created
	Created time.Time `json:"created"`
	Id      string    `json:"id"`
	// Timestamp of when the object was last modified
	Modified             time.Time `json:"modified"`
	Name                 string    `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _OEM OEM

// NewOEM instantiates a new OEM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOEM(created time.Time, id string, modified time.Time, name string) *OEM {
	this := OEM{}
	this.Created = created
	this.Id = id
	this.Modified = modified
	this.Name = name
	return &this
}

// NewOEMWithDefaults instantiates a new OEM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOEMWithDefaults() *OEM {
	this := OEM{}
	return &this
}

// GetCreated returns the Created field value
func (o *OEM) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *OEM) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *OEM) SetCreated(v time.Time) {
	o.Created = v
}

// GetId returns the Id field value
func (o *OEM) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OEM) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OEM) SetId(v string) {
	o.Id = v
}

// GetModified returns the Modified field value
func (o *OEM) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *OEM) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *OEM) SetModified(v time.Time) {
	o.Modified = v
}

// GetName returns the Name field value
func (o *OEM) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OEM) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OEM) SetName(v string) {
	o.Name = v
}

func (o OEM) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OEM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created"] = o.Created
	toSerialize["id"] = o.Id
	toSerialize["modified"] = o.Modified
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OEM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created",
		"id",
		"modified",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOEM := _OEM{}

	err = json.Unmarshal(data, &varOEM)

	if err != nil {
		return err
	}

	*o = OEM(varOEM)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created")
		delete(additionalProperties, "id")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOEM struct {
	value *OEM
	isSet bool
}

func (v NullableOEM) Get() *OEM {
	return v.value
}

func (v *NullableOEM) Set(val *OEM) {
	v.value = val
	v.isSet = true
}

func (v NullableOEM) IsSet() bool {
	return v.isSet
}

func (v *NullableOEM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOEM(val *OEM) *NullableOEM {
	return &NullableOEM{value: val, isSet: true}
}

func (v NullableOEM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOEM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
