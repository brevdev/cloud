/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Instance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Instance{}

// Instance struct for Instance
type Instance struct {
	Cluster DeploymentCluster `json:"cluster"`
	// Timestamp of when the object was created
	Created time.Time `json:"created"`
	Id      string    `json:"id"`
	// Unique ID for this instance assigned by its provider
	InstanceId string `json:"instance_id"`
	// User-friendly name of this instance
	Name NullableString `json:"name,omitempty"`
	// Timestamp of when the object was last modified
	Modified time.Time `json:"modified"`
	// Current lifecycle state of this instance  * `running` - Instance is running * `starting` - Instance is starting * `stopped` - Instance is stopped * `stopping` - Instance is stopping * `unknown` - Instance state is currently unknown
	State         *InstanceState `json:"state,omitempty"`
	StateModified time.Time      `json:"state_modified"`
	// Tags associated with this instance
	Tags                 []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Instance Instance

// NewInstance instantiates a new Instance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstance(cluster DeploymentCluster, created time.Time, id string, instanceId string, modified time.Time, stateModified time.Time) *Instance {
	this := Instance{}
	this.Cluster = cluster
	this.Created = created
	this.Id = id
	this.InstanceId = instanceId
	this.Modified = modified
	this.StateModified = stateModified
	return &this
}

// NewInstanceWithDefaults instantiates a new Instance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceWithDefaults() *Instance {
	this := Instance{}
	return &this
}

// GetCluster returns the Cluster field value
func (o *Instance) GetCluster() DeploymentCluster {
	if o == nil {
		var ret DeploymentCluster
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *Instance) GetClusterOk() (*DeploymentCluster, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *Instance) SetCluster(v DeploymentCluster) {
	o.Cluster = v
}

// GetCreated returns the Created field value
func (o *Instance) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Instance) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Instance) SetCreated(v time.Time) {
	o.Created = v
}

// GetId returns the Id field value
func (o *Instance) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Instance) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Instance) SetId(v string) {
	o.Id = v
}

// GetInstanceId returns the InstanceId field value
func (o *Instance) GetInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value
// and a boolean to check if the value has been set.
func (o *Instance) GetInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceId, true
}

// SetInstanceId sets field value
func (o *Instance) SetInstanceId(v string) {
	o.InstanceId = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Instance) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Instance) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Instance) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *Instance) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Instance) UnsetName() {
	o.Name.Unset()
}

// GetModified returns the Modified field value
func (o *Instance) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *Instance) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *Instance) SetModified(v time.Time) {
	o.Modified = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Instance) GetState() InstanceState {
	if o == nil || IsNil(o.State) {
		var ret InstanceState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetStateOk() (*InstanceState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Instance) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given InstanceState and assigns it to the State field.
func (o *Instance) SetState(v InstanceState) {
	o.State = &v
}

// GetStateModified returns the StateModified field value
func (o *Instance) GetStateModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StateModified
}

// GetStateModifiedOk returns a tuple with the StateModified field value
// and a boolean to check if the value has been set.
func (o *Instance) GetStateModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateModified, true
}

// SetStateModified sets field value
func (o *Instance) SetStateModified(v time.Time) {
	o.StateModified = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Instance) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Instance) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Instance) SetTags(v []string) {
	o.Tags = v
}

func (o Instance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Instance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cluster"] = o.Cluster
	toSerialize["created"] = o.Created
	toSerialize["id"] = o.Id
	toSerialize["instance_id"] = o.InstanceId
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	toSerialize["modified"] = o.Modified
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	toSerialize["state_modified"] = o.StateModified
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Instance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cluster",
		"created",
		"id",
		"instance_id",
		"modified",
		"state_modified",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstance := _Instance{}

	err = json.Unmarshal(data, &varInstance)

	if err != nil {
		return err
	}

	*o = Instance(varInstance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cluster")
		delete(additionalProperties, "created")
		delete(additionalProperties, "id")
		delete(additionalProperties, "instance_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "state")
		delete(additionalProperties, "state_modified")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstance struct {
	value *Instance
	isSet bool
}

func (v NullableInstance) Get() *Instance {
	return v.value
}

func (v *NullableInstance) Set(val *Instance) {
	v.value = val
	v.isSet = true
}

func (v NullableInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstance(val *Instance) *NullableInstance {
	return &NullableInstance{value: val, isSet: true}
}

func (v NullableInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
