/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ClusterNodesInner - struct for ClusterNodesInner
type ClusterNodesInner struct {
	Node   *Node
	String *string
}

// NodeAsClusterNodesInner is a convenience function that returns Node wrapped in ClusterNodesInner
func NodeAsClusterNodesInner(v *Node) ClusterNodesInner {
	return ClusterNodesInner{
		Node: v,
	}
}

// stringAsClusterNodesInner is a convenience function that returns string wrapped in ClusterNodesInner
func StringAsClusterNodesInner(v *string) ClusterNodesInner {
	return ClusterNodesInner{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ClusterNodesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Node
	err = newStrictDecoder(data).Decode(&dst.Node)
	if err == nil {
		jsonNode, _ := json.Marshal(dst.Node)
		if string(jsonNode) == "{}" { // empty struct
			dst.Node = nil
		} else {
			if err = validator.Validate(dst.Node); err != nil {
				dst.Node = nil
			} else {
				match++
			}
		}
	} else {
		dst.Node = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Node = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ClusterNodesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ClusterNodesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ClusterNodesInner) MarshalJSON() ([]byte, error) {
	if src.Node != nil {
		return json.Marshal(&src.Node)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ClusterNodesInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Node != nil {
		return obj.Node
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableClusterNodesInner struct {
	value *ClusterNodesInner
	isSet bool
}

func (v NullableClusterNodesInner) Get() *ClusterNodesInner {
	return v.value
}

func (v *NullableClusterNodesInner) Set(val *ClusterNodesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterNodesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterNodesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterNodesInner(val *ClusterNodesInner) *NullableClusterNodesInner {
	return &NullableClusterNodesInner{value: val, isSet: true}
}

func (v NullableClusterNodesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterNodesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
