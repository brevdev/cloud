/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceTypeGpu type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceTypeGpu{}

// InstanceTypeGpu struct for InstanceTypeGpu
type InstanceTypeGpu struct {
	// Total number of GPUs
	Count int32 `json:"count"`
	// GPU family name
	Family string `json:"family"`
	// GPU form factor  * `pcie` - PCIe * `sxm` - SXM
	InterconnectionType InterconnectionTypeEnum `json:"interconnection_type"`
	// GPU manufacturer name
	Manufacturer string `json:"manufacturer"`
	// Total GPU memory (in GB)
	MemoryGb int32 `json:"memory_gb"`
	// GPU model name
	Model                string `json:"model"`
	AdditionalProperties map[string]interface{}
}

type _InstanceTypeGpu InstanceTypeGpu

// NewInstanceTypeGpu instantiates a new InstanceTypeGpu object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceTypeGpu(count int32, family string, interconnectionType InterconnectionTypeEnum, manufacturer string, memoryGb int32, model string) *InstanceTypeGpu {
	this := InstanceTypeGpu{}
	this.Count = count
	this.Family = family
	this.InterconnectionType = interconnectionType
	this.Manufacturer = manufacturer
	this.MemoryGb = memoryGb
	this.Model = model
	return &this
}

// NewInstanceTypeGpuWithDefaults instantiates a new InstanceTypeGpu object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypeGpuWithDefaults() *InstanceTypeGpu {
	this := InstanceTypeGpu{}
	return &this
}

// GetCount returns the Count field value
func (o *InstanceTypeGpu) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeGpu) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *InstanceTypeGpu) SetCount(v int32) {
	o.Count = v
}

// GetFamily returns the Family field value
func (o *InstanceTypeGpu) GetFamily() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Family
}

// GetFamilyOk returns a tuple with the Family field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeGpu) GetFamilyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Family, true
}

// SetFamily sets field value
func (o *InstanceTypeGpu) SetFamily(v string) {
	o.Family = v
}

// GetInterconnectionType returns the InterconnectionType field value
func (o *InstanceTypeGpu) GetInterconnectionType() InterconnectionTypeEnum {
	if o == nil {
		var ret InterconnectionTypeEnum
		return ret
	}

	return o.InterconnectionType
}

// GetInterconnectionTypeOk returns a tuple with the InterconnectionType field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeGpu) GetInterconnectionTypeOk() (*InterconnectionTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InterconnectionType, true
}

// SetInterconnectionType sets field value
func (o *InstanceTypeGpu) SetInterconnectionType(v InterconnectionTypeEnum) {
	o.InterconnectionType = v
}

// GetManufacturer returns the Manufacturer field value
func (o *InstanceTypeGpu) GetManufacturer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeGpu) GetManufacturerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Manufacturer, true
}

// SetManufacturer sets field value
func (o *InstanceTypeGpu) SetManufacturer(v string) {
	o.Manufacturer = v
}

// GetMemoryGb returns the MemoryGb field value
func (o *InstanceTypeGpu) GetMemoryGb() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MemoryGb
}

// GetMemoryGbOk returns a tuple with the MemoryGb field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeGpu) GetMemoryGbOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemoryGb, true
}

// SetMemoryGb sets field value
func (o *InstanceTypeGpu) SetMemoryGb(v int32) {
	o.MemoryGb = v
}

// GetModel returns the Model field value
func (o *InstanceTypeGpu) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeGpu) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *InstanceTypeGpu) SetModel(v string) {
	o.Model = v
}

func (o InstanceTypeGpu) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceTypeGpu) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["family"] = o.Family
	toSerialize["interconnection_type"] = o.InterconnectionType
	toSerialize["manufacturer"] = o.Manufacturer
	toSerialize["memory_gb"] = o.MemoryGb
	toSerialize["model"] = o.Model

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceTypeGpu) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"family",
		"interconnection_type",
		"manufacturer",
		"memory_gb",
		"model",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceTypeGpu := _InstanceTypeGpu{}

	err = json.Unmarshal(data, &varInstanceTypeGpu)

	if err != nil {
		return err
	}

	*o = InstanceTypeGpu(varInstanceTypeGpu)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "count")
		delete(additionalProperties, "family")
		delete(additionalProperties, "interconnection_type")
		delete(additionalProperties, "manufacturer")
		delete(additionalProperties, "memory_gb")
		delete(additionalProperties, "model")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceTypeGpu struct {
	value *InstanceTypeGpu
	isSet bool
}

func (v NullableInstanceTypeGpu) Get() *InstanceTypeGpu {
	return v.value
}

func (v *NullableInstanceTypeGpu) Set(val *InstanceTypeGpu) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceTypeGpu) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceTypeGpu) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceTypeGpu(val *InstanceTypeGpu) *NullableInstanceTypeGpu {
	return &NullableInstanceTypeGpu{value: val, isSet: true}
}

func (v NullableInstanceTypeGpu) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceTypeGpu) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
