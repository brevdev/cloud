/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceTypePrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceTypePrice{}

// InstanceTypePrice struct for InstanceTypePrice
type InstanceTypePrice struct {
	// Currency code
	Currency string `json:"currency"`
	// Price per hour
	OnDemandPerHour      float64 `json:"on_demand_per_hour"`
	AdditionalProperties map[string]interface{}
}

type _InstanceTypePrice InstanceTypePrice

// NewInstanceTypePrice instantiates a new InstanceTypePrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceTypePrice(currency string, onDemandPerHour float64) *InstanceTypePrice {
	this := InstanceTypePrice{}
	this.Currency = currency
	this.OnDemandPerHour = onDemandPerHour
	return &this
}

// NewInstanceTypePriceWithDefaults instantiates a new InstanceTypePrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypePriceWithDefaults() *InstanceTypePrice {
	this := InstanceTypePrice{}
	return &this
}

// GetCurrency returns the Currency field value
func (o *InstanceTypePrice) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *InstanceTypePrice) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *InstanceTypePrice) SetCurrency(v string) {
	o.Currency = v
}

// GetOnDemandPerHour returns the OnDemandPerHour field value
func (o *InstanceTypePrice) GetOnDemandPerHour() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.OnDemandPerHour
}

// GetOnDemandPerHourOk returns a tuple with the OnDemandPerHour field value
// and a boolean to check if the value has been set.
func (o *InstanceTypePrice) GetOnDemandPerHourOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OnDemandPerHour, true
}

// SetOnDemandPerHour sets field value
func (o *InstanceTypePrice) SetOnDemandPerHour(v float64) {
	o.OnDemandPerHour = v
}

func (o InstanceTypePrice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceTypePrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currency"] = o.Currency
	toSerialize["on_demand_per_hour"] = o.OnDemandPerHour

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceTypePrice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currency",
		"on_demand_per_hour",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceTypePrice := _InstanceTypePrice{}

	err = json.Unmarshal(data, &varInstanceTypePrice)

	if err != nil {
		return err
	}

	*o = InstanceTypePrice(varInstanceTypePrice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "currency")
		delete(additionalProperties, "on_demand_per_hour")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceTypePrice struct {
	value *InstanceTypePrice
	isSet bool
}

func (v NullableInstanceTypePrice) Get() *InstanceTypePrice {
	return v.value
}

func (v *NullableInstanceTypePrice) Set(val *InstanceTypePrice) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceTypePrice) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceTypePrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceTypePrice(val *InstanceTypePrice) *NullableInstanceTypePrice {
	return &NullableInstanceTypePrice{value: val, isSet: true}
}

func (v NullableInstanceTypePrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceTypePrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
