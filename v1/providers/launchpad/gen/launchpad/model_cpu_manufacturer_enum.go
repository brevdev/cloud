/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CpuManufacturerEnum * `amd` - AMD * `arm` - ARM * `intel` - Intel
type CpuManufacturerEnum string

// List of CpuManufacturerEnum
const (
	CpuManufacturerAMD   CpuManufacturerEnum = "amd"
	CpuManufacturerARM   CpuManufacturerEnum = "arm"
	CpuManufacturerIntel CpuManufacturerEnum = "intel"
)

// All allowed values of CpuManufacturerEnum enum
var AllowedCpuManufacturerEnumEnumValues = []CpuManufacturerEnum{
	"amd",
	"arm",
	"intel",
}

func (v *CpuManufacturerEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CpuManufacturerEnum(value)
	for _, existing := range AllowedCpuManufacturerEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CpuManufacturerEnum", value)
}

// NewCpuManufacturerEnumFromValue returns a pointer to a valid CpuManufacturerEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCpuManufacturerEnumFromValue(v string) (*CpuManufacturerEnum, error) {
	ev := CpuManufacturerEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CpuManufacturerEnum: valid values are %v", v, AllowedCpuManufacturerEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CpuManufacturerEnum) IsValid() bool {
	for _, existing := range AllowedCpuManufacturerEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CpuManufacturerEnum value
func (v CpuManufacturerEnum) Ptr() *CpuManufacturerEnum {
	return &v
}

type NullableCpuManufacturerEnum struct {
	value *CpuManufacturerEnum
	isSet bool
}

func (v NullableCpuManufacturerEnum) Get() *CpuManufacturerEnum {
	return v.value
}

func (v *NullableCpuManufacturerEnum) Set(val *CpuManufacturerEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCpuManufacturerEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCpuManufacturerEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCpuManufacturerEnum(val *CpuManufacturerEnum) *NullableCpuManufacturerEnum {
	return &NullableCpuManufacturerEnum{value: val, isSet: true}
}

func (v NullableCpuManufacturerEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCpuManufacturerEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
