/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ProvisioningStateEnum * `deployed` - Cluster is in use by a deployment * `deploying` - Provisioning is in progress * `destroying` - Cluster is being destroyed * `pending` - Provisioning will begin soon * `ready` - Provisioning has completed and is ready for a deployment * `reserved` - Cluster is unprovisioned but reserved for later use * `unprovisioned` - Cluster has not yet been provisioned
type ProvisioningStateEnum string

// List of ProvisioningStateEnum
const (
	ProvisioningStateDeployed      ProvisioningStateEnum = "deployed"
	ProvisioningStateDeploying     ProvisioningStateEnum = "deploying"
	ProvisioningStateDestroying    ProvisioningStateEnum = "destroying"
	ProvisioningStatePending       ProvisioningStateEnum = "pending"
	ProvisioningStateReady         ProvisioningStateEnum = "ready"
	ProvisioningStateReserved      ProvisioningStateEnum = "reserved"
	ProvisioningStateUnprovisioned ProvisioningStateEnum = "unprovisioned"
)

// All allowed values of ProvisioningStateEnum enum
var AllowedProvisioningStateEnumEnumValues = []ProvisioningStateEnum{
	"deployed",
	"deploying",
	"destroying",
	"pending",
	"ready",
	"reserved",
	"unprovisioned",
}

func (v *ProvisioningStateEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProvisioningStateEnum(value)
	for _, existing := range AllowedProvisioningStateEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProvisioningStateEnum", value)
}

// NewProvisioningStateEnumFromValue returns a pointer to a valid ProvisioningStateEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProvisioningStateEnumFromValue(v string) (*ProvisioningStateEnum, error) {
	ev := ProvisioningStateEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProvisioningStateEnum: valid values are %v", v, AllowedProvisioningStateEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProvisioningStateEnum) IsValid() bool {
	for _, existing := range AllowedProvisioningStateEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProvisioningStateEnum value
func (v ProvisioningStateEnum) Ptr() *ProvisioningStateEnum {
	return &v
}

type NullableProvisioningStateEnum struct {
	value *ProvisioningStateEnum
	isSet bool
}

func (v NullableProvisioningStateEnum) Get() *ProvisioningStateEnum {
	return v.value
}

func (v *NullableProvisioningStateEnum) Set(val *ProvisioningStateEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisioningStateEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisioningStateEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisioningStateEnum(val *ProvisioningStateEnum) *NullableProvisioningStateEnum {
	return &NullableProvisioningStateEnum{value: val, isSet: true}
}

func (v NullableProvisioningStateEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisioningStateEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
