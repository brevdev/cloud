/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// InterconnectionTypeEnum * `pcie` - PCIe * `sxm` - SXM
type InterconnectionTypeEnum string

// List of InterconnectionTypeEnum
const (
	InterconnectionTypePCIe InterconnectionTypeEnum = "pcie"
	InterconnectionTypeSXM  InterconnectionTypeEnum = "sxm"
)

// All allowed values of InterconnectionTypeEnum enum
var AllowedInterconnectionTypeEnumEnumValues = []InterconnectionTypeEnum{
	"pcie",
	"sxm",
}

func (v *InterconnectionTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InterconnectionTypeEnum(value)
	for _, existing := range AllowedInterconnectionTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InterconnectionTypeEnum", value)
}

// NewInterconnectionTypeEnumFromValue returns a pointer to a valid InterconnectionTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterconnectionTypeEnumFromValue(v string) (*InterconnectionTypeEnum, error) {
	ev := InterconnectionTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InterconnectionTypeEnum: valid values are %v", v, AllowedInterconnectionTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InterconnectionTypeEnum) IsValid() bool {
	for _, existing := range AllowedInterconnectionTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InterconnectionTypeEnum value
func (v InterconnectionTypeEnum) Ptr() *InterconnectionTypeEnum {
	return &v
}

type NullableInterconnectionTypeEnum struct {
	value *InterconnectionTypeEnum
	isSet bool
}

func (v NullableInterconnectionTypeEnum) Get() *InterconnectionTypeEnum {
	return v.value
}

func (v *NullableInterconnectionTypeEnum) Set(val *InterconnectionTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableInterconnectionTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableInterconnectionTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterconnectionTypeEnum(val *InterconnectionTypeEnum) *NullableInterconnectionTypeEnum {
	return &NullableInterconnectionTypeEnum{value: val, isSet: true}
}

func (v NullableInterconnectionTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterconnectionTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
