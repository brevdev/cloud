/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DeploymentKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentKey{}

// DeploymentKey struct for DeploymentKey
type DeploymentKey struct {
	// Timestamp of when the object was created
	Created    time.Time         `json:"created"`
	Deployment ClusterDeployment `json:"deployment"`
	Id         string            `json:"id"`
	// Timestamp of when the object was last modified
	Modified time.Time `json:"modified"`
	// Descriptive name for the SSH public key
	Name string `json:"name"`
	// An SSH public key that should be authorized to access the deployment
	PublicKey            string `json:"public_key"`
	AdditionalProperties map[string]interface{}
}

type _DeploymentKey DeploymentKey

// NewDeploymentKey instantiates a new DeploymentKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentKey(created time.Time, deployment ClusterDeployment, id string, modified time.Time, name string, publicKey string) *DeploymentKey {
	this := DeploymentKey{}
	this.Created = created
	this.Deployment = deployment
	this.Id = id
	this.Modified = modified
	this.Name = name
	this.PublicKey = publicKey
	return &this
}

// NewDeploymentKeyWithDefaults instantiates a new DeploymentKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentKeyWithDefaults() *DeploymentKey {
	this := DeploymentKey{}
	return &this
}

// GetCreated returns the Created field value
func (o *DeploymentKey) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *DeploymentKey) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *DeploymentKey) SetCreated(v time.Time) {
	o.Created = v
}

// GetDeployment returns the Deployment field value
func (o *DeploymentKey) GetDeployment() ClusterDeployment {
	if o == nil {
		var ret ClusterDeployment
		return ret
	}

	return o.Deployment
}

// GetDeploymentOk returns a tuple with the Deployment field value
// and a boolean to check if the value has been set.
func (o *DeploymentKey) GetDeploymentOk() (*ClusterDeployment, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deployment, true
}

// SetDeployment sets field value
func (o *DeploymentKey) SetDeployment(v ClusterDeployment) {
	o.Deployment = v
}

// GetId returns the Id field value
func (o *DeploymentKey) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeploymentKey) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeploymentKey) SetId(v string) {
	o.Id = v
}

// GetModified returns the Modified field value
func (o *DeploymentKey) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *DeploymentKey) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *DeploymentKey) SetModified(v time.Time) {
	o.Modified = v
}

// GetName returns the Name field value
func (o *DeploymentKey) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DeploymentKey) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DeploymentKey) SetName(v string) {
	o.Name = v
}

// GetPublicKey returns the PublicKey field value
func (o *DeploymentKey) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *DeploymentKey) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *DeploymentKey) SetPublicKey(v string) {
	o.PublicKey = v
}

func (o DeploymentKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created"] = o.Created
	toSerialize["deployment"] = o.Deployment
	toSerialize["id"] = o.Id
	toSerialize["modified"] = o.Modified
	toSerialize["name"] = o.Name
	toSerialize["public_key"] = o.PublicKey

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeploymentKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created",
		"deployment",
		"id",
		"modified",
		"name",
		"public_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentKey := _DeploymentKey{}

	err = json.Unmarshal(data, &varDeploymentKey)

	if err != nil {
		return err
	}

	*o = DeploymentKey(varDeploymentKey)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created")
		delete(additionalProperties, "deployment")
		delete(additionalProperties, "id")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "name")
		delete(additionalProperties, "public_key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeploymentKey struct {
	value *DeploymentKey
	isSet bool
}

func (v NullableDeploymentKey) Get() *DeploymentKey {
	return v.value
}

func (v *NullableDeploymentKey) Set(val *DeploymentKey) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentKey) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentKey(val *DeploymentKey) *NullableDeploymentKey {
	return &NullableDeploymentKey{value: val, isSet: true}
}

func (v NullableDeploymentKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
