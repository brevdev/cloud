/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VgpuProfileEnum * `air` - NVIDIA Air * `bright_cluster` - Bright Cluster * `bright-cluster` - Bright Cluster (legacy option) * `flight_deck` - Flight Deck * `flight-deck` - Flight Deck (legacy option) * `nvidia_a40-48q` - nvidia_a40-48q * `nvidia-ai-enterprise` - NVIDIA AI Enterprise * `nvidia_l40s-48q` - nvidia_l40s-48q * `nvidia_rtx_pro_6000_blackwell_dc-4-96q` - nvidia_rtx_pro_6000_blackwell_dc-4-96q * `nvidia_rtx_pro_6000_blackwell_dc-96q` - nvidia_rtx_pro_6000_blackwell_dc-96q * `openshift` - OpenShift * `platform_only` - platform_only * `vmware_itadmin` - VMware IT admin
type VgpuProfileEnum string

// List of VgpuProfileEnum
const (
	VgpuProfileAir                                   VgpuProfileEnum = "air"
	VgpuProfileBrightCluster                         VgpuProfileEnum = "bright_cluster"
	VgpuProfileBrightClusterLegacy                   VgpuProfileEnum = "bright-cluster"
	VgpuProfileFlightDeck                            VgpuProfileEnum = "flight_deck"
	VgpuProfileFlightDeckLegacy                      VgpuProfileEnum = "flight-deck"
	VgpuProfileNvidiaA4048QLegacy                    VgpuProfileEnum = "nvidia_a40-48q"
	VgpuProfileNvidiaAiEnterpriseLegacy              VgpuProfileEnum = "nvidia-ai-enterprise"
	VgpuProfileNvidiaL40s48QLegacy                   VgpuProfileEnum = "nvidia_l40s-48q"
	VgpuProfileNvidiaRtxPro6000BlackwellDc496QLegacy VgpuProfileEnum = "nvidia_rtx_pro_6000_blackwell_dc-4-96q"
	VgpuProfileNvidiaRtxPro6000BlackwellDc96QLegacy  VgpuProfileEnum = "nvidia_rtx_pro_6000_blackwell_dc-96q"
	VgpuProfileOpenshift                             VgpuProfileEnum = "openshift"
	VgpuProfilePlatformOnly                          VgpuProfileEnum = "platform_only"
	VgpuProfileVmwareItadmin                         VgpuProfileEnum = "vmware_itadmin"
)

// All allowed values of VgpuProfileEnum enum
var AllowedVgpuProfileEnumEnumValues = []VgpuProfileEnum{
	"air",
	"bright_cluster",
	"bright-cluster",
	"flight_deck",
	"flight-deck",
	"nvidia_a40-48q",
	"nvidia-ai-enterprise",
	"nvidia_l40s-48q",
	"nvidia_rtx_pro_6000_blackwell_dc-4-96q",
	"nvidia_rtx_pro_6000_blackwell_dc-96q",
	"openshift",
	"platform_only",
	"vmware_itadmin",
}

func (v *VgpuProfileEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VgpuProfileEnum(value)
	for _, existing := range AllowedVgpuProfileEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VgpuProfileEnum", value)
}

// NewVgpuProfileEnumFromValue returns a pointer to a valid VgpuProfileEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVgpuProfileEnumFromValue(v string) (*VgpuProfileEnum, error) {
	ev := VgpuProfileEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VgpuProfileEnum: valid values are %v", v, AllowedVgpuProfileEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VgpuProfileEnum) IsValid() bool {
	for _, existing := range AllowedVgpuProfileEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VgpuProfileEnum value
func (v VgpuProfileEnum) Ptr() *VgpuProfileEnum {
	return &v
}

type NullableVgpuProfileEnum struct {
	value *VgpuProfileEnum
	isSet bool
}

func (v NullableVgpuProfileEnum) Get() *VgpuProfileEnum {
	return v.value
}

func (v *NullableVgpuProfileEnum) Set(val *VgpuProfileEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableVgpuProfileEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableVgpuProfileEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVgpuProfileEnum(val *VgpuProfileEnum) *NullableVgpuProfileEnum {
	return &NullableVgpuProfileEnum{value: val, isSet: true}
}

func (v NullableVgpuProfileEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVgpuProfileEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
