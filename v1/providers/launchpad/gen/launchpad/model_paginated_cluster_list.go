/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the PaginatedClusterList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginatedClusterList{}

// PaginatedClusterList struct for PaginatedClusterList
type PaginatedClusterList struct {
	Count                int32     `json:"count"`
	Next                 *string   `json:"next,omitempty"`
	Previous             *string   `json:"previous,omitempty"`
	Results              []Cluster `json:"results"`
	AdditionalProperties map[string]interface{}
}

type _PaginatedClusterList PaginatedClusterList

// NewPaginatedClusterList instantiates a new PaginatedClusterList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginatedClusterList(count int32, results []Cluster) *PaginatedClusterList {
	this := PaginatedClusterList{}
	this.Count = count
	this.Results = results
	return &this
}

// NewPaginatedClusterListWithDefaults instantiates a new PaginatedClusterList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginatedClusterListWithDefaults() *PaginatedClusterList {
	this := PaginatedClusterList{}
	return &this
}

// GetCount returns the Count field value
func (o *PaginatedClusterList) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *PaginatedClusterList) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *PaginatedClusterList) SetCount(v int32) {
	o.Count = v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *PaginatedClusterList) GetNext() string {
	if o == nil || IsNil(o.Next) {
		var ret string
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedClusterList) GetNextOk() (*string, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *PaginatedClusterList) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given string and assigns it to the Next field.
func (o *PaginatedClusterList) SetNext(v string) {
	o.Next = &v
}

// GetPrevious returns the Previous field value if set, zero value otherwise.
func (o *PaginatedClusterList) GetPrevious() string {
	if o == nil || IsNil(o.Previous) {
		var ret string
		return ret
	}
	return *o.Previous
}

// GetPreviousOk returns a tuple with the Previous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedClusterList) GetPreviousOk() (*string, bool) {
	if o == nil || IsNil(o.Previous) {
		return nil, false
	}
	return o.Previous, true
}

// HasPrevious returns a boolean if a field has been set.
func (o *PaginatedClusterList) HasPrevious() bool {
	if o != nil && !IsNil(o.Previous) {
		return true
	}

	return false
}

// SetPrevious gets a reference to the given string and assigns it to the Previous field.
func (o *PaginatedClusterList) SetPrevious(v string) {
	o.Previous = &v
}

// GetResults returns the Results field value
func (o *PaginatedClusterList) GetResults() []Cluster {
	if o == nil {
		var ret []Cluster
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *PaginatedClusterList) GetResultsOk() ([]Cluster, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *PaginatedClusterList) SetResults(v []Cluster) {
	o.Results = v
}

func (o PaginatedClusterList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginatedClusterList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	if !IsNil(o.Previous) {
		toSerialize["previous"] = o.Previous
	}
	toSerialize["results"] = o.Results

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PaginatedClusterList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaginatedClusterList := _PaginatedClusterList{}

	err = json.Unmarshal(data, &varPaginatedClusterList)

	if err != nil {
		return err
	}

	*o = PaginatedClusterList(varPaginatedClusterList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "count")
		delete(additionalProperties, "next")
		delete(additionalProperties, "previous")
		delete(additionalProperties, "results")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePaginatedClusterList struct {
	value *PaginatedClusterList
	isSet bool
}

func (v NullablePaginatedClusterList) Get() *PaginatedClusterList {
	return v.value
}

func (v *NullablePaginatedClusterList) Set(val *PaginatedClusterList) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginatedClusterList) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginatedClusterList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginatedClusterList(val *PaginatedClusterList) *NullablePaginatedClusterList {
	return &NullablePaginatedClusterList{value: val, isSet: true}
}

func (v NullablePaginatedClusterList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginatedClusterList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
