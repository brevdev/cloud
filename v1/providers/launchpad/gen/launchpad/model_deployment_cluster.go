/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DeploymentCluster - struct for DeploymentCluster
type DeploymentCluster struct {
	Cluster *Cluster
	String  *string
}

// ClusterAsDeploymentCluster is a convenience function that returns Cluster wrapped in DeploymentCluster
func ClusterAsDeploymentCluster(v *Cluster) DeploymentCluster {
	return DeploymentCluster{
		Cluster: v,
	}
}

// stringAsDeploymentCluster is a convenience function that returns string wrapped in DeploymentCluster
func StringAsDeploymentCluster(v *string) DeploymentCluster {
	return DeploymentCluster{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *DeploymentCluster) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Cluster
	err = newStrictDecoder(data).Decode(&dst.Cluster)
	if err == nil {
		jsonCluster, _ := json.Marshal(dst.Cluster)
		if string(jsonCluster) == "{}" { // empty struct
			dst.Cluster = nil
		} else {
			if err = validator.Validate(dst.Cluster); err != nil {
				dst.Cluster = nil
			} else {
				match++
			}
		}
	} else {
		dst.Cluster = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Cluster = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DeploymentCluster)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DeploymentCluster)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DeploymentCluster) MarshalJSON() ([]byte, error) {
	if src.Cluster != nil {
		return json.Marshal(&src.Cluster)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DeploymentCluster) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Cluster != nil {
		return obj.Cluster
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableDeploymentCluster struct {
	value *DeploymentCluster
	isSet bool
}

func (v NullableDeploymentCluster) Get() *DeploymentCluster {
	return v.value
}

func (v *NullableDeploymentCluster) Set(val *DeploymentCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentCluster(val *DeploymentCluster) *NullableDeploymentCluster {
	return &NullableDeploymentCluster{value: val, isSet: true}
}

func (v NullableDeploymentCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
