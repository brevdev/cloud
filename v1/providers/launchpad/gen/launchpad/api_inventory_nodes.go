/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// InventoryNodesAPIService InventoryNodesAPI service
type InventoryNodesAPIService service

type ApiInventoryNodesBulkCreateRequest struct {
	ctx        context.Context
	ApiService *InventoryNodesAPIService
	csvFile    *os.File
}

func (r ApiInventoryNodesBulkCreateRequest) CsvFile(csvFile *os.File) ApiInventoryNodesBulkCreateRequest {
	r.csvFile = csvFile
	return r
}

func (r ApiInventoryNodesBulkCreateRequest) Execute() (*NodeBulk, *http.Response, error) {
	return r.ApiService.InventoryNodesBulkCreateExecute(r)
}

/*
InventoryNodesBulkCreate Method for InventoryNodesBulkCreate

Create nodes in bulk via CSV file upload

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInventoryNodesBulkCreateRequest
*/
func (a *InventoryNodesAPIService) InventoryNodesBulkCreate(ctx context.Context) ApiInventoryNodesBulkCreateRequest {
	return ApiInventoryNodesBulkCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return NodeBulk
func (a *InventoryNodesAPIService) InventoryNodesBulkCreateExecute(r ApiInventoryNodesBulkCreateRequest) (*NodeBulk, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *NodeBulk
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryNodesAPIService.InventoryNodesBulkCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/nodes/bulk/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.csvFile == nil {
		return localVarReturnValue, nil, reportError("csvFile is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var csvFileLocalVarFormFileName string
	var csvFileLocalVarFileName string
	var csvFileLocalVarFileBytes []byte

	csvFileLocalVarFormFileName = "csv_file"
	csvFileLocalVarFile := r.csvFile

	if csvFileLocalVarFile != nil {
		fbs, _ := io.ReadAll(csvFileLocalVarFile)

		csvFileLocalVarFileBytes = fbs
		csvFileLocalVarFileName = csvFileLocalVarFile.Name()
		csvFileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: csvFileLocalVarFileBytes, fileName: csvFileLocalVarFileName, formFileName: csvFileLocalVarFormFileName})
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInventoryNodesBulkPartialUpdateRequest struct {
	ctx            context.Context
	ApiService     *InventoryNodesAPIService
	nodeBulkUpdate *NodeBulkUpdate
}

func (r ApiInventoryNodesBulkPartialUpdateRequest) NodeBulkUpdate(nodeBulkUpdate NodeBulkUpdate) ApiInventoryNodesBulkPartialUpdateRequest {
	r.nodeBulkUpdate = &nodeBulkUpdate
	return r
}

func (r ApiInventoryNodesBulkPartialUpdateRequest) Execute() (*NodeBulkUpdate, *http.Response, error) {
	return r.ApiService.InventoryNodesBulkPartialUpdateExecute(r)
}

/*
InventoryNodesBulkPartialUpdate Method for InventoryNodesBulkPartialUpdate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInventoryNodesBulkPartialUpdateRequest
*/
func (a *InventoryNodesAPIService) InventoryNodesBulkPartialUpdate(ctx context.Context) ApiInventoryNodesBulkPartialUpdateRequest {
	return ApiInventoryNodesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return NodeBulkUpdate
func (a *InventoryNodesAPIService) InventoryNodesBulkPartialUpdateExecute(r ApiInventoryNodesBulkPartialUpdateRequest) (*NodeBulkUpdate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *NodeBulkUpdate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryNodesAPIService.InventoryNodesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/nodes/bulk/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nodeBulkUpdate == nil {
		return localVarReturnValue, nil, reportError("nodeBulkUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nodeBulkUpdate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInventoryNodesCreateRequest struct {
	ctx        context.Context
	ApiService *InventoryNodesAPIService
	node       *Node
}

func (r ApiInventoryNodesCreateRequest) Node(node Node) ApiInventoryNodesCreateRequest {
	r.node = &node
	return r
}

func (r ApiInventoryNodesCreateRequest) Execute() (*Node, *http.Response, error) {
	return r.ApiService.InventoryNodesCreateExecute(r)
}

/*
InventoryNodesCreate Method for InventoryNodesCreate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInventoryNodesCreateRequest
*/
func (a *InventoryNodesAPIService) InventoryNodesCreate(ctx context.Context) ApiInventoryNodesCreateRequest {
	return ApiInventoryNodesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Node
func (a *InventoryNodesAPIService) InventoryNodesCreateExecute(r ApiInventoryNodesCreateRequest) (*Node, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Node
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryNodesAPIService.InventoryNodesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/nodes/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.node == nil {
		return localVarReturnValue, nil, reportError("node is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.node
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInventoryNodesDestroyRequest struct {
	ctx        context.Context
	ApiService *InventoryNodesAPIService
	id         string
}

func (r ApiInventoryNodesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.InventoryNodesDestroyExecute(r)
}

/*
InventoryNodesDestroy Method for InventoryNodesDestroy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A UUID string identifying this node.
	@return ApiInventoryNodesDestroyRequest
*/
func (a *InventoryNodesAPIService) InventoryNodesDestroy(ctx context.Context, id string) ApiInventoryNodesDestroyRequest {
	return ApiInventoryNodesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *InventoryNodesAPIService) InventoryNodesDestroyExecute(r ApiInventoryNodesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryNodesAPIService.InventoryNodesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/nodes/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInventoryNodesHistoryListRequest struct {
	ctx        context.Context
	ApiService *InventoryNodesAPIService
	id         string
	page       *int32
	pageSize   *int32
}

// A page number within the paginated result set.
func (r ApiInventoryNodesHistoryListRequest) Page(page int32) ApiInventoryNodesHistoryListRequest {
	r.page = &page
	return r
}

// Number of results to return per page.
func (r ApiInventoryNodesHistoryListRequest) PageSize(pageSize int32) ApiInventoryNodesHistoryListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiInventoryNodesHistoryListRequest) Execute() (*PaginatedModelChangeList, *http.Response, error) {
	return r.ApiService.InventoryNodesHistoryListExecute(r)
}

/*
InventoryNodesHistoryList Method for InventoryNodesHistoryList

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiInventoryNodesHistoryListRequest
*/
func (a *InventoryNodesAPIService) InventoryNodesHistoryList(ctx context.Context, id string) ApiInventoryNodesHistoryListRequest {
	return ApiInventoryNodesHistoryListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PaginatedModelChangeList
func (a *InventoryNodesAPIService) InventoryNodesHistoryListExecute(r ApiInventoryNodesHistoryListRequest) (*PaginatedModelChangeList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedModelChangeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryNodesAPIService.InventoryNodesHistoryList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/nodes/{id}/history/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInventoryNodesListRequest struct {
	ctx             context.Context
	ApiService      *InventoryNodesAPIService
	bmcIp           *string
	bmcMac          *string
	bmcPassword     *string
	bmcUser         *string
	cluster         *string
	cpu             *int32
	cpuManufacturer *string
	cpuModel        *string
	expand          *string
	fields          *string
	garageId        *string
	gpu             *[]string
	gpuAlias        *string
	gpuCount        *int32
	gpuModel        *string
	gpuVbios        *string
	id              *string
	location        *string
	memory          *int32
	mgmtIp          *string
	mgmtMac         *string
	minGpuCount     *int32
	model           *string
	networkType     *string
	oem             *string
	omit            *string
	ordering        *string
	page            *int32
	pageSize        *int32
	provider        *string
	providerNodeId  *string
	rack            *string
	rackUnit        *int32
	search          *string
	serialNumber    *string
	systemArch      *string
	tee             *bool
}

func (r ApiInventoryNodesListRequest) BmcIp(bmcIp string) ApiInventoryNodesListRequest {
	r.bmcIp = &bmcIp
	return r
}

func (r ApiInventoryNodesListRequest) BmcMac(bmcMac string) ApiInventoryNodesListRequest {
	r.bmcMac = &bmcMac
	return r
}

func (r ApiInventoryNodesListRequest) BmcPassword(bmcPassword string) ApiInventoryNodesListRequest {
	r.bmcPassword = &bmcPassword
	return r
}

func (r ApiInventoryNodesListRequest) BmcUser(bmcUser string) ApiInventoryNodesListRequest {
	r.bmcUser = &bmcUser
	return r
}

func (r ApiInventoryNodesListRequest) Cluster(cluster string) ApiInventoryNodesListRequest {
	r.cluster = &cluster
	return r
}

func (r ApiInventoryNodesListRequest) Cpu(cpu int32) ApiInventoryNodesListRequest {
	r.cpu = &cpu
	return r
}

// Manufacturer of the node&#39;s CPU  * &#x60;amd&#x60; - AMD * &#x60;arm&#x60; - ARM * &#x60;intel&#x60; - Intel
func (r ApiInventoryNodesListRequest) CpuManufacturer(cpuManufacturer string) ApiInventoryNodesListRequest {
	r.cpuManufacturer = &cpuManufacturer
	return r
}

func (r ApiInventoryNodesListRequest) CpuModel(cpuModel string) ApiInventoryNodesListRequest {
	r.cpuModel = &cpuModel
	return r
}

// Expand related field(s) instead of only showing a UUID. Separate nested relationships with a period (ex: \&quot;location.provider\&quot;). Separate multiple fields with a comma (ex: \&quot;location,oem\&quot;)
func (r ApiInventoryNodesListRequest) Expand(expand string) ApiInventoryNodesListRequest {
	r.expand = &expand
	return r
}

// Include only the specified fields in the response
func (r ApiInventoryNodesListRequest) Fields(fields string) ApiInventoryNodesListRequest {
	r.fields = &fields
	return r
}

func (r ApiInventoryNodesListRequest) GarageId(garageId string) ApiInventoryNodesListRequest {
	r.garageId = &garageId
	return r
}

// Multiple values may be separated by commas.
func (r ApiInventoryNodesListRequest) Gpu(gpu []string) ApiInventoryNodesListRequest {
	r.gpu = &gpu
	return r
}

// Alias for GPU plan (i.e. installed GPU type and count)
func (r ApiInventoryNodesListRequest) GpuAlias(gpuAlias string) ApiInventoryNodesListRequest {
	r.gpuAlias = &gpuAlias
	return r
}

func (r ApiInventoryNodesListRequest) GpuCount(gpuCount int32) ApiInventoryNodesListRequest {
	r.gpuCount = &gpuCount
	return r
}

// Model of GPU(s) installed
func (r ApiInventoryNodesListRequest) GpuModel(gpuModel string) ApiInventoryNodesListRequest {
	r.gpuModel = &gpuModel
	return r
}

func (r ApiInventoryNodesListRequest) GpuVbios(gpuVbios string) ApiInventoryNodesListRequest {
	r.gpuVbios = &gpuVbios
	return r
}

func (r ApiInventoryNodesListRequest) Id(id string) ApiInventoryNodesListRequest {
	r.id = &id
	return r
}

func (r ApiInventoryNodesListRequest) Location(location string) ApiInventoryNodesListRequest {
	r.location = &location
	return r
}

func (r ApiInventoryNodesListRequest) Memory(memory int32) ApiInventoryNodesListRequest {
	r.memory = &memory
	return r
}

func (r ApiInventoryNodesListRequest) MgmtIp(mgmtIp string) ApiInventoryNodesListRequest {
	r.mgmtIp = &mgmtIp
	return r
}

func (r ApiInventoryNodesListRequest) MgmtMac(mgmtMac string) ApiInventoryNodesListRequest {
	r.mgmtMac = &mgmtMac
	return r
}

// Only include nodes that have a gpu_count greater than or equal to this value
func (r ApiInventoryNodesListRequest) MinGpuCount(minGpuCount int32) ApiInventoryNodesListRequest {
	r.minGpuCount = &minGpuCount
	return r
}

func (r ApiInventoryNodesListRequest) Model(model string) ApiInventoryNodesListRequest {
	r.model = &model
	return r
}

// Type of networking technology used  * &#x60;ethernet&#x60; - Ethernet * &#x60;infiniband&#x60; - InfiniBand
func (r ApiInventoryNodesListRequest) NetworkType(networkType string) ApiInventoryNodesListRequest {
	r.networkType = &networkType
	return r
}

func (r ApiInventoryNodesListRequest) Oem(oem string) ApiInventoryNodesListRequest {
	r.oem = &oem
	return r
}

// Exclude the specified fields in the response
func (r ApiInventoryNodesListRequest) Omit(omit string) ApiInventoryNodesListRequest {
	r.omit = &omit
	return r
}

// Which field to use when ordering the results.
func (r ApiInventoryNodesListRequest) Ordering(ordering string) ApiInventoryNodesListRequest {
	r.ordering = &ordering
	return r
}

// A page number within the paginated result set.
func (r ApiInventoryNodesListRequest) Page(page int32) ApiInventoryNodesListRequest {
	r.page = &page
	return r
}

// Number of results to return per page.
func (r ApiInventoryNodesListRequest) PageSize(pageSize int32) ApiInventoryNodesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiInventoryNodesListRequest) Provider(provider string) ApiInventoryNodesListRequest {
	r.provider = &provider
	return r
}

func (r ApiInventoryNodesListRequest) ProviderNodeId(providerNodeId string) ApiInventoryNodesListRequest {
	r.providerNodeId = &providerNodeId
	return r
}

func (r ApiInventoryNodesListRequest) Rack(rack string) ApiInventoryNodesListRequest {
	r.rack = &rack
	return r
}

func (r ApiInventoryNodesListRequest) RackUnit(rackUnit int32) ApiInventoryNodesListRequest {
	r.rackUnit = &rackUnit
	return r
}

// Search for nodes by bmc_ip, bmc_mac, bmc_password, bmc_user, cpu_manufacturer, cpu_model, garage_id, gpu_alias, gpu model, gpu_vbios, id, location name, location provider name, memory, mgmt_ip, mgmt_mac, model, network_type, nic_prefixes, notes, oem name, provider_node_id, rack, rack_unit, serial_number, storage, system_arch
func (r ApiInventoryNodesListRequest) Search(search string) ApiInventoryNodesListRequest {
	r.search = &search
	return r
}

func (r ApiInventoryNodesListRequest) SerialNumber(serialNumber string) ApiInventoryNodesListRequest {
	r.serialNumber = &serialNumber
	return r
}

// CPU architecture  * &#x60;amd64&#x60; - amd64 * &#x60;arm64&#x60; - arm64
func (r ApiInventoryNodesListRequest) SystemArch(systemArch string) ApiInventoryNodesListRequest {
	r.systemArch = &systemArch
	return r
}

func (r ApiInventoryNodesListRequest) Tee(tee bool) ApiInventoryNodesListRequest {
	r.tee = &tee
	return r
}

func (r ApiInventoryNodesListRequest) Execute() (*PaginatedNodeList, *http.Response, error) {
	return r.ApiService.InventoryNodesListExecute(r)
}

/*
InventoryNodesList Method for InventoryNodesList

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInventoryNodesListRequest
*/
func (a *InventoryNodesAPIService) InventoryNodesList(ctx context.Context) ApiInventoryNodesListRequest {
	return ApiInventoryNodesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedNodeList
func (a *InventoryNodesAPIService) InventoryNodesListExecute(r ApiInventoryNodesListRequest) (*PaginatedNodeList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedNodeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryNodesAPIService.InventoryNodesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/nodes/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.bmcIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bmc_ip", r.bmcIp, "form", "")
	}
	if r.bmcMac != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bmc_mac", r.bmcMac, "form", "")
	}
	if r.bmcPassword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bmc_password", r.bmcPassword, "form", "")
	}
	if r.bmcUser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bmc_user", r.bmcUser, "form", "")
	}
	if r.cluster != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster", r.cluster, "form", "")
	}
	if r.cpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpu", r.cpu, "form", "")
	}
	if r.cpuManufacturer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpu_manufacturer", r.cpuManufacturer, "form", "")
	}
	if r.cpuModel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpu_model", r.cpuModel, "form", "")
	}
	if r.expand != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.garageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "garage_id", r.garageId, "form", "")
	}
	if r.gpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gpu", r.gpu, "form", "csv")
	}
	if r.gpuAlias != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gpu_alias", r.gpuAlias, "form", "")
	}
	if r.gpuCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gpu_count", r.gpuCount, "form", "")
	}
	if r.gpuModel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gpu_model", r.gpuModel, "form", "")
	}
	if r.gpuVbios != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gpu_vbios", r.gpuVbios, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.location != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "location", r.location, "form", "")
	}
	if r.memory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "memory", r.memory, "form", "")
	}
	if r.mgmtIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mgmt_ip", r.mgmtIp, "form", "")
	}
	if r.mgmtMac != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mgmt_mac", r.mgmtMac, "form", "")
	}
	if r.minGpuCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "min_gpu_count", r.minGpuCount, "form", "")
	}
	if r.model != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "model", r.model, "form", "")
	}
	if r.networkType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "network_type", r.networkType, "form", "")
	}
	if r.oem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "oem", r.oem, "form", "")
	}
	if r.omit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "omit", r.omit, "form", "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}
	if r.provider != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "provider", r.provider, "form", "")
	}
	if r.providerNodeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "provider_node_id", r.providerNodeId, "form", "")
	}
	if r.rack != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rack", r.rack, "form", "")
	}
	if r.rackUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rack_unit", r.rackUnit, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.serialNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serial_number", r.serialNumber, "form", "")
	}
	if r.systemArch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "system_arch", r.systemArch, "form", "")
	}
	if r.tee != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tee", r.tee, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInventoryNodesPartialUpdateRequest struct {
	ctx        context.Context
	ApiService *InventoryNodesAPIService
	id         string
	node       *Node
}

func (r ApiInventoryNodesPartialUpdateRequest) Node(node Node) ApiInventoryNodesPartialUpdateRequest {
	r.node = &node
	return r
}

func (r ApiInventoryNodesPartialUpdateRequest) Execute() (*Node, *http.Response, error) {
	return r.ApiService.InventoryNodesPartialUpdateExecute(r)
}

/*
InventoryNodesPartialUpdate Method for InventoryNodesPartialUpdate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A UUID string identifying this node.
	@return ApiInventoryNodesPartialUpdateRequest
*/
func (a *InventoryNodesAPIService) InventoryNodesPartialUpdate(ctx context.Context, id string) ApiInventoryNodesPartialUpdateRequest {
	return ApiInventoryNodesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Node
func (a *InventoryNodesAPIService) InventoryNodesPartialUpdateExecute(r ApiInventoryNodesPartialUpdateRequest) (*Node, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Node
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryNodesAPIService.InventoryNodesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/nodes/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.node == nil {
		return localVarReturnValue, nil, reportError("node is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.node
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInventoryNodesRetrieveRequest struct {
	ctx        context.Context
	ApiService *InventoryNodesAPIService
	id         string
	expand     *string
	fields     *string
	omit       *string
}

// Expand related field(s) instead of only showing a UUID. Separate nested relationships with a period (ex: \&quot;location.provider\&quot;). Separate multiple fields with a comma (ex: \&quot;location,oem\&quot;)
func (r ApiInventoryNodesRetrieveRequest) Expand(expand string) ApiInventoryNodesRetrieveRequest {
	r.expand = &expand
	return r
}

// Include only the specified fields in the response
func (r ApiInventoryNodesRetrieveRequest) Fields(fields string) ApiInventoryNodesRetrieveRequest {
	r.fields = &fields
	return r
}

// Exclude the specified fields in the response
func (r ApiInventoryNodesRetrieveRequest) Omit(omit string) ApiInventoryNodesRetrieveRequest {
	r.omit = &omit
	return r
}

func (r ApiInventoryNodesRetrieveRequest) Execute() (*Node, *http.Response, error) {
	return r.ApiService.InventoryNodesRetrieveExecute(r)
}

/*
InventoryNodesRetrieve Method for InventoryNodesRetrieve

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A UUID string identifying this node.
	@return ApiInventoryNodesRetrieveRequest
*/
func (a *InventoryNodesAPIService) InventoryNodesRetrieve(ctx context.Context, id string) ApiInventoryNodesRetrieveRequest {
	return ApiInventoryNodesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Node
func (a *InventoryNodesAPIService) InventoryNodesRetrieveExecute(r ApiInventoryNodesRetrieveRequest) (*Node, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Node
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryNodesAPIService.InventoryNodesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/nodes/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.expand != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.omit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "omit", r.omit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInventoryNodesUpdateRequest struct {
	ctx        context.Context
	ApiService *InventoryNodesAPIService
	id         string
	node       *Node
}

func (r ApiInventoryNodesUpdateRequest) Node(node Node) ApiInventoryNodesUpdateRequest {
	r.node = &node
	return r
}

func (r ApiInventoryNodesUpdateRequest) Execute() (*Node, *http.Response, error) {
	return r.ApiService.InventoryNodesUpdateExecute(r)
}

/*
InventoryNodesUpdate Method for InventoryNodesUpdate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A UUID string identifying this node.
	@return ApiInventoryNodesUpdateRequest
*/
func (a *InventoryNodesAPIService) InventoryNodesUpdate(ctx context.Context, id string) ApiInventoryNodesUpdateRequest {
	return ApiInventoryNodesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Node
func (a *InventoryNodesAPIService) InventoryNodesUpdateExecute(r ApiInventoryNodesUpdateRequest) (*Node, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Node
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryNodesAPIService.InventoryNodesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inventory/nodes/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.node == nil {
		return localVarReturnValue, nil, reportError("node is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.node
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
