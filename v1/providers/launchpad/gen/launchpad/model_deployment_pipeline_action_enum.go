/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DeploymentPipelineActionEnum * `apply` - apply * `destroy` - destroy
type DeploymentPipelineActionEnum string

// List of DeploymentPipelineActionEnum
const (
	DeploymentPipelineActionApply   DeploymentPipelineActionEnum = "apply"
	DeploymentPipelineActionDestroy DeploymentPipelineActionEnum = "destroy"
)

// All allowed values of DeploymentPipelineActionEnum enum
var AllowedDeploymentPipelineActionEnumEnumValues = []DeploymentPipelineActionEnum{
	"apply",
	"destroy",
}

func (v *DeploymentPipelineActionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeploymentPipelineActionEnum(value)
	for _, existing := range AllowedDeploymentPipelineActionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeploymentPipelineActionEnum", value)
}

// NewDeploymentPipelineActionEnumFromValue returns a pointer to a valid DeploymentPipelineActionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeploymentPipelineActionEnumFromValue(v string) (*DeploymentPipelineActionEnum, error) {
	ev := DeploymentPipelineActionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeploymentPipelineActionEnum: valid values are %v", v, AllowedDeploymentPipelineActionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeploymentPipelineActionEnum) IsValid() bool {
	for _, existing := range AllowedDeploymentPipelineActionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeploymentPipelineActionEnum value
func (v DeploymentPipelineActionEnum) Ptr() *DeploymentPipelineActionEnum {
	return &v
}

type NullableDeploymentPipelineActionEnum struct {
	value *DeploymentPipelineActionEnum
	isSet bool
}

func (v NullableDeploymentPipelineActionEnum) Get() *DeploymentPipelineActionEnum {
	return v.value
}

func (v *NullableDeploymentPipelineActionEnum) Set(val *DeploymentPipelineActionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentPipelineActionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentPipelineActionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentPipelineActionEnum(val *DeploymentPipelineActionEnum) *NullableDeploymentPipelineActionEnum {
	return &NullableDeploymentPipelineActionEnum{value: val, isSet: true}
}

func (v NullableDeploymentPipelineActionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentPipelineActionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
