/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Gpu type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Gpu{}

// Gpu struct for Gpu
type Gpu struct {
	// Timestamp of when the object was created
	Created time.Time `json:"created"`
	// GPU form factor  * `pcie` - PCIe * `sxm` - SXM
	FormFactor *InterconnectionTypeEnum `json:"form_factor,omitempty"`
	Id         string                   `json:"id"`
	// Total GPU memory (in GB)
	Memory *int32 `json:"memory,omitempty"`
	// GPU model name
	Model string `json:"model"`
	// Timestamp of when the object was last modified
	Modified  time.Time `json:"modified"`
	NodeCount *int32    `json:"node_count,omitempty"`
	// Weighted preference to use in selecting a GPU for a deployment. A higher priority means the GPU is in higher demand. Lower priority values will be preferred over higher ones during cluster selection.
	Priority             *int32 `json:"priority,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Gpu Gpu

// NewGpu instantiates a new Gpu object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGpu(created time.Time, id string, model string, modified time.Time) *Gpu {
	this := Gpu{}
	this.Created = created
	var formFactor InterconnectionTypeEnum = InterconnectionTypePCIe
	this.FormFactor = &formFactor
	this.Id = id
	var memory int32 = 0
	this.Memory = &memory
	this.Model = model
	this.Modified = modified
	return &this
}

// NewGpuWithDefaults instantiates a new Gpu object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGpuWithDefaults() *Gpu {
	this := Gpu{}
	var formFactor InterconnectionTypeEnum = InterconnectionTypePCIe
	this.FormFactor = &formFactor
	var memory int32 = 0
	this.Memory = &memory
	return &this
}

// GetCreated returns the Created field value
func (o *Gpu) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Gpu) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Gpu) SetCreated(v time.Time) {
	o.Created = v
}

// GetFormFactor returns the FormFactor field value if set, zero value otherwise.
func (o *Gpu) GetFormFactor() InterconnectionTypeEnum {
	if o == nil || IsNil(o.FormFactor) {
		var ret InterconnectionTypeEnum
		return ret
	}
	return *o.FormFactor
}

// GetFormFactorOk returns a tuple with the FormFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gpu) GetFormFactorOk() (*InterconnectionTypeEnum, bool) {
	if o == nil || IsNil(o.FormFactor) {
		return nil, false
	}
	return o.FormFactor, true
}

// HasFormFactor returns a boolean if a field has been set.
func (o *Gpu) HasFormFactor() bool {
	if o != nil && !IsNil(o.FormFactor) {
		return true
	}

	return false
}

// SetFormFactor gets a reference to the given InterconnectionTypeEnum and assigns it to the FormFactor field.
func (o *Gpu) SetFormFactor(v InterconnectionTypeEnum) {
	o.FormFactor = &v
}

// GetId returns the Id field value
func (o *Gpu) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Gpu) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Gpu) SetId(v string) {
	o.Id = v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *Gpu) GetMemory() int32 {
	if o == nil || IsNil(o.Memory) {
		var ret int32
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gpu) GetMemoryOk() (*int32, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *Gpu) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int32 and assigns it to the Memory field.
func (o *Gpu) SetMemory(v int32) {
	o.Memory = &v
}

// GetModel returns the Model field value
func (o *Gpu) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *Gpu) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *Gpu) SetModel(v string) {
	o.Model = v
}

// GetModified returns the Modified field value
func (o *Gpu) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *Gpu) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *Gpu) SetModified(v time.Time) {
	o.Modified = v
}

// GetNodeCount returns the NodeCount field value if set, zero value otherwise.
func (o *Gpu) GetNodeCount() int32 {
	if o == nil || IsNil(o.NodeCount) {
		var ret int32
		return ret
	}
	return *o.NodeCount
}

// GetNodeCountOk returns a tuple with the NodeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gpu) GetNodeCountOk() (*int32, bool) {
	if o == nil || IsNil(o.NodeCount) {
		return nil, false
	}
	return o.NodeCount, true
}

// HasNodeCount returns a boolean if a field has been set.
func (o *Gpu) HasNodeCount() bool {
	if o != nil && !IsNil(o.NodeCount) {
		return true
	}

	return false
}

// SetNodeCount gets a reference to the given int32 and assigns it to the NodeCount field.
func (o *Gpu) SetNodeCount(v int32) {
	o.NodeCount = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *Gpu) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gpu) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Gpu) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *Gpu) SetPriority(v int32) {
	o.Priority = &v
}

func (o Gpu) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Gpu) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created"] = o.Created
	if !IsNil(o.FormFactor) {
		toSerialize["form_factor"] = o.FormFactor
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	toSerialize["model"] = o.Model
	toSerialize["modified"] = o.Modified
	if !IsNil(o.NodeCount) {
		toSerialize["node_count"] = o.NodeCount
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Gpu) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created",
		"id",
		"model",
		"modified",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGpu := _Gpu{}

	err = json.Unmarshal(data, &varGpu)

	if err != nil {
		return err
	}

	*o = Gpu(varGpu)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created")
		delete(additionalProperties, "form_factor")
		delete(additionalProperties, "id")
		delete(additionalProperties, "memory")
		delete(additionalProperties, "model")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "node_count")
		delete(additionalProperties, "priority")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGpu struct {
	value *Gpu
	isSet bool
}

func (v NullableGpu) Get() *Gpu {
	return v.value
}

func (v *NullableGpu) Set(val *Gpu) {
	v.value = val
	v.isSet = true
}

func (v NullableGpu) IsSet() bool {
	return v.isSet
}

func (v *NullableGpu) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGpu(val *Gpu) *NullableGpu {
	return &NullableGpu{value: val, isSet: true}
}

func (v NullableGpu) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGpu) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
