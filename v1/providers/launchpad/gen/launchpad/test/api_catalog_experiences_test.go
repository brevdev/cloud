/*
NVIDIA LaunchPad API

Testing CatalogExperiencesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/brevdev/cloud/v1/providers/launchpad/gen/launchpad"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_CatalogExperiencesAPIService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CatalogExperiencesAPIService CatalogExperiencesBulkCreate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CatalogExperiencesAPI.CatalogExperiencesBulkCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogExperiencesAPIService CatalogExperiencesBulkPartialUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CatalogExperiencesAPI.CatalogExperiencesBulkPartialUpdate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogExperiencesAPIService CatalogExperiencesCreate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CatalogExperiencesAPI.CatalogExperiencesCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogExperiencesAPIService CatalogExperiencesDestroy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		httpRes, err := apiClient.CatalogExperiencesAPI.CatalogExperiencesDestroy(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogExperiencesAPIService CatalogExperiencesHistoryList", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.CatalogExperiencesAPI.CatalogExperiencesHistoryList(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogExperiencesAPIService CatalogExperiencesList", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CatalogExperiencesAPI.CatalogExperiencesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogExperiencesAPIService CatalogExperiencesPartialUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.CatalogExperiencesAPI.CatalogExperiencesPartialUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogExperiencesAPIService CatalogExperiencesRetrieve", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.CatalogExperiencesAPI.CatalogExperiencesRetrieve(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogExperiencesAPIService CatalogExperiencesStatsRetrieve", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CatalogExperiencesAPI.CatalogExperiencesStatsRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogExperiencesAPIService CatalogExperiencesUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.CatalogExperiencesAPI.CatalogExperiencesUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
