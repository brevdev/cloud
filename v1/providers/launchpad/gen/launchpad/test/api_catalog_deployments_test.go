/*
NVIDIA LaunchPad API

Testing CatalogDeploymentsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/brevdev/cloud/v1/providers/launchpad/gen/launchpad"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_CatalogDeploymentsAPIService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsBulkPartialUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsBulkPartialUpdate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsCreate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsDestroy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsDestroy(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsHistoryList", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsHistoryList(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsInstancesList", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var deploymentId string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsInstancesList(context.Background(), deploymentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsList", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsNotesCreate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var deploymentId string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsNotesCreate(context.Background(), deploymentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsNotesDestroy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var deploymentId string
		var id string

		httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsNotesDestroy(context.Background(), deploymentId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsNotesList", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var deploymentId string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsNotesList(context.Background(), deploymentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsNotesPartialUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var deploymentId string
		var id string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsNotesPartialUpdate(context.Background(), deploymentId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsNotesRetrieve", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var deploymentId string
		var id string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsNotesRetrieve(context.Background(), deploymentId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsNotesUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var deploymentId string
		var id string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsNotesUpdate(context.Background(), deploymentId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsPartialUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsPartialUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsPipelinesCreate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var deploymentId string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsPipelinesCreate(context.Background(), deploymentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsPipelinesList", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var deploymentId string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsPipelinesList(context.Background(), deploymentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsRetrieve", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsRetrieve(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsServicesCreate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var deploymentId string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsServicesCreate(context.Background(), deploymentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsServicesList", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var deploymentId string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsServicesList(context.Background(), deploymentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsSshKeysCreate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var deploymentId string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsSshKeysCreate(context.Background(), deploymentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsSshKeysDestroy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var deploymentId string
		var id string

		httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsSshKeysDestroy(context.Background(), deploymentId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsSshKeysList", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var deploymentId string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsSshKeysList(context.Background(), deploymentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsStatsRetrieve", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsStatsRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsTasksCreate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var deploymentId string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsTasksCreate(context.Background(), deploymentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsTasksList", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var deploymentId string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsTasksList(context.Background(), deploymentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsTasksRetrieve", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var deploymentId string
		var id string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsTasksRetrieve(context.Background(), deploymentId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogDeploymentsUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogDeploymentsUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogExperiencesNotesCreate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var experienceId string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogExperiencesNotesCreate(context.Background(), experienceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogExperiencesNotesDestroy", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var experienceId string
		var id string

		httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogExperiencesNotesDestroy(context.Background(), experienceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogExperiencesNotesList", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var experienceId string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogExperiencesNotesList(context.Background(), experienceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogExperiencesNotesPartialUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var experienceId string
		var id string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogExperiencesNotesPartialUpdate(context.Background(), experienceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogExperiencesNotesRetrieve", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var experienceId string
		var id string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogExperiencesNotesRetrieve(context.Background(), experienceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CatalogDeploymentsAPIService CatalogExperiencesNotesUpdate", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var experienceId string
		var id string

		resp, httpRes, err := apiClient.CatalogDeploymentsAPI.CatalogExperiencesNotesUpdate(context.Background(), experienceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
