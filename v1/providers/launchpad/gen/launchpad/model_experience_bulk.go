/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ExperienceBulk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExperienceBulk{}

// ExperienceBulk struct for ExperienceBulk
type ExperienceBulk struct {
	CsvFile              string       `json:"csv_file"`
	Experiences          []Experience `json:"experiences"`
	AdditionalProperties map[string]interface{}
}

type _ExperienceBulk ExperienceBulk

// NewExperienceBulk instantiates a new ExperienceBulk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExperienceBulk(csvFile string, experiences []Experience) *ExperienceBulk {
	this := ExperienceBulk{}
	this.CsvFile = csvFile
	this.Experiences = experiences
	return &this
}

// NewExperienceBulkWithDefaults instantiates a new ExperienceBulk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExperienceBulkWithDefaults() *ExperienceBulk {
	this := ExperienceBulk{}
	return &this
}

// GetCsvFile returns the CsvFile field value
func (o *ExperienceBulk) GetCsvFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CsvFile
}

// GetCsvFileOk returns a tuple with the CsvFile field value
// and a boolean to check if the value has been set.
func (o *ExperienceBulk) GetCsvFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CsvFile, true
}

// SetCsvFile sets field value
func (o *ExperienceBulk) SetCsvFile(v string) {
	o.CsvFile = v
}

// GetExperiences returns the Experiences field value
func (o *ExperienceBulk) GetExperiences() []Experience {
	if o == nil {
		var ret []Experience
		return ret
	}

	return o.Experiences
}

// GetExperiencesOk returns a tuple with the Experiences field value
// and a boolean to check if the value has been set.
func (o *ExperienceBulk) GetExperiencesOk() ([]Experience, bool) {
	if o == nil {
		return nil, false
	}
	return o.Experiences, true
}

// SetExperiences sets field value
func (o *ExperienceBulk) SetExperiences(v []Experience) {
	o.Experiences = v
}

func (o ExperienceBulk) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExperienceBulk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["csv_file"] = o.CsvFile
	toSerialize["experiences"] = o.Experiences

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExperienceBulk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"csv_file",
		"experiences",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExperienceBulk := _ExperienceBulk{}

	err = json.Unmarshal(data, &varExperienceBulk)

	if err != nil {
		return err
	}

	*o = ExperienceBulk(varExperienceBulk)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "csv_file")
		delete(additionalProperties, "experiences")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExperienceBulk struct {
	value *ExperienceBulk
	isSet bool
}

func (v NullableExperienceBulk) Get() *ExperienceBulk {
	return v.value
}

func (v *NullableExperienceBulk) Set(val *ExperienceBulk) {
	v.value = val
	v.isSet = true
}

func (v NullableExperienceBulk) IsSet() bool {
	return v.isSet
}

func (v *NullableExperienceBulk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperienceBulk(val *ExperienceBulk) *NullableExperienceBulk {
	return &NullableExperienceBulk{value: val, isSet: true}
}

func (v NullableExperienceBulk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperienceBulk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
