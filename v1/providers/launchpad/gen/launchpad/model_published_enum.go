/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PublishedEnum * `draft` - draft * `no` - no * `yes` - yes
type PublishedEnum string

// List of PublishedEnum
const (
	PublishedDraft PublishedEnum = "draft"
	PublishedNo    PublishedEnum = "no"
	PublishedYes   PublishedEnum = "yes"
)

// All allowed values of PublishedEnum enum
var AllowedPublishedEnumEnumValues = []PublishedEnum{
	"draft",
	"no",
	"yes",
}

func (v *PublishedEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PublishedEnum(value)
	for _, existing := range AllowedPublishedEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PublishedEnum", value)
}

// NewPublishedEnumFromValue returns a pointer to a valid PublishedEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPublishedEnumFromValue(v string) (*PublishedEnum, error) {
	ev := PublishedEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PublishedEnum: valid values are %v", v, AllowedPublishedEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PublishedEnum) IsValid() bool {
	for _, existing := range AllowedPublishedEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PublishedEnum value
func (v PublishedEnum) Ptr() *PublishedEnum {
	return &v
}

type NullablePublishedEnum struct {
	value *PublishedEnum
	isSet bool
}

func (v NullablePublishedEnum) Get() *PublishedEnum {
	return v.value
}

func (v *NullablePublishedEnum) Set(val *PublishedEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePublishedEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePublishedEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublishedEnum(val *PublishedEnum) *NullablePublishedEnum {
	return &NullablePublishedEnum{value: val, isSet: true}
}

func (v NullablePublishedEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublishedEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
