/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Profile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Profile{}

// Profile struct for Profile
type Profile struct {
	// Timestamp of when the object was created
	Created time.Time `json:"created"`
	Groups  []string  `json:"groups"`
	Id      string    `json:"id"`
	// Timestamp of when the object was last modified
	Modified              time.Time                  `json:"modified"`
	PreferredTheme        NullablePreferredThemeEnum `json:"preferred_theme,omitempty"`
	PreferredViewSettings interface{}                `json:"preferred_view_settings,omitempty"`
	Username              string                     `json:"username"`
	AdditionalProperties  map[string]interface{}
}

type _Profile Profile

// NewProfile instantiates a new Profile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfile(created time.Time, groups []string, id string, modified time.Time, username string) *Profile {
	this := Profile{}
	this.Created = created
	this.Groups = groups
	this.Id = id
	this.Modified = modified
	this.Username = username
	return &this
}

// NewProfileWithDefaults instantiates a new Profile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileWithDefaults() *Profile {
	this := Profile{}
	return &this
}

// GetCreated returns the Created field value
func (o *Profile) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Profile) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Profile) SetCreated(v time.Time) {
	o.Created = v
}

// GetGroups returns the Groups field value
func (o *Profile) GetGroups() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value
// and a boolean to check if the value has been set.
func (o *Profile) GetGroupsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Groups, true
}

// SetGroups sets field value
func (o *Profile) SetGroups(v []string) {
	o.Groups = v
}

// GetId returns the Id field value
func (o *Profile) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Profile) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Profile) SetId(v string) {
	o.Id = v
}

// GetModified returns the Modified field value
func (o *Profile) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *Profile) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *Profile) SetModified(v time.Time) {
	o.Modified = v
}

// GetPreferredTheme returns the PreferredTheme field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Profile) GetPreferredTheme() PreferredThemeEnum {
	if o == nil || IsNil(o.PreferredTheme.Get()) {
		var ret PreferredThemeEnum
		return ret
	}
	return *o.PreferredTheme.Get()
}

// GetPreferredThemeOk returns a tuple with the PreferredTheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Profile) GetPreferredThemeOk() (*PreferredThemeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreferredTheme.Get(), o.PreferredTheme.IsSet()
}

// HasPreferredTheme returns a boolean if a field has been set.
func (o *Profile) HasPreferredTheme() bool {
	if o != nil && o.PreferredTheme.IsSet() {
		return true
	}

	return false
}

// SetPreferredTheme gets a reference to the given NullablePreferredThemeEnum and assigns it to the PreferredTheme field.
func (o *Profile) SetPreferredTheme(v PreferredThemeEnum) {
	o.PreferredTheme.Set(&v)
}

// SetPreferredThemeNil sets the value for PreferredTheme to be an explicit nil
func (o *Profile) SetPreferredThemeNil() {
	o.PreferredTheme.Set(nil)
}

// UnsetPreferredTheme ensures that no value is present for PreferredTheme, not even an explicit nil
func (o *Profile) UnsetPreferredTheme() {
	o.PreferredTheme.Unset()
}

// GetPreferredViewSettings returns the PreferredViewSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Profile) GetPreferredViewSettings() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.PreferredViewSettings
}

// GetPreferredViewSettingsOk returns a tuple with the PreferredViewSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Profile) GetPreferredViewSettingsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.PreferredViewSettings) {
		return nil, false
	}
	return &o.PreferredViewSettings, true
}

// HasPreferredViewSettings returns a boolean if a field has been set.
func (o *Profile) HasPreferredViewSettings() bool {
	if o != nil && !IsNil(o.PreferredViewSettings) {
		return true
	}

	return false
}

// SetPreferredViewSettings gets a reference to the given interface{} and assigns it to the PreferredViewSettings field.
func (o *Profile) SetPreferredViewSettings(v interface{}) {
	o.PreferredViewSettings = v
}

// GetUsername returns the Username field value
func (o *Profile) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *Profile) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *Profile) SetUsername(v string) {
	o.Username = v
}

func (o Profile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Profile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created"] = o.Created
	toSerialize["groups"] = o.Groups
	toSerialize["id"] = o.Id
	toSerialize["modified"] = o.Modified
	if o.PreferredTheme.IsSet() {
		toSerialize["preferred_theme"] = o.PreferredTheme.Get()
	}
	if o.PreferredViewSettings != nil {
		toSerialize["preferred_view_settings"] = o.PreferredViewSettings
	}
	toSerialize["username"] = o.Username

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Profile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created",
		"groups",
		"id",
		"modified",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProfile := _Profile{}

	err = json.Unmarshal(data, &varProfile)

	if err != nil {
		return err
	}

	*o = Profile(varProfile)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created")
		delete(additionalProperties, "groups")
		delete(additionalProperties, "id")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "preferred_theme")
		delete(additionalProperties, "preferred_view_settings")
		delete(additionalProperties, "username")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProfile struct {
	value *Profile
	isSet bool
}

func (v NullableProfile) Get() *Profile {
	return v.value
}

func (v *NullableProfile) Set(val *Profile) {
	v.value = val
	v.isSet = true
}

func (v NullableProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfile(val *Profile) *NullableProfile {
	return &NullableProfile{value: val, isSet: true}
}

func (v NullableProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
