/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the InstanceBulkUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceBulkUpdate{}

// InstanceBulkUpdate struct for InstanceBulkUpdate
type InstanceBulkUpdate struct {
	Cluster DeploymentCluster `json:"cluster"`
	// Timestamp of when the object was created
	Created time.Time `json:"created"`
	Id      string    `json:"id"`
	// Unique ID for this instance assigned by its provider
	InstanceId string `json:"instance_id"`
	// User-friendly name of this instance
	Name NullableString `json:"name,omitempty"`
	// Timestamp of when the object was last modified
	Modified time.Time `json:"modified"`
	// Current lifecycle state of this instance  * `running` - Instance is running * `starting` - Instance is starting * `stopped` - Instance is stopped * `stopping` - Instance is stopping * `unknown` - Instance state is currently unknown
	State         *InstanceState `json:"state,omitempty"`
	StateModified time.Time      `json:"state_modified"`
	// Tags associated with this instance
	Tags                 []string `json:"tags,omitempty"`
	Count                int32    `json:"count"`
	Ids                  []string `json:"ids"`
	Result               string   `json:"result"`
	AdditionalProperties map[string]interface{}
}

type _InstanceBulkUpdate InstanceBulkUpdate

// NewInstanceBulkUpdate instantiates a new InstanceBulkUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceBulkUpdate(cluster DeploymentCluster, created time.Time, id string, instanceId string, modified time.Time, stateModified time.Time, count int32, ids []string, result string) *InstanceBulkUpdate {
	this := InstanceBulkUpdate{}
	this.Cluster = cluster
	this.Created = created
	this.Id = id
	this.InstanceId = instanceId
	this.Modified = modified
	this.StateModified = stateModified
	this.Count = count
	this.Ids = ids
	this.Result = result
	return &this
}

// NewInstanceBulkUpdateWithDefaults instantiates a new InstanceBulkUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceBulkUpdateWithDefaults() *InstanceBulkUpdate {
	this := InstanceBulkUpdate{}
	return &this
}

// GetCluster returns the Cluster field value
func (o *InstanceBulkUpdate) GetCluster() DeploymentCluster {
	if o == nil {
		var ret DeploymentCluster
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *InstanceBulkUpdate) GetClusterOk() (*DeploymentCluster, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *InstanceBulkUpdate) SetCluster(v DeploymentCluster) {
	o.Cluster = v
}

// GetCreated returns the Created field value
func (o *InstanceBulkUpdate) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *InstanceBulkUpdate) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *InstanceBulkUpdate) SetCreated(v time.Time) {
	o.Created = v
}

// GetId returns the Id field value
func (o *InstanceBulkUpdate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InstanceBulkUpdate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InstanceBulkUpdate) SetId(v string) {
	o.Id = v
}

// GetInstanceId returns the InstanceId field value
func (o *InstanceBulkUpdate) GetInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value
// and a boolean to check if the value has been set.
func (o *InstanceBulkUpdate) GetInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceId, true
}

// SetInstanceId sets field value
func (o *InstanceBulkUpdate) SetInstanceId(v string) {
	o.InstanceId = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceBulkUpdate) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceBulkUpdate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *InstanceBulkUpdate) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *InstanceBulkUpdate) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *InstanceBulkUpdate) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *InstanceBulkUpdate) UnsetName() {
	o.Name.Unset()
}

// GetModified returns the Modified field value
func (o *InstanceBulkUpdate) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *InstanceBulkUpdate) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *InstanceBulkUpdate) SetModified(v time.Time) {
	o.Modified = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *InstanceBulkUpdate) GetState() InstanceState {
	if o == nil || IsNil(o.State) {
		var ret InstanceState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceBulkUpdate) GetStateOk() (*InstanceState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *InstanceBulkUpdate) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given InstanceState and assigns it to the State field.
func (o *InstanceBulkUpdate) SetState(v InstanceState) {
	o.State = &v
}

// GetStateModified returns the StateModified field value
func (o *InstanceBulkUpdate) GetStateModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StateModified
}

// GetStateModifiedOk returns a tuple with the StateModified field value
// and a boolean to check if the value has been set.
func (o *InstanceBulkUpdate) GetStateModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateModified, true
}

// SetStateModified sets field value
func (o *InstanceBulkUpdate) SetStateModified(v time.Time) {
	o.StateModified = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *InstanceBulkUpdate) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceBulkUpdate) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *InstanceBulkUpdate) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *InstanceBulkUpdate) SetTags(v []string) {
	o.Tags = v
}

// GetCount returns the Count field value
func (o *InstanceBulkUpdate) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *InstanceBulkUpdate) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *InstanceBulkUpdate) SetCount(v int32) {
	o.Count = v
}

// GetIds returns the Ids field value
func (o *InstanceBulkUpdate) GetIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value
// and a boolean to check if the value has been set.
func (o *InstanceBulkUpdate) GetIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ids, true
}

// SetIds sets field value
func (o *InstanceBulkUpdate) SetIds(v []string) {
	o.Ids = v
}

// GetResult returns the Result field value
func (o *InstanceBulkUpdate) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *InstanceBulkUpdate) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *InstanceBulkUpdate) SetResult(v string) {
	o.Result = v
}

func (o InstanceBulkUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceBulkUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cluster"] = o.Cluster
	toSerialize["created"] = o.Created
	toSerialize["id"] = o.Id
	toSerialize["instance_id"] = o.InstanceId
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	toSerialize["modified"] = o.Modified
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	toSerialize["state_modified"] = o.StateModified
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["count"] = o.Count
	toSerialize["ids"] = o.Ids
	toSerialize["result"] = o.Result

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceBulkUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cluster",
		"created",
		"id",
		"instance_id",
		"modified",
		"state_modified",
		"count",
		"ids",
		"result",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceBulkUpdate := _InstanceBulkUpdate{}

	err = json.Unmarshal(data, &varInstanceBulkUpdate)

	if err != nil {
		return err
	}

	*o = InstanceBulkUpdate(varInstanceBulkUpdate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cluster")
		delete(additionalProperties, "created")
		delete(additionalProperties, "id")
		delete(additionalProperties, "instance_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "state")
		delete(additionalProperties, "state_modified")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "count")
		delete(additionalProperties, "ids")
		delete(additionalProperties, "result")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceBulkUpdate struct {
	value *InstanceBulkUpdate
	isSet bool
}

func (v NullableInstanceBulkUpdate) Get() *InstanceBulkUpdate {
	return v.value
}

func (v *NullableInstanceBulkUpdate) Set(val *InstanceBulkUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceBulkUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceBulkUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceBulkUpdate(val *InstanceBulkUpdate) *NullableInstanceBulkUpdate {
	return &NullableInstanceBulkUpdate{value: val, isSet: true}
}

func (v NullableInstanceBulkUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceBulkUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
