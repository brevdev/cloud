/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// CatalogPersonaChoicesAPIService CatalogPersonaChoicesAPI service
type CatalogPersonaChoicesAPIService service

type ApiCatalogPersonaChoicesCreateRequest struct {
	ctx           context.Context
	ApiService    *CatalogPersonaChoicesAPIService
	personaChoice *PersonaChoice
}

func (r ApiCatalogPersonaChoicesCreateRequest) PersonaChoice(personaChoice PersonaChoice) ApiCatalogPersonaChoicesCreateRequest {
	r.personaChoice = &personaChoice
	return r
}

func (r ApiCatalogPersonaChoicesCreateRequest) Execute() (*PersonaChoice, *http.Response, error) {
	return r.ApiService.CatalogPersonaChoicesCreateExecute(r)
}

/*
CatalogPersonaChoicesCreate Method for CatalogPersonaChoicesCreate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCatalogPersonaChoicesCreateRequest
*/
func (a *CatalogPersonaChoicesAPIService) CatalogPersonaChoicesCreate(ctx context.Context) ApiCatalogPersonaChoicesCreateRequest {
	return ApiCatalogPersonaChoicesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PersonaChoice
func (a *CatalogPersonaChoicesAPIService) CatalogPersonaChoicesCreateExecute(r ApiCatalogPersonaChoicesCreateRequest) (*PersonaChoice, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PersonaChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogPersonaChoicesAPIService.CatalogPersonaChoicesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/catalog/persona-choices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.personaChoice == nil {
		return localVarReturnValue, nil, reportError("personaChoice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.personaChoice
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCatalogPersonaChoicesListRequest struct {
	ctx        context.Context
	ApiService *CatalogPersonaChoicesAPIService
	fields     *string
	omit       *string
	ordering   *string
	page       *int32
	pageSize   *int32
	search     *string
}

// Include only the specified fields in the response
func (r ApiCatalogPersonaChoicesListRequest) Fields(fields string) ApiCatalogPersonaChoicesListRequest {
	r.fields = &fields
	return r
}

// Exclude the specified fields in the response
func (r ApiCatalogPersonaChoicesListRequest) Omit(omit string) ApiCatalogPersonaChoicesListRequest {
	r.omit = &omit
	return r
}

// Which field to use when ordering the results.
func (r ApiCatalogPersonaChoicesListRequest) Ordering(ordering string) ApiCatalogPersonaChoicesListRequest {
	r.ordering = &ordering
	return r
}

// A page number within the paginated result set.
func (r ApiCatalogPersonaChoicesListRequest) Page(page int32) ApiCatalogPersonaChoicesListRequest {
	r.page = &page
	return r
}

// Number of results to return per page.
func (r ApiCatalogPersonaChoicesListRequest) PageSize(pageSize int32) ApiCatalogPersonaChoicesListRequest {
	r.pageSize = &pageSize
	return r
}

// Search for personachoices by id, name
func (r ApiCatalogPersonaChoicesListRequest) Search(search string) ApiCatalogPersonaChoicesListRequest {
	r.search = &search
	return r
}

func (r ApiCatalogPersonaChoicesListRequest) Execute() (*PaginatedPersonaChoiceList, *http.Response, error) {
	return r.ApiService.CatalogPersonaChoicesListExecute(r)
}

/*
CatalogPersonaChoicesList Method for CatalogPersonaChoicesList

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCatalogPersonaChoicesListRequest
*/
func (a *CatalogPersonaChoicesAPIService) CatalogPersonaChoicesList(ctx context.Context) ApiCatalogPersonaChoicesListRequest {
	return ApiCatalogPersonaChoicesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedPersonaChoiceList
func (a *CatalogPersonaChoicesAPIService) CatalogPersonaChoicesListExecute(r ApiCatalogPersonaChoicesListRequest) (*PaginatedPersonaChoiceList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedPersonaChoiceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogPersonaChoicesAPIService.CatalogPersonaChoicesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/catalog/persona-choices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.omit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "omit", r.omit, "form", "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
