/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PlatformEnum * `air` - NVIDIA Air * `flight_deck` - Flight Deck * `kvm_bastion` - KVM Bastion * `lp-vmware-platform` - lp-vmware-platform * `minimal` - minimal * `openshift` - OpenShift * `vsphere` - vSphere * `vsphere_horizon` - VMware Horizon * `vsphere7` - vSphere 7 * `vsphere8` - vSphere 8
type PlatformEnum string

// List of PlatformEnum
const (
	PlatformAir                    PlatformEnum = "air"
	PlatformFlightDeck             PlatformEnum = "flight_deck"
	PlatformKvmBastion             PlatformEnum = "kvm_bastion"
	PlatformLpVmwarePlatformLegacy PlatformEnum = "lp-vmware-platform"
	PlatformMinimal                PlatformEnum = "minimal"
	PlatformOpenshift              PlatformEnum = "openshift"
	PlatformVsphere                PlatformEnum = "vsphere"
	PlatformVsphereHorizon         PlatformEnum = "vsphere_horizon"
	PlatformVsphere7               PlatformEnum = "vsphere7"
	PlatformVsphere8               PlatformEnum = "vsphere8"
)

// All allowed values of PlatformEnum enum
var AllowedPlatformEnumEnumValues = []PlatformEnum{
	"air",
	"flight_deck",
	"kvm_bastion",
	"lp-vmware-platform",
	"minimal",
	"openshift",
	"vsphere",
	"vsphere_horizon",
	"vsphere7",
	"vsphere8",
}

func (v *PlatformEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlatformEnum(value)
	for _, existing := range AllowedPlatformEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlatformEnum", value)
}

// NewPlatformEnumFromValue returns a pointer to a valid PlatformEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlatformEnumFromValue(v string) (*PlatformEnum, error) {
	ev := PlatformEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlatformEnum: valid values are %v", v, AllowedPlatformEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlatformEnum) IsValid() bool {
	for _, existing := range AllowedPlatformEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlatformEnum value
func (v PlatformEnum) Ptr() *PlatformEnum {
	return &v
}

type NullablePlatformEnum struct {
	value *PlatformEnum
	isSet bool
}

func (v NullablePlatformEnum) Get() *PlatformEnum {
	return v.value
}

func (v *NullablePlatformEnum) Set(val *PlatformEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePlatformEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePlatformEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlatformEnum(val *PlatformEnum) *NullablePlatformEnum {
	return &NullablePlatformEnum{value: val, isSet: true}
}

func (v NullablePlatformEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlatformEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
