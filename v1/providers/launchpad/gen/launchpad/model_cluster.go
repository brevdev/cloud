/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Cluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cluster{}

// Cluster struct for Cluster
type Cluster struct {
	// Is the cluster currently available for provisioning?
	Available bool `json:"available"`
	// Name of the bastion assigned to the cluster
	BastionName NullableString `json:"bastion_name,omitempty"`
	// Timestamp of when the object was created
	Created    time.Time         `json:"created"`
	Deployment ClusterDeployment `json:"deployment"`
	// Is the cluster administratively enabled?
	Enabled *bool `json:"enabled,omitempty"`
	// Experience provisioned onto this cluster
	Experience NullableString     `json:"experience,omitempty"`
	FreeBy     NullableTime       `json:"free_by,omitempty"`
	Gpus       []ClusterGpusInner `json:"gpus"`
	// Alias for GPU plan (i.e. installed GPU type and count)
	GpuAlias  *string                 `json:"gpu_alias,omitempty"`
	GpuCount  *int32                  `json:"gpu_count,omitempty"`
	Id        string                  `json:"id"`
	Instances []ClusterInstancesInner `json:"instances"`
	// Timestamp of when the cluster was last in use
	LastUsed NullableTime `json:"last_used"`
	// Is the cluster in maintenance mode?
	Maintenance *bool `json:"maintenance,omitempty"`
	// Management IP address
	MgmtIp *string `json:"mgmt_ip,omitempty"`
	// Management MAC address
	MgmtMac NullableString `json:"mgmt_mac,omitempty"`
	// Timestamp of when the object was last modified
	Modified time.Time `json:"modified"`
	// The subnet mask of the cluster's public IP address in CIDR notation
	Netmask   NullableInt32       `json:"netmask,omitempty"`
	NodeCount *int32              `json:"node_count,omitempty"`
	Nodes     []ClusterNodesInner `json:"nodes,omitempty"`
	// Administrative comments about the cluster
	Notes NullableString `json:"notes,omitempty"`
	// Is the cluster exempt from provisioning_state timeouts? Can be used to ensure the cluster persists after a provisioning failure.
	Persist *bool `json:"persist,omitempty"`
	// Does the provider have capacity to provision this cluster?
	ProviderCapacity bool `json:"provider_capacity"`
	// Username used for provisioning this cluster
	ProvisionUser NullableString `json:"provision_user,omitempty"`
	// The number of attempts that have been made to provision this cluster. Automatically resets to 0 after successful provisioning.
	ProvisioningAttempts *int32 `json:"provisioning_attempts,omitempty"`
	// Is the cluster currently provisioned?  * `deployed` - Cluster is in use by a deployment * `deploying` - Provisioning is in progress * `destroying` - Cluster is being destroyed * `pending` - Provisioning will begin soon * `ready` - Provisioning has completed and is ready for a deployment * `reserved` - Cluster is unprovisioned but reserved for later use * `unprovisioned` - Cluster has not yet been provisioned
	ProvisioningState *ProvisioningStateEnum `json:"provisioning_state,omitempty"`
	// Public IP address or fully-qualified domain name of this cluster
	PublicAddress NullableString `json:"public_address,omitempty"`
	// The request ID for the lab that is currently provisioned on this cluster (ex: TRY-1234)
	RequestId NullableString `json:"request_id,omitempty"`
	// Is the cluster a static reservation from its provider?
	Reservation *bool `json:"reservation,omitempty"`
	// Tenant UUID(s) that have been generated for this cluster during provisioning
	TenantIds []string `json:"tenant_ids"`
	// VLAN number
	VlanId *int32 `json:"vlan_id,omitempty"`
	// Is the cluster set aside for use in a workshop?
	Workshop *bool `json:"workshop,omitempty"`
	// Identifier of the workshop this cluster is set aside for
	WorkshopId           NullableString `json:"workshop_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Cluster Cluster

// NewCluster instantiates a new Cluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCluster(available bool, created time.Time, deployment ClusterDeployment, gpus []ClusterGpusInner, id string, instances []ClusterInstancesInner, lastUsed NullableTime, modified time.Time, providerCapacity bool, tenantIds []string) *Cluster {
	this := Cluster{}
	this.Available = available
	this.Created = created
	this.Deployment = deployment
	this.Gpus = gpus
	this.Id = id
	this.Instances = instances
	this.LastUsed = lastUsed
	this.Modified = modified
	this.ProviderCapacity = providerCapacity
	this.TenantIds = tenantIds
	return &this
}

// NewClusterWithDefaults instantiates a new Cluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterWithDefaults() *Cluster {
	this := Cluster{}
	return &this
}

// GetAvailable returns the Available field value
func (o *Cluster) GetAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *Cluster) SetAvailable(v bool) {
	o.Available = v
}

// GetBastionName returns the BastionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetBastionName() string {
	if o == nil || IsNil(o.BastionName.Get()) {
		var ret string
		return ret
	}
	return *o.BastionName.Get()
}

// GetBastionNameOk returns a tuple with the BastionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetBastionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BastionName.Get(), o.BastionName.IsSet()
}

// HasBastionName returns a boolean if a field has been set.
func (o *Cluster) HasBastionName() bool {
	if o != nil && o.BastionName.IsSet() {
		return true
	}

	return false
}

// SetBastionName gets a reference to the given NullableString and assigns it to the BastionName field.
func (o *Cluster) SetBastionName(v string) {
	o.BastionName.Set(&v)
}

// SetBastionNameNil sets the value for BastionName to be an explicit nil
func (o *Cluster) SetBastionNameNil() {
	o.BastionName.Set(nil)
}

// UnsetBastionName ensures that no value is present for BastionName, not even an explicit nil
func (o *Cluster) UnsetBastionName() {
	o.BastionName.Unset()
}

// GetCreated returns the Created field value
func (o *Cluster) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Cluster) SetCreated(v time.Time) {
	o.Created = v
}

// GetDeployment returns the Deployment field value
func (o *Cluster) GetDeployment() ClusterDeployment {
	if o == nil {
		var ret ClusterDeployment
		return ret
	}

	return o.Deployment
}

// GetDeploymentOk returns a tuple with the Deployment field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetDeploymentOk() (*ClusterDeployment, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deployment, true
}

// SetDeployment sets field value
func (o *Cluster) SetDeployment(v ClusterDeployment) {
	o.Deployment = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Cluster) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Cluster) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Cluster) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExperience returns the Experience field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetExperience() string {
	if o == nil || IsNil(o.Experience.Get()) {
		var ret string
		return ret
	}
	return *o.Experience.Get()
}

// GetExperienceOk returns a tuple with the Experience field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetExperienceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Experience.Get(), o.Experience.IsSet()
}

// HasExperience returns a boolean if a field has been set.
func (o *Cluster) HasExperience() bool {
	if o != nil && o.Experience.IsSet() {
		return true
	}

	return false
}

// SetExperience gets a reference to the given NullableString and assigns it to the Experience field.
func (o *Cluster) SetExperience(v string) {
	o.Experience.Set(&v)
}

// SetExperienceNil sets the value for Experience to be an explicit nil
func (o *Cluster) SetExperienceNil() {
	o.Experience.Set(nil)
}

// UnsetExperience ensures that no value is present for Experience, not even an explicit nil
func (o *Cluster) UnsetExperience() {
	o.Experience.Unset()
}

// GetFreeBy returns the FreeBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetFreeBy() time.Time {
	if o == nil || IsNil(o.FreeBy.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FreeBy.Get()
}

// GetFreeByOk returns a tuple with the FreeBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetFreeByOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FreeBy.Get(), o.FreeBy.IsSet()
}

// HasFreeBy returns a boolean if a field has been set.
func (o *Cluster) HasFreeBy() bool {
	if o != nil && o.FreeBy.IsSet() {
		return true
	}

	return false
}

// SetFreeBy gets a reference to the given NullableTime and assigns it to the FreeBy field.
func (o *Cluster) SetFreeBy(v time.Time) {
	o.FreeBy.Set(&v)
}

// SetFreeByNil sets the value for FreeBy to be an explicit nil
func (o *Cluster) SetFreeByNil() {
	o.FreeBy.Set(nil)
}

// UnsetFreeBy ensures that no value is present for FreeBy, not even an explicit nil
func (o *Cluster) UnsetFreeBy() {
	o.FreeBy.Unset()
}

// GetGpus returns the Gpus field value
func (o *Cluster) GetGpus() []ClusterGpusInner {
	if o == nil {
		var ret []ClusterGpusInner
		return ret
	}

	return o.Gpus
}

// GetGpusOk returns a tuple with the Gpus field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetGpusOk() ([]ClusterGpusInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gpus, true
}

// SetGpus sets field value
func (o *Cluster) SetGpus(v []ClusterGpusInner) {
	o.Gpus = v
}

// GetGpuAlias returns the GpuAlias field value if set, zero value otherwise.
func (o *Cluster) GetGpuAlias() string {
	if o == nil || IsNil(o.GpuAlias) {
		var ret string
		return ret
	}
	return *o.GpuAlias
}

// GetGpuAliasOk returns a tuple with the GpuAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetGpuAliasOk() (*string, bool) {
	if o == nil || IsNil(o.GpuAlias) {
		return nil, false
	}
	return o.GpuAlias, true
}

// HasGpuAlias returns a boolean if a field has been set.
func (o *Cluster) HasGpuAlias() bool {
	if o != nil && !IsNil(o.GpuAlias) {
		return true
	}

	return false
}

// SetGpuAlias gets a reference to the given string and assigns it to the GpuAlias field.
func (o *Cluster) SetGpuAlias(v string) {
	o.GpuAlias = &v
}

// GetGpuCount returns the GpuCount field value if set, zero value otherwise.
func (o *Cluster) GetGpuCount() int32 {
	if o == nil || IsNil(o.GpuCount) {
		var ret int32
		return ret
	}
	return *o.GpuCount
}

// GetGpuCountOk returns a tuple with the GpuCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetGpuCountOk() (*int32, bool) {
	if o == nil || IsNil(o.GpuCount) {
		return nil, false
	}
	return o.GpuCount, true
}

// HasGpuCount returns a boolean if a field has been set.
func (o *Cluster) HasGpuCount() bool {
	if o != nil && !IsNil(o.GpuCount) {
		return true
	}

	return false
}

// SetGpuCount gets a reference to the given int32 and assigns it to the GpuCount field.
func (o *Cluster) SetGpuCount(v int32) {
	o.GpuCount = &v
}

// GetId returns the Id field value
func (o *Cluster) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Cluster) SetId(v string) {
	o.Id = v
}

// GetInstances returns the Instances field value
func (o *Cluster) GetInstances() []ClusterInstancesInner {
	if o == nil {
		var ret []ClusterInstancesInner
		return ret
	}

	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetInstancesOk() ([]ClusterInstancesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instances, true
}

// SetInstances sets field value
func (o *Cluster) SetInstances(v []ClusterInstancesInner) {
	o.Instances = v
}

// GetLastUsed returns the LastUsed field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Cluster) GetLastUsed() time.Time {
	if o == nil || o.LastUsed.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastUsed.Get()
}

// GetLastUsedOk returns a tuple with the LastUsed field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetLastUsedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUsed.Get(), o.LastUsed.IsSet()
}

// SetLastUsed sets field value
func (o *Cluster) SetLastUsed(v time.Time) {
	o.LastUsed.Set(&v)
}

// GetMaintenance returns the Maintenance field value if set, zero value otherwise.
func (o *Cluster) GetMaintenance() bool {
	if o == nil || IsNil(o.Maintenance) {
		var ret bool
		return ret
	}
	return *o.Maintenance
}

// GetMaintenanceOk returns a tuple with the Maintenance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetMaintenanceOk() (*bool, bool) {
	if o == nil || IsNil(o.Maintenance) {
		return nil, false
	}
	return o.Maintenance, true
}

// HasMaintenance returns a boolean if a field has been set.
func (o *Cluster) HasMaintenance() bool {
	if o != nil && !IsNil(o.Maintenance) {
		return true
	}

	return false
}

// SetMaintenance gets a reference to the given bool and assigns it to the Maintenance field.
func (o *Cluster) SetMaintenance(v bool) {
	o.Maintenance = &v
}

// GetMgmtIp returns the MgmtIp field value if set, zero value otherwise.
func (o *Cluster) GetMgmtIp() string {
	if o == nil || IsNil(o.MgmtIp) {
		var ret string
		return ret
	}
	return *o.MgmtIp
}

// GetMgmtIpOk returns a tuple with the MgmtIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetMgmtIpOk() (*string, bool) {
	if o == nil || IsNil(o.MgmtIp) {
		return nil, false
	}
	return o.MgmtIp, true
}

// HasMgmtIp returns a boolean if a field has been set.
func (o *Cluster) HasMgmtIp() bool {
	if o != nil && !IsNil(o.MgmtIp) {
		return true
	}

	return false
}

// SetMgmtIp gets a reference to the given string and assigns it to the MgmtIp field.
func (o *Cluster) SetMgmtIp(v string) {
	o.MgmtIp = &v
}

// GetMgmtMac returns the MgmtMac field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetMgmtMac() string {
	if o == nil || IsNil(o.MgmtMac.Get()) {
		var ret string
		return ret
	}
	return *o.MgmtMac.Get()
}

// GetMgmtMacOk returns a tuple with the MgmtMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetMgmtMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MgmtMac.Get(), o.MgmtMac.IsSet()
}

// HasMgmtMac returns a boolean if a field has been set.
func (o *Cluster) HasMgmtMac() bool {
	if o != nil && o.MgmtMac.IsSet() {
		return true
	}

	return false
}

// SetMgmtMac gets a reference to the given NullableString and assigns it to the MgmtMac field.
func (o *Cluster) SetMgmtMac(v string) {
	o.MgmtMac.Set(&v)
}

// SetMgmtMacNil sets the value for MgmtMac to be an explicit nil
func (o *Cluster) SetMgmtMacNil() {
	o.MgmtMac.Set(nil)
}

// UnsetMgmtMac ensures that no value is present for MgmtMac, not even an explicit nil
func (o *Cluster) UnsetMgmtMac() {
	o.MgmtMac.Unset()
}

// GetModified returns the Modified field value
func (o *Cluster) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *Cluster) SetModified(v time.Time) {
	o.Modified = v
}

// GetNetmask returns the Netmask field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetNetmask() int32 {
	if o == nil || IsNil(o.Netmask.Get()) {
		var ret int32
		return ret
	}
	return *o.Netmask.Get()
}

// GetNetmaskOk returns a tuple with the Netmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetNetmaskOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Netmask.Get(), o.Netmask.IsSet()
}

// HasNetmask returns a boolean if a field has been set.
func (o *Cluster) HasNetmask() bool {
	if o != nil && o.Netmask.IsSet() {
		return true
	}

	return false
}

// SetNetmask gets a reference to the given NullableInt32 and assigns it to the Netmask field.
func (o *Cluster) SetNetmask(v int32) {
	o.Netmask.Set(&v)
}

// SetNetmaskNil sets the value for Netmask to be an explicit nil
func (o *Cluster) SetNetmaskNil() {
	o.Netmask.Set(nil)
}

// UnsetNetmask ensures that no value is present for Netmask, not even an explicit nil
func (o *Cluster) UnsetNetmask() {
	o.Netmask.Unset()
}

// GetNodeCount returns the NodeCount field value if set, zero value otherwise.
func (o *Cluster) GetNodeCount() int32 {
	if o == nil || IsNil(o.NodeCount) {
		var ret int32
		return ret
	}
	return *o.NodeCount
}

// GetNodeCountOk returns a tuple with the NodeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetNodeCountOk() (*int32, bool) {
	if o == nil || IsNil(o.NodeCount) {
		return nil, false
	}
	return o.NodeCount, true
}

// HasNodeCount returns a boolean if a field has been set.
func (o *Cluster) HasNodeCount() bool {
	if o != nil && !IsNil(o.NodeCount) {
		return true
	}

	return false
}

// SetNodeCount gets a reference to the given int32 and assigns it to the NodeCount field.
func (o *Cluster) SetNodeCount(v int32) {
	o.NodeCount = &v
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *Cluster) GetNodes() []ClusterNodesInner {
	if o == nil || IsNil(o.Nodes) {
		var ret []ClusterNodesInner
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetNodesOk() ([]ClusterNodesInner, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *Cluster) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []ClusterNodesInner and assigns it to the Nodes field.
func (o *Cluster) SetNodes(v []ClusterNodesInner) {
	o.Nodes = v
}

// GetNotes returns the Notes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetNotes() string {
	if o == nil || IsNil(o.Notes.Get()) {
		var ret string
		return ret
	}
	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetNotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// HasNotes returns a boolean if a field has been set.
func (o *Cluster) HasNotes() bool {
	if o != nil && o.Notes.IsSet() {
		return true
	}

	return false
}

// SetNotes gets a reference to the given NullableString and assigns it to the Notes field.
func (o *Cluster) SetNotes(v string) {
	o.Notes.Set(&v)
}

// SetNotesNil sets the value for Notes to be an explicit nil
func (o *Cluster) SetNotesNil() {
	o.Notes.Set(nil)
}

// UnsetNotes ensures that no value is present for Notes, not even an explicit nil
func (o *Cluster) UnsetNotes() {
	o.Notes.Unset()
}

// GetPersist returns the Persist field value if set, zero value otherwise.
func (o *Cluster) GetPersist() bool {
	if o == nil || IsNil(o.Persist) {
		var ret bool
		return ret
	}
	return *o.Persist
}

// GetPersistOk returns a tuple with the Persist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetPersistOk() (*bool, bool) {
	if o == nil || IsNil(o.Persist) {
		return nil, false
	}
	return o.Persist, true
}

// HasPersist returns a boolean if a field has been set.
func (o *Cluster) HasPersist() bool {
	if o != nil && !IsNil(o.Persist) {
		return true
	}

	return false
}

// SetPersist gets a reference to the given bool and assigns it to the Persist field.
func (o *Cluster) SetPersist(v bool) {
	o.Persist = &v
}

// GetProviderCapacity returns the ProviderCapacity field value
func (o *Cluster) GetProviderCapacity() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ProviderCapacity
}

// GetProviderCapacityOk returns a tuple with the ProviderCapacity field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetProviderCapacityOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderCapacity, true
}

// SetProviderCapacity sets field value
func (o *Cluster) SetProviderCapacity(v bool) {
	o.ProviderCapacity = v
}

// GetProvisionUser returns the ProvisionUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetProvisionUser() string {
	if o == nil || IsNil(o.ProvisionUser.Get()) {
		var ret string
		return ret
	}
	return *o.ProvisionUser.Get()
}

// GetProvisionUserOk returns a tuple with the ProvisionUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetProvisionUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProvisionUser.Get(), o.ProvisionUser.IsSet()
}

// HasProvisionUser returns a boolean if a field has been set.
func (o *Cluster) HasProvisionUser() bool {
	if o != nil && o.ProvisionUser.IsSet() {
		return true
	}

	return false
}

// SetProvisionUser gets a reference to the given NullableString and assigns it to the ProvisionUser field.
func (o *Cluster) SetProvisionUser(v string) {
	o.ProvisionUser.Set(&v)
}

// SetProvisionUserNil sets the value for ProvisionUser to be an explicit nil
func (o *Cluster) SetProvisionUserNil() {
	o.ProvisionUser.Set(nil)
}

// UnsetProvisionUser ensures that no value is present for ProvisionUser, not even an explicit nil
func (o *Cluster) UnsetProvisionUser() {
	o.ProvisionUser.Unset()
}

// GetProvisioningAttempts returns the ProvisioningAttempts field value if set, zero value otherwise.
func (o *Cluster) GetProvisioningAttempts() int32 {
	if o == nil || IsNil(o.ProvisioningAttempts) {
		var ret int32
		return ret
	}
	return *o.ProvisioningAttempts
}

// GetProvisioningAttemptsOk returns a tuple with the ProvisioningAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetProvisioningAttemptsOk() (*int32, bool) {
	if o == nil || IsNil(o.ProvisioningAttempts) {
		return nil, false
	}
	return o.ProvisioningAttempts, true
}

// HasProvisioningAttempts returns a boolean if a field has been set.
func (o *Cluster) HasProvisioningAttempts() bool {
	if o != nil && !IsNil(o.ProvisioningAttempts) {
		return true
	}

	return false
}

// SetProvisioningAttempts gets a reference to the given int32 and assigns it to the ProvisioningAttempts field.
func (o *Cluster) SetProvisioningAttempts(v int32) {
	o.ProvisioningAttempts = &v
}

// GetProvisioningState returns the ProvisioningState field value if set, zero value otherwise.
func (o *Cluster) GetProvisioningState() ProvisioningStateEnum {
	if o == nil || IsNil(o.ProvisioningState) {
		var ret ProvisioningStateEnum
		return ret
	}
	return *o.ProvisioningState
}

// GetProvisioningStateOk returns a tuple with the ProvisioningState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetProvisioningStateOk() (*ProvisioningStateEnum, bool) {
	if o == nil || IsNil(o.ProvisioningState) {
		return nil, false
	}
	return o.ProvisioningState, true
}

// HasProvisioningState returns a boolean if a field has been set.
func (o *Cluster) HasProvisioningState() bool {
	if o != nil && !IsNil(o.ProvisioningState) {
		return true
	}

	return false
}

// SetProvisioningState gets a reference to the given ProvisioningStateEnum and assigns it to the ProvisioningState field.
func (o *Cluster) SetProvisioningState(v ProvisioningStateEnum) {
	o.ProvisioningState = &v
}

// GetPublicAddress returns the PublicAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetPublicAddress() string {
	if o == nil || IsNil(o.PublicAddress.Get()) {
		var ret string
		return ret
	}
	return *o.PublicAddress.Get()
}

// GetPublicAddressOk returns a tuple with the PublicAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetPublicAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublicAddress.Get(), o.PublicAddress.IsSet()
}

// HasPublicAddress returns a boolean if a field has been set.
func (o *Cluster) HasPublicAddress() bool {
	if o != nil && o.PublicAddress.IsSet() {
		return true
	}

	return false
}

// SetPublicAddress gets a reference to the given NullableString and assigns it to the PublicAddress field.
func (o *Cluster) SetPublicAddress(v string) {
	o.PublicAddress.Set(&v)
}

// SetPublicAddressNil sets the value for PublicAddress to be an explicit nil
func (o *Cluster) SetPublicAddressNil() {
	o.PublicAddress.Set(nil)
}

// UnsetPublicAddress ensures that no value is present for PublicAddress, not even an explicit nil
func (o *Cluster) UnsetPublicAddress() {
	o.PublicAddress.Unset()
}

// GetRequestId returns the RequestId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetRequestId() string {
	if o == nil || IsNil(o.RequestId.Get()) {
		var ret string
		return ret
	}
	return *o.RequestId.Get()
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequestId.Get(), o.RequestId.IsSet()
}

// HasRequestId returns a boolean if a field has been set.
func (o *Cluster) HasRequestId() bool {
	if o != nil && o.RequestId.IsSet() {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given NullableString and assigns it to the RequestId field.
func (o *Cluster) SetRequestId(v string) {
	o.RequestId.Set(&v)
}

// SetRequestIdNil sets the value for RequestId to be an explicit nil
func (o *Cluster) SetRequestIdNil() {
	o.RequestId.Set(nil)
}

// UnsetRequestId ensures that no value is present for RequestId, not even an explicit nil
func (o *Cluster) UnsetRequestId() {
	o.RequestId.Unset()
}

// GetReservation returns the Reservation field value if set, zero value otherwise.
func (o *Cluster) GetReservation() bool {
	if o == nil || IsNil(o.Reservation) {
		var ret bool
		return ret
	}
	return *o.Reservation
}

// GetReservationOk returns a tuple with the Reservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetReservationOk() (*bool, bool) {
	if o == nil || IsNil(o.Reservation) {
		return nil, false
	}
	return o.Reservation, true
}

// HasReservation returns a boolean if a field has been set.
func (o *Cluster) HasReservation() bool {
	if o != nil && !IsNil(o.Reservation) {
		return true
	}

	return false
}

// SetReservation gets a reference to the given bool and assigns it to the Reservation field.
func (o *Cluster) SetReservation(v bool) {
	o.Reservation = &v
}

// GetTenantIds returns the TenantIds field value
func (o *Cluster) GetTenantIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TenantIds
}

// GetTenantIdsOk returns a tuple with the TenantIds field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetTenantIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantIds, true
}

// SetTenantIds sets field value
func (o *Cluster) SetTenantIds(v []string) {
	o.TenantIds = v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *Cluster) GetVlanId() int32 {
	if o == nil || IsNil(o.VlanId) {
		var ret int32
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *Cluster) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given int32 and assigns it to the VlanId field.
func (o *Cluster) SetVlanId(v int32) {
	o.VlanId = &v
}

// GetWorkshop returns the Workshop field value if set, zero value otherwise.
func (o *Cluster) GetWorkshop() bool {
	if o == nil || IsNil(o.Workshop) {
		var ret bool
		return ret
	}
	return *o.Workshop
}

// GetWorkshopOk returns a tuple with the Workshop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetWorkshopOk() (*bool, bool) {
	if o == nil || IsNil(o.Workshop) {
		return nil, false
	}
	return o.Workshop, true
}

// HasWorkshop returns a boolean if a field has been set.
func (o *Cluster) HasWorkshop() bool {
	if o != nil && !IsNil(o.Workshop) {
		return true
	}

	return false
}

// SetWorkshop gets a reference to the given bool and assigns it to the Workshop field.
func (o *Cluster) SetWorkshop(v bool) {
	o.Workshop = &v
}

// GetWorkshopId returns the WorkshopId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetWorkshopId() string {
	if o == nil || IsNil(o.WorkshopId.Get()) {
		var ret string
		return ret
	}
	return *o.WorkshopId.Get()
}

// GetWorkshopIdOk returns a tuple with the WorkshopId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetWorkshopIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkshopId.Get(), o.WorkshopId.IsSet()
}

// HasWorkshopId returns a boolean if a field has been set.
func (o *Cluster) HasWorkshopId() bool {
	if o != nil && o.WorkshopId.IsSet() {
		return true
	}

	return false
}

// SetWorkshopId gets a reference to the given NullableString and assigns it to the WorkshopId field.
func (o *Cluster) SetWorkshopId(v string) {
	o.WorkshopId.Set(&v)
}

// SetWorkshopIdNil sets the value for WorkshopId to be an explicit nil
func (o *Cluster) SetWorkshopIdNil() {
	o.WorkshopId.Set(nil)
}

// UnsetWorkshopId ensures that no value is present for WorkshopId, not even an explicit nil
func (o *Cluster) UnsetWorkshopId() {
	o.WorkshopId.Unset()
}

func (o Cluster) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["available"] = o.Available
	if o.BastionName.IsSet() {
		toSerialize["bastion_name"] = o.BastionName.Get()
	}
	toSerialize["created"] = o.Created
	toSerialize["deployment"] = o.Deployment
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Experience.IsSet() {
		toSerialize["experience"] = o.Experience.Get()
	}
	if o.FreeBy.IsSet() {
		toSerialize["free_by"] = o.FreeBy.Get()
	}
	toSerialize["gpus"] = o.Gpus
	if !IsNil(o.GpuAlias) {
		toSerialize["gpu_alias"] = o.GpuAlias
	}
	if !IsNil(o.GpuCount) {
		toSerialize["gpu_count"] = o.GpuCount
	}
	toSerialize["id"] = o.Id
	toSerialize["instances"] = o.Instances
	toSerialize["last_used"] = o.LastUsed.Get()
	if !IsNil(o.Maintenance) {
		toSerialize["maintenance"] = o.Maintenance
	}
	if !IsNil(o.MgmtIp) {
		toSerialize["mgmt_ip"] = o.MgmtIp
	}
	if o.MgmtMac.IsSet() {
		toSerialize["mgmt_mac"] = o.MgmtMac.Get()
	}
	toSerialize["modified"] = o.Modified
	if o.Netmask.IsSet() {
		toSerialize["netmask"] = o.Netmask.Get()
	}
	if !IsNil(o.NodeCount) {
		toSerialize["node_count"] = o.NodeCount
	}
	if !IsNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}
	if o.Notes.IsSet() {
		toSerialize["notes"] = o.Notes.Get()
	}
	if !IsNil(o.Persist) {
		toSerialize["persist"] = o.Persist
	}
	toSerialize["provider_capacity"] = o.ProviderCapacity
	if o.ProvisionUser.IsSet() {
		toSerialize["provision_user"] = o.ProvisionUser.Get()
	}
	if !IsNil(o.ProvisioningAttempts) {
		toSerialize["provisioning_attempts"] = o.ProvisioningAttempts
	}
	if !IsNil(o.ProvisioningState) {
		toSerialize["provisioning_state"] = o.ProvisioningState
	}
	if o.PublicAddress.IsSet() {
		toSerialize["public_address"] = o.PublicAddress.Get()
	}
	if o.RequestId.IsSet() {
		toSerialize["request_id"] = o.RequestId.Get()
	}
	if !IsNil(o.Reservation) {
		toSerialize["reservation"] = o.Reservation
	}
	toSerialize["tenant_ids"] = o.TenantIds
	if !IsNil(o.VlanId) {
		toSerialize["vlan_id"] = o.VlanId
	}
	if !IsNil(o.Workshop) {
		toSerialize["workshop"] = o.Workshop
	}
	if o.WorkshopId.IsSet() {
		toSerialize["workshop_id"] = o.WorkshopId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Cluster) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"available",
		"created",
		"deployment",
		"gpus",
		"id",
		"instances",
		"last_used",
		"modified",
		"provider_capacity",
		"tenant_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCluster := _Cluster{}

	err = json.Unmarshal(data, &varCluster)

	if err != nil {
		return err
	}

	*o = Cluster(varCluster)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "available")
		delete(additionalProperties, "bastion_name")
		delete(additionalProperties, "created")
		delete(additionalProperties, "deployment")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "experience")
		delete(additionalProperties, "free_by")
		delete(additionalProperties, "gpus")
		delete(additionalProperties, "gpu_alias")
		delete(additionalProperties, "gpu_count")
		delete(additionalProperties, "id")
		delete(additionalProperties, "instances")
		delete(additionalProperties, "last_used")
		delete(additionalProperties, "maintenance")
		delete(additionalProperties, "mgmt_ip")
		delete(additionalProperties, "mgmt_mac")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "netmask")
		delete(additionalProperties, "node_count")
		delete(additionalProperties, "nodes")
		delete(additionalProperties, "notes")
		delete(additionalProperties, "persist")
		delete(additionalProperties, "provider_capacity")
		delete(additionalProperties, "provision_user")
		delete(additionalProperties, "provisioning_attempts")
		delete(additionalProperties, "provisioning_state")
		delete(additionalProperties, "public_address")
		delete(additionalProperties, "request_id")
		delete(additionalProperties, "reservation")
		delete(additionalProperties, "tenant_ids")
		delete(additionalProperties, "vlan_id")
		delete(additionalProperties, "workshop")
		delete(additionalProperties, "workshop_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCluster struct {
	value *Cluster
	isSet bool
}

func (v NullableCluster) Get() *Cluster {
	return v.value
}

func (v *NullableCluster) Set(val *Cluster) {
	v.value = val
	v.isSet = true
}

func (v NullableCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCluster(val *Cluster) *NullableCluster {
	return &NullableCluster{value: val, isSet: true}
}

func (v NullableCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
