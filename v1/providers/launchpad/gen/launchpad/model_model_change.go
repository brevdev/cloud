/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ModelChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelChange{}

// ModelChange struct for ModelChange
type ModelChange struct {
	ChangeType           string                    `json:"change_type"`
	Changes              []ModelChangeChangesInner `json:"changes"`
	Created              time.Time                 `json:"created"`
	Id                   int32                     `json:"id"`
	Username             string                    `json:"username"`
	AdditionalProperties map[string]interface{}
}

type _ModelChange ModelChange

// NewModelChange instantiates a new ModelChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelChange(changeType string, changes []ModelChangeChangesInner, created time.Time, id int32, username string) *ModelChange {
	this := ModelChange{}
	this.ChangeType = changeType
	this.Changes = changes
	this.Created = created
	this.Id = id
	this.Username = username
	return &this
}

// NewModelChangeWithDefaults instantiates a new ModelChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelChangeWithDefaults() *ModelChange {
	this := ModelChange{}
	return &this
}

// GetChangeType returns the ChangeType field value
func (o *ModelChange) GetChangeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChangeType
}

// GetChangeTypeOk returns a tuple with the ChangeType field value
// and a boolean to check if the value has been set.
func (o *ModelChange) GetChangeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangeType, true
}

// SetChangeType sets field value
func (o *ModelChange) SetChangeType(v string) {
	o.ChangeType = v
}

// GetChanges returns the Changes field value
func (o *ModelChange) GetChanges() []ModelChangeChangesInner {
	if o == nil {
		var ret []ModelChangeChangesInner
		return ret
	}

	return o.Changes
}

// GetChangesOk returns a tuple with the Changes field value
// and a boolean to check if the value has been set.
func (o *ModelChange) GetChangesOk() ([]ModelChangeChangesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Changes, true
}

// SetChanges sets field value
func (o *ModelChange) SetChanges(v []ModelChangeChangesInner) {
	o.Changes = v
}

// GetCreated returns the Created field value
func (o *ModelChange) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *ModelChange) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *ModelChange) SetCreated(v time.Time) {
	o.Created = v
}

// GetId returns the Id field value
func (o *ModelChange) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ModelChange) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ModelChange) SetId(v int32) {
	o.Id = v
}

// GetUsername returns the Username field value
func (o *ModelChange) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *ModelChange) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *ModelChange) SetUsername(v string) {
	o.Username = v
}

func (o ModelChange) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["change_type"] = o.ChangeType
	toSerialize["changes"] = o.Changes
	toSerialize["created"] = o.Created
	toSerialize["id"] = o.Id
	toSerialize["username"] = o.Username

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelChange) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"change_type",
		"changes",
		"created",
		"id",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelChange := _ModelChange{}

	err = json.Unmarshal(data, &varModelChange)

	if err != nil {
		return err
	}

	*o = ModelChange(varModelChange)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "change_type")
		delete(additionalProperties, "changes")
		delete(additionalProperties, "created")
		delete(additionalProperties, "id")
		delete(additionalProperties, "username")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelChange struct {
	value *ModelChange
	isSet bool
}

func (v NullableModelChange) Get() *ModelChange {
	return v.value
}

func (v *NullableModelChange) Set(val *ModelChange) {
	v.value = val
	v.isSet = true
}

func (v NullableModelChange) IsSet() bool {
	return v.isSet
}

func (v *NullableModelChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelChange(val *ModelChange) *NullableModelChange {
	return &NullableModelChange{value: val, isSet: true}
}

func (v NullableModelChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
