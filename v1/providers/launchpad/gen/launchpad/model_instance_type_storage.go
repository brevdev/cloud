/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceTypeStorage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceTypeStorage{}

// InstanceTypeStorage struct for InstanceTypeStorage
type InstanceTypeStorage struct {
	// System storage size (in GB)
	SizeGb int32 `json:"size_gb"`
	// Disk type  * `nvme` - NVMe * `ssd` - ssd
	Type                 TypeEnum `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _InstanceTypeStorage InstanceTypeStorage

// NewInstanceTypeStorage instantiates a new InstanceTypeStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceTypeStorage(sizeGb int32, type_ TypeEnum) *InstanceTypeStorage {
	this := InstanceTypeStorage{}
	this.SizeGb = sizeGb
	this.Type = type_
	return &this
}

// NewInstanceTypeStorageWithDefaults instantiates a new InstanceTypeStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypeStorageWithDefaults() *InstanceTypeStorage {
	this := InstanceTypeStorage{}
	return &this
}

// GetSizeGb returns the SizeGb field value
func (o *InstanceTypeStorage) GetSizeGb() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SizeGb
}

// GetSizeGbOk returns a tuple with the SizeGb field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeStorage) GetSizeGbOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SizeGb, true
}

// SetSizeGb sets field value
func (o *InstanceTypeStorage) SetSizeGb(v int32) {
	o.SizeGb = v
}

// GetType returns the Type field value
func (o *InstanceTypeStorage) GetType() TypeEnum {
	if o == nil {
		var ret TypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeStorage) GetTypeOk() (*TypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InstanceTypeStorage) SetType(v TypeEnum) {
	o.Type = v
}

func (o InstanceTypeStorage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceTypeStorage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["size_gb"] = o.SizeGb
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceTypeStorage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"size_gb",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceTypeStorage := _InstanceTypeStorage{}

	err = json.Unmarshal(data, &varInstanceTypeStorage)

	if err != nil {
		return err
	}

	*o = InstanceTypeStorage(varInstanceTypeStorage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "size_gb")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceTypeStorage struct {
	value *InstanceTypeStorage
	isSet bool
}

func (v NullableInstanceTypeStorage) Get() *InstanceTypeStorage {
	return v.value
}

func (v *NullableInstanceTypeStorage) Set(val *InstanceTypeStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceTypeStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceTypeStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceTypeStorage(val *InstanceTypeStorage) *NullableInstanceTypeStorage {
	return &NullableInstanceTypeStorage{value: val, isSet: true}
}

func (v NullableInstanceTypeStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceTypeStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
