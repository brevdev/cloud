/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PriorityEnum * `p0` - p0 * `p1` - p1 * `p2` - p2 * `p3` - p3
type PriorityEnum string

// List of PriorityEnum
const (
	PriorityP0 PriorityEnum = "p0"
	PriorityP1 PriorityEnum = "p1"
	PriorityP2 PriorityEnum = "p2"
	PriorityP3 PriorityEnum = "p3"
)

// All allowed values of PriorityEnum enum
var AllowedPriorityEnumEnumValues = []PriorityEnum{
	"p0",
	"p1",
	"p2",
	"p3",
}

func (v *PriorityEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PriorityEnum(value)
	for _, existing := range AllowedPriorityEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PriorityEnum", value)
}

// NewPriorityEnumFromValue returns a pointer to a valid PriorityEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPriorityEnumFromValue(v string) (*PriorityEnum, error) {
	ev := PriorityEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PriorityEnum: valid values are %v", v, AllowedPriorityEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PriorityEnum) IsValid() bool {
	for _, existing := range AllowedPriorityEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PriorityEnum value
func (v PriorityEnum) Ptr() *PriorityEnum {
	return &v
}

type NullablePriorityEnum struct {
	value *PriorityEnum
	isSet bool
}

func (v NullablePriorityEnum) Get() *PriorityEnum {
	return v.value
}

func (v *NullablePriorityEnum) Set(val *PriorityEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePriorityEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePriorityEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriorityEnum(val *PriorityEnum) *NullablePriorityEnum {
	return &NullablePriorityEnum{value: val, isSet: true}
}

func (v NullablePriorityEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriorityEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
