/*
NVIDIA LaunchPad API

RESTful API for interacting with the NVIDIA LaunchPad platform

API version: 2.36.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DeploymentTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentTask{}

// DeploymentTask struct for DeploymentTask
type DeploymentTask struct {
	// The action the task will perform  * `start_instances` - Start all instances in the deployment * `stop_instances` - Stop all instances in the deployment
	Action DeploymentTaskActionEnum `json:"action"`
	// Timestamp of when the object was created
	Created    time.Time         `json:"created"`
	Deployment ClusterDeployment `json:"deployment"`
	Id         string            `json:"id"`
	// Timestamp of when the object was last modified
	Modified time.Time `json:"modified"`
	// Number of times the task has been retried
	Retries int32 `json:"retries"`
	// Current status of the task  * `completed` - completed * `failed` - failed * `pending` - pending * `processing` - processing * `retrying` - retrying
	Status StatusEnum `json:"status"`
	// Messages related to the current task status
	StatusText           string `json:"status_text"`
	AdditionalProperties map[string]interface{}
}

type _DeploymentTask DeploymentTask

// NewDeploymentTask instantiates a new DeploymentTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentTask(action DeploymentTaskActionEnum, created time.Time, deployment ClusterDeployment, id string, modified time.Time, retries int32, status StatusEnum, statusText string) *DeploymentTask {
	this := DeploymentTask{}
	this.Action = action
	this.Created = created
	this.Deployment = deployment
	this.Id = id
	this.Modified = modified
	this.Retries = retries
	this.Status = status
	this.StatusText = statusText
	return &this
}

// NewDeploymentTaskWithDefaults instantiates a new DeploymentTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentTaskWithDefaults() *DeploymentTask {
	this := DeploymentTask{}
	return &this
}

// GetAction returns the Action field value
func (o *DeploymentTask) GetAction() DeploymentTaskActionEnum {
	if o == nil {
		var ret DeploymentTaskActionEnum
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *DeploymentTask) GetActionOk() (*DeploymentTaskActionEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *DeploymentTask) SetAction(v DeploymentTaskActionEnum) {
	o.Action = v
}

// GetCreated returns the Created field value
func (o *DeploymentTask) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *DeploymentTask) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *DeploymentTask) SetCreated(v time.Time) {
	o.Created = v
}

// GetDeployment returns the Deployment field value
func (o *DeploymentTask) GetDeployment() ClusterDeployment {
	if o == nil {
		var ret ClusterDeployment
		return ret
	}

	return o.Deployment
}

// GetDeploymentOk returns a tuple with the Deployment field value
// and a boolean to check if the value has been set.
func (o *DeploymentTask) GetDeploymentOk() (*ClusterDeployment, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deployment, true
}

// SetDeployment sets field value
func (o *DeploymentTask) SetDeployment(v ClusterDeployment) {
	o.Deployment = v
}

// GetId returns the Id field value
func (o *DeploymentTask) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeploymentTask) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeploymentTask) SetId(v string) {
	o.Id = v
}

// GetModified returns the Modified field value
func (o *DeploymentTask) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *DeploymentTask) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *DeploymentTask) SetModified(v time.Time) {
	o.Modified = v
}

// GetRetries returns the Retries field value
func (o *DeploymentTask) GetRetries() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Retries
}

// GetRetriesOk returns a tuple with the Retries field value
// and a boolean to check if the value has been set.
func (o *DeploymentTask) GetRetriesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Retries, true
}

// SetRetries sets field value
func (o *DeploymentTask) SetRetries(v int32) {
	o.Retries = v
}

// GetStatus returns the Status field value
func (o *DeploymentTask) GetStatus() StatusEnum {
	if o == nil {
		var ret StatusEnum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *DeploymentTask) GetStatusOk() (*StatusEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *DeploymentTask) SetStatus(v StatusEnum) {
	o.Status = v
}

// GetStatusText returns the StatusText field value
func (o *DeploymentTask) GetStatusText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatusText
}

// GetStatusTextOk returns a tuple with the StatusText field value
// and a boolean to check if the value has been set.
func (o *DeploymentTask) GetStatusTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusText, true
}

// SetStatusText sets field value
func (o *DeploymentTask) SetStatusText(v string) {
	o.StatusText = v
}

func (o DeploymentTask) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	toSerialize["created"] = o.Created
	toSerialize["deployment"] = o.Deployment
	toSerialize["id"] = o.Id
	toSerialize["modified"] = o.Modified
	toSerialize["retries"] = o.Retries
	toSerialize["status"] = o.Status
	toSerialize["status_text"] = o.StatusText

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeploymentTask) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"created",
		"deployment",
		"id",
		"modified",
		"retries",
		"status",
		"status_text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentTask := _DeploymentTask{}

	err = json.Unmarshal(data, &varDeploymentTask)

	if err != nil {
		return err
	}

	*o = DeploymentTask(varDeploymentTask)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "created")
		delete(additionalProperties, "deployment")
		delete(additionalProperties, "id")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "retries")
		delete(additionalProperties, "status")
		delete(additionalProperties, "status_text")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeploymentTask struct {
	value *DeploymentTask
	isSet bool
}

func (v NullableDeploymentTask) Get() *DeploymentTask {
	return v.value
}

func (v *NullableDeploymentTask) Set(val *DeploymentTask) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentTask) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentTask(val *DeploymentTask) *NullableDeploymentTask {
	return &NullableDeploymentTask{value: val, isSet: true}
}

func (v NullableDeploymentTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
