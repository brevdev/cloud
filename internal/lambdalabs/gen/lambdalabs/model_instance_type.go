/*
Lambda Cloud API

API for interacting with the Lambda GPU Cloud

API version: 1.5.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the InstanceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceType{}

// InstanceType Hardware configuration and pricing of an instance type
type InstanceType struct {
	// Name of an instance type
	Name string `json:"name"`
	// Long name of the instance type
	Description string `json:"description"`
	// Description of the GPU(s) in the instance type
	GpuDescription string `json:"gpu_description"`
	// Price of the instance type, in US cents per hour
	PriceCentsPerHour int32             `json:"price_cents_per_hour"`
	Specs             InstanceTypeSpecs `json:"specs"`
}

type _InstanceType InstanceType

// NewInstanceType instantiates a new InstanceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceType(name string, description string, gpuDescription string, priceCentsPerHour int32, specs InstanceTypeSpecs) *InstanceType {
	this := InstanceType{}
	this.Name = name
	this.Description = description
	this.GpuDescription = gpuDescription
	this.PriceCentsPerHour = priceCentsPerHour
	this.Specs = specs
	return &this
}

// NewInstanceTypeWithDefaults instantiates a new InstanceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypeWithDefaults() *InstanceType {
	this := InstanceType{}
	return &this
}

// GetName returns the Name field value
func (o *InstanceType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InstanceType) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *InstanceType) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *InstanceType) SetDescription(v string) {
	o.Description = v
}

// GetGpuDescription returns the GpuDescription field value
func (o *InstanceType) GetGpuDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GpuDescription
}

// GetGpuDescriptionOk returns a tuple with the GpuDescription field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetGpuDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GpuDescription, true
}

// SetGpuDescription sets field value
func (o *InstanceType) SetGpuDescription(v string) {
	o.GpuDescription = v
}

// GetPriceCentsPerHour returns the PriceCentsPerHour field value
func (o *InstanceType) GetPriceCentsPerHour() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PriceCentsPerHour
}

// GetPriceCentsPerHourOk returns a tuple with the PriceCentsPerHour field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetPriceCentsPerHourOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceCentsPerHour, true
}

// SetPriceCentsPerHour sets field value
func (o *InstanceType) SetPriceCentsPerHour(v int32) {
	o.PriceCentsPerHour = v
}

// GetSpecs returns the Specs field value
func (o *InstanceType) GetSpecs() InstanceTypeSpecs {
	if o == nil {
		var ret InstanceTypeSpecs
		return ret
	}

	return o.Specs
}

// GetSpecsOk returns a tuple with the Specs field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetSpecsOk() (*InstanceTypeSpecs, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Specs, true
}

// SetSpecs sets field value
func (o *InstanceType) SetSpecs(v InstanceTypeSpecs) {
	o.Specs = v
}

func (o InstanceType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["gpu_description"] = o.GpuDescription
	toSerialize["price_cents_per_hour"] = o.PriceCentsPerHour
	toSerialize["specs"] = o.Specs
	return toSerialize, nil
}

func (o *InstanceType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"gpu_description",
		"price_cents_per_hour",
		"specs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceType := _InstanceType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstanceType)

	if err != nil {
		return err
	}

	*o = InstanceType(varInstanceType)

	return err
}

type NullableInstanceType struct {
	value *InstanceType
	isSet bool
}

func (v NullableInstanceType) Get() *InstanceType {
	return v.value
}

func (v *NullableInstanceType) Set(val *InstanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceType(val *InstanceType) *NullableInstanceType {
	return &NullableInstanceType{value: val, isSet: true}
}

func (v NullableInstanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
