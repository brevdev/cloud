/*
Infrastructure API

Fluidstack Infrastructure API

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the SlurmNodePoolPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SlurmNodePoolPostRequest{}

// SlurmNodePoolPostRequest POST request for a Slurm node pool
type SlurmNodePoolPostRequest struct {
	// Name of the node pool
	Name string `json:"name"`
	// Instance type of the node pool
	Type string `json:"type"`
	// Number of nodes in the node pool
	Count                int32 `json:"count"`
	AdditionalProperties map[string]interface{}
}

type _SlurmNodePoolPostRequest SlurmNodePoolPostRequest

// NewSlurmNodePoolPostRequest instantiates a new SlurmNodePoolPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlurmNodePoolPostRequest(name string, type_ string, count int32) *SlurmNodePoolPostRequest {
	this := SlurmNodePoolPostRequest{}
	this.Name = name
	this.Type = type_
	this.Count = count
	return &this
}

// NewSlurmNodePoolPostRequestWithDefaults instantiates a new SlurmNodePoolPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlurmNodePoolPostRequestWithDefaults() *SlurmNodePoolPostRequest {
	this := SlurmNodePoolPostRequest{}
	return &this
}

// GetName returns the Name field value
func (o *SlurmNodePoolPostRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SlurmNodePoolPostRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SlurmNodePoolPostRequest) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *SlurmNodePoolPostRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SlurmNodePoolPostRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SlurmNodePoolPostRequest) SetType(v string) {
	o.Type = v
}

// GetCount returns the Count field value
func (o *SlurmNodePoolPostRequest) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *SlurmNodePoolPostRequest) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *SlurmNodePoolPostRequest) SetCount(v int32) {
	o.Count = v
}

func (o SlurmNodePoolPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SlurmNodePoolPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["count"] = o.Count

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SlurmNodePoolPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSlurmNodePoolPostRequest := _SlurmNodePoolPostRequest{}

	err = json.Unmarshal(data, &varSlurmNodePoolPostRequest)

	if err != nil {
		return err
	}

	*o = SlurmNodePoolPostRequest(varSlurmNodePoolPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "count")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSlurmNodePoolPostRequest struct {
	value *SlurmNodePoolPostRequest
	isSet bool
}

func (v NullableSlurmNodePoolPostRequest) Get() *SlurmNodePoolPostRequest {
	return v.value
}

func (v *NullableSlurmNodePoolPostRequest) Set(val *SlurmNodePoolPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSlurmNodePoolPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSlurmNodePoolPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlurmNodePoolPostRequest(val *SlurmNodePoolPostRequest) *NullableSlurmNodePoolPostRequest {
	return &NullableSlurmNodePoolPostRequest{value: val, isSet: true}
}

func (v NullableSlurmNodePoolPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlurmNodePoolPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
