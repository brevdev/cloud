/*
Infrastructure API

Fluidstack Infrastructure API

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Accelerator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Accelerator{}

// Accelerator Hardware details of the kubernetes node
type Accelerator struct {
	// Type of the hardware accelerator
	Type string `json:"type"`
	// Product name of the accelerator
	Product string `json:"product"`
	// Version of the driver for the accelerator
	DriverVersion        string `json:"driverVersion"`
	AdditionalProperties map[string]interface{}
}

type _Accelerator Accelerator

// NewAccelerator instantiates a new Accelerator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccelerator(type_ string, product string, driverVersion string) *Accelerator {
	this := Accelerator{}
	this.Type = type_
	this.Product = product
	this.DriverVersion = driverVersion
	return &this
}

// NewAcceleratorWithDefaults instantiates a new Accelerator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcceleratorWithDefaults() *Accelerator {
	this := Accelerator{}
	return &this
}

// GetType returns the Type field value
func (o *Accelerator) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Accelerator) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Accelerator) SetType(v string) {
	o.Type = v
}

// GetProduct returns the Product field value
func (o *Accelerator) GetProduct() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
func (o *Accelerator) GetProductOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Product, true
}

// SetProduct sets field value
func (o *Accelerator) SetProduct(v string) {
	o.Product = v
}

// GetDriverVersion returns the DriverVersion field value
func (o *Accelerator) GetDriverVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DriverVersion
}

// GetDriverVersionOk returns a tuple with the DriverVersion field value
// and a boolean to check if the value has been set.
func (o *Accelerator) GetDriverVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DriverVersion, true
}

// SetDriverVersion sets field value
func (o *Accelerator) SetDriverVersion(v string) {
	o.DriverVersion = v
}

func (o Accelerator) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Accelerator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["product"] = o.Product
	toSerialize["driverVersion"] = o.DriverVersion

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Accelerator) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"product",
		"driverVersion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccelerator := _Accelerator{}

	err = json.Unmarshal(data, &varAccelerator)

	if err != nil {
		return err
	}

	*o = Accelerator(varAccelerator)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "product")
		delete(additionalProperties, "driverVersion")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccelerator struct {
	value *Accelerator
	isSet bool
}

func (v NullableAccelerator) Get() *Accelerator {
	return v.value
}

func (v *NullableAccelerator) Set(val *Accelerator) {
	v.value = val
	v.isSet = true
}

func (v NullableAccelerator) IsSet() bool {
	return v.isSet
}

func (v *NullableAccelerator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccelerator(val *Accelerator) *NullableAccelerator {
	return &NullableAccelerator{value: val, isSet: true}
}

func (v NullableAccelerator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccelerator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
