/*
Infrastructure API

Fluidstack Infrastructure API

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ProjectsPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectsPostRequest{}

// ProjectsPostRequest POST request for a project
type ProjectsPostRequest struct {
	// Name of the project
	Name string `json:"name"`
	// Tags for the project. Tag keys must be 1â€“63 characters, start and end with alphanumerics, and may include `-`, `_`, and `.`.
	Tags                 *map[string]string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProjectsPostRequest ProjectsPostRequest

// NewProjectsPostRequest instantiates a new ProjectsPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectsPostRequest(name string) *ProjectsPostRequest {
	this := ProjectsPostRequest{}
	this.Name = name
	return &this
}

// NewProjectsPostRequestWithDefaults instantiates a new ProjectsPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectsPostRequestWithDefaults() *ProjectsPostRequest {
	this := ProjectsPostRequest{}
	return &this
}

// GetName returns the Name field value
func (o *ProjectsPostRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectsPostRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectsPostRequest) SetName(v string) {
	o.Name = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ProjectsPostRequest) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsPostRequest) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ProjectsPostRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *ProjectsPostRequest) SetTags(v map[string]string) {
	o.Tags = &v
}

func (o ProjectsPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectsPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProjectsPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectsPostRequest := _ProjectsPostRequest{}

	err = json.Unmarshal(data, &varProjectsPostRequest)

	if err != nil {
		return err
	}

	*o = ProjectsPostRequest(varProjectsPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProjectsPostRequest struct {
	value *ProjectsPostRequest
	isSet bool
}

func (v NullableProjectsPostRequest) Get() *ProjectsPostRequest {
	return v.value
}

func (v *NullableProjectsPostRequest) Set(val *ProjectsPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectsPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectsPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectsPostRequest(val *ProjectsPostRequest) *NullableProjectsPostRequest {
	return &NullableProjectsPostRequest{value: val, isSet: true}
}

func (v NullableProjectsPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectsPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
