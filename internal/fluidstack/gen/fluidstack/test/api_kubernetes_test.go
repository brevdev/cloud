/*
Infrastructure API

Testing KubernetesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/brevdev/cloud/internal/fluidstack/gen/fluidstack"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_KubernetesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test KubernetesAPIService CreateKubernetesCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KubernetesAPI.CreateKubernetesCluster(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KubernetesAPIService CreateKubernetesNodePool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterId string

		resp, httpRes, err := apiClient.KubernetesAPI.CreateKubernetesNodePool(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KubernetesAPIService DeleteKubernetesCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		httpRes, err := apiClient.KubernetesAPI.DeleteKubernetesCluster(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KubernetesAPIService DeleteKubernetesNodePool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterId string
		var nodePoolId string

		httpRes, err := apiClient.KubernetesAPI.DeleteKubernetesNodePool(context.Background(), clusterId, nodePoolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KubernetesAPIService GetKubernetesCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.KubernetesAPI.GetKubernetesCluster(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KubernetesAPIService GetKubernetesClusterCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterId string

		resp, httpRes, err := apiClient.KubernetesAPI.GetKubernetesClusterCredentials(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KubernetesAPIService GetKubernetesNodePool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterId string
		var nodePoolId string

		resp, httpRes, err := apiClient.KubernetesAPI.GetKubernetesNodePool(context.Background(), clusterId, nodePoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KubernetesAPIService ListKubernetesClusters", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KubernetesAPI.ListKubernetesClusters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KubernetesAPIService ListKubernetesNodePools", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterId string

		resp, httpRes, err := apiClient.KubernetesAPI.ListKubernetesNodePools(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
