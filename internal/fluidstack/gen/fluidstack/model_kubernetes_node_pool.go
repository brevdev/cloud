/*
Infrastructure API

Fluidstack Infrastructure API

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the KubernetesNodePool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesNodePool{}

// KubernetesNodePool Kubernetes Node Pool
type KubernetesNodePool struct {
	// Unique identifier of the kubernetes node pool
	Id string `json:"id"`
	// Name of the kubernetes node pool
	Name string `json:"name"`
	// Name of the kubernetes cluster
	Cluster string `json:"cluster"`
	// Instance type of the kubernetes node pool
	Type string `json:"type"`
	// Number of nodes in the kubernetes node pool
	Count int32 `json:"count"`
	// Version of the kubernetes node pool
	Version string `json:"version"`
	// List of nodes in the kubernetes node pool
	Nodes                []KubernetesNode `json:"nodes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KubernetesNodePool KubernetesNodePool

// NewKubernetesNodePool instantiates a new KubernetesNodePool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesNodePool(id string, name string, cluster string, type_ string, count int32, version string) *KubernetesNodePool {
	this := KubernetesNodePool{}
	this.Id = id
	this.Name = name
	this.Cluster = cluster
	this.Type = type_
	this.Count = count
	this.Version = version
	return &this
}

// NewKubernetesNodePoolWithDefaults instantiates a new KubernetesNodePool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesNodePoolWithDefaults() *KubernetesNodePool {
	this := KubernetesNodePool{}
	return &this
}

// GetId returns the Id field value
func (o *KubernetesNodePool) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *KubernetesNodePool) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *KubernetesNodePool) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *KubernetesNodePool) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KubernetesNodePool) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KubernetesNodePool) SetName(v string) {
	o.Name = v
}

// GetCluster returns the Cluster field value
func (o *KubernetesNodePool) GetCluster() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *KubernetesNodePool) GetClusterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *KubernetesNodePool) SetCluster(v string) {
	o.Cluster = v
}

// GetType returns the Type field value
func (o *KubernetesNodePool) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *KubernetesNodePool) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *KubernetesNodePool) SetType(v string) {
	o.Type = v
}

// GetCount returns the Count field value
func (o *KubernetesNodePool) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *KubernetesNodePool) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *KubernetesNodePool) SetCount(v int32) {
	o.Count = v
}

// GetVersion returns the Version field value
func (o *KubernetesNodePool) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *KubernetesNodePool) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *KubernetesNodePool) SetVersion(v string) {
	o.Version = v
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *KubernetesNodePool) GetNodes() []KubernetesNode {
	if o == nil || IsNil(o.Nodes) {
		var ret []KubernetesNode
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesNodePool) GetNodesOk() ([]KubernetesNode, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *KubernetesNodePool) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []KubernetesNode and assigns it to the Nodes field.
func (o *KubernetesNodePool) SetNodes(v []KubernetesNode) {
	o.Nodes = v
}

func (o KubernetesNodePool) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesNodePool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["cluster"] = o.Cluster
	toSerialize["type"] = o.Type
	toSerialize["count"] = o.Count
	toSerialize["version"] = o.Version
	if !IsNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KubernetesNodePool) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"cluster",
		"type",
		"count",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKubernetesNodePool := _KubernetesNodePool{}

	err = json.Unmarshal(data, &varKubernetesNodePool)

	if err != nil {
		return err
	}

	*o = KubernetesNodePool(varKubernetesNodePool)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "cluster")
		delete(additionalProperties, "type")
		delete(additionalProperties, "count")
		delete(additionalProperties, "version")
		delete(additionalProperties, "nodes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKubernetesNodePool struct {
	value *KubernetesNodePool
	isSet bool
}

func (v NullableKubernetesNodePool) Get() *KubernetesNodePool {
	return v.value
}

func (v *NullableKubernetesNodePool) Set(val *KubernetesNodePool) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesNodePool) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesNodePool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesNodePool(val *KubernetesNodePool) *NullableKubernetesNodePool {
	return &NullableKubernetesNodePool{value: val, isSet: true}
}

func (v NullableKubernetesNodePool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesNodePool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
