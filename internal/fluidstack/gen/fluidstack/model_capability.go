/*
Infrastructure API

Fluidstack Infrastructure API

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Capability the model 'Capability'
type Capability string

// List of Capability
const (
	INSTANCESLIST              Capability = "instances:list"
	INSTANCESCREATE            Capability = "instances:create"
	INSTANCESDELETE            Capability = "instances:delete"
	INSTANCESREAD              Capability = "instances:read"
	INSTANCESUPDATE            Capability = "instances:update"
	INSTANCESSTART             Capability = "instances:start"
	INSTANCESSTOP              Capability = "instances:stop"
	FILESYSTEMSLIST            Capability = "filesystems:list"
	FILESYSTEMSCREATE          Capability = "filesystems:create"
	FILESYSTEMSDELETE          Capability = "filesystems:delete"
	FILESYSTEMSREAD            Capability = "filesystems:read"
	FILESYSTEMSUPDATE          Capability = "filesystems:update"
	PROJECTSLIST               Capability = "projects:list"
	PROJECTSCREATE             Capability = "projects:create"
	PROJECTSDELETE             Capability = "projects:delete"
	PROJECTSREAD               Capability = "projects:read"
	PROJECTSUPDATE             Capability = "projects:update"
	KUBERNETESCLUSTERSLIST     Capability = "kubernetes:clusters:list"
	KUBERNETESCLUSTERSCREATE   Capability = "kubernetes:clusters:create"
	KUBERNETESCLUSTERSDELETE   Capability = "kubernetes:clusters:delete"
	KUBERNETESCLUSTERSREAD     Capability = "kubernetes:clusters:read"
	KUBERNETESNODE_POOLSLIST   Capability = "kubernetes:node-pools:list"
	KUBERNETESNODE_POOLSCREATE Capability = "kubernetes:node-pools:create"
	KUBERNETESNODE_POOLSDELETE Capability = "kubernetes:node-pools:delete"
	KUBERNETESNODE_POOLSREAD   Capability = "kubernetes:node-pools:read"
	KUBERNETESCREDENTIALSREAD  Capability = "kubernetes:credentials:read"
	SLURMCLUSTERSLIST          Capability = "slurm:clusters:list"
	SLURMCLUSTERSREAD          Capability = "slurm:clusters:read"
	SLURMCLUSTERSPROXY         Capability = "slurm:clusters:proxy"
	SLURMNODE_POOLSLIST        Capability = "slurm:node-pools:list"
	SLURMNODE_POOLSREAD        Capability = "slurm:node-pools:read"
)

// All allowed values of Capability enum
var AllowedCapabilityEnumValues = []Capability{
	"instances:list",
	"instances:create",
	"instances:delete",
	"instances:read",
	"instances:update",
	"instances:start",
	"instances:stop",
	"filesystems:list",
	"filesystems:create",
	"filesystems:delete",
	"filesystems:read",
	"filesystems:update",
	"projects:list",
	"projects:create",
	"projects:delete",
	"projects:read",
	"projects:update",
	"kubernetes:clusters:list",
	"kubernetes:clusters:create",
	"kubernetes:clusters:delete",
	"kubernetes:clusters:read",
	"kubernetes:node-pools:list",
	"kubernetes:node-pools:create",
	"kubernetes:node-pools:delete",
	"kubernetes:node-pools:read",
	"kubernetes:credentials:read",
	"slurm:clusters:list",
	"slurm:clusters:read",
	"slurm:clusters:proxy",
	"slurm:node-pools:list",
	"slurm:node-pools:read",
}

func (v *Capability) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Capability(value)
	for _, existing := range AllowedCapabilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Capability", value)
}

// NewCapabilityFromValue returns a pointer to a valid Capability
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCapabilityFromValue(v string) (*Capability, error) {
	ev := Capability(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Capability: valid values are %v", v, AllowedCapabilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Capability) IsValid() bool {
	for _, existing := range AllowedCapabilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Capability value
func (v Capability) Ptr() *Capability {
	return &v
}

type NullableCapability struct {
	value *Capability
	isSet bool
}

func (v NullableCapability) Get() *Capability {
	return v.value
}

func (v *NullableCapability) Set(val *Capability) {
	v.value = val
	v.isSet = true
}

func (v NullableCapability) IsSet() bool {
	return v.isSet
}

func (v *NullableCapability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapability(val *Capability) *NullableCapability {
	return &NullableCapability{value: val, isSet: true}
}

func (v NullableCapability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
