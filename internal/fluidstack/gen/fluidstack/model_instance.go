/*
Infrastructure API

Fluidstack Infrastructure API

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Instance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Instance{}

// Instance machine instance
type Instance struct {
	// Unique identifier of the instance
	Id string `json:"id"`
	// Name of the instance
	Name string `json:"name"`
	// Instance type
	Type string `json:"type"`
	// Private IP address of the instance
	Ip    NullableString `json:"ip"`
	State InstanceState  `json:"state"`
	// Operating system image for the instance
	Image string `json:"image"`
	// Whether the instance is preemptible
	Preemptible bool `json:"preemptible"`
	// Whether the instance is ephemeral
	Ephemeral bool `json:"ephemeral"`
	// Base64-encoded cloud-init user data for instance initialization
	UserData NullableString `json:"userData"`
	// List of filesystem UUIDs attached to the instance
	Filesystems []string `json:"filesystems"`
	// Tags for the instance
	Tags                 map[string]string `json:"tags"`
	AdditionalProperties map[string]interface{}
}

type _Instance Instance

// NewInstance instantiates a new Instance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstance(id string, name string, type_ string, ip NullableString, state InstanceState, image string, preemptible bool, ephemeral bool, userData NullableString, filesystems []string, tags map[string]string) *Instance {
	this := Instance{}
	this.Id = id
	this.Name = name
	this.Type = type_
	this.Ip = ip
	this.State = state
	this.Image = image
	this.Preemptible = preemptible
	this.Ephemeral = ephemeral
	this.UserData = userData
	this.Filesystems = filesystems
	this.Tags = tags
	return &this
}

// NewInstanceWithDefaults instantiates a new Instance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceWithDefaults() *Instance {
	this := Instance{}
	return &this
}

// GetId returns the Id field value
func (o *Instance) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Instance) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Instance) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Instance) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Instance) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Instance) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *Instance) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Instance) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Instance) SetType(v string) {
	o.Type = v
}

// GetIp returns the Ip field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Instance) GetIp() string {
	if o == nil || o.Ip.Get() == nil {
		var ret string
		return ret
	}

	return *o.Ip.Get()
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ip.Get(), o.Ip.IsSet()
}

// SetIp sets field value
func (o *Instance) SetIp(v string) {
	o.Ip.Set(&v)
}

// GetState returns the State field value
func (o *Instance) GetState() InstanceState {
	if o == nil {
		var ret InstanceState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Instance) GetStateOk() (*InstanceState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Instance) SetState(v InstanceState) {
	o.State = v
}

// GetImage returns the Image field value
func (o *Instance) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *Instance) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *Instance) SetImage(v string) {
	o.Image = v
}

// GetPreemptible returns the Preemptible field value
func (o *Instance) GetPreemptible() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Preemptible
}

// GetPreemptibleOk returns a tuple with the Preemptible field value
// and a boolean to check if the value has been set.
func (o *Instance) GetPreemptibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Preemptible, true
}

// SetPreemptible sets field value
func (o *Instance) SetPreemptible(v bool) {
	o.Preemptible = v
}

// GetEphemeral returns the Ephemeral field value
func (o *Instance) GetEphemeral() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Ephemeral
}

// GetEphemeralOk returns a tuple with the Ephemeral field value
// and a boolean to check if the value has been set.
func (o *Instance) GetEphemeralOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ephemeral, true
}

// SetEphemeral sets field value
func (o *Instance) SetEphemeral(v bool) {
	o.Ephemeral = v
}

// GetUserData returns the UserData field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Instance) GetUserData() string {
	if o == nil || o.UserData.Get() == nil {
		var ret string
		return ret
	}

	return *o.UserData.Get()
}

// GetUserDataOk returns a tuple with the UserData field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetUserDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserData.Get(), o.UserData.IsSet()
}

// SetUserData sets field value
func (o *Instance) SetUserData(v string) {
	o.UserData.Set(&v)
}

// GetFilesystems returns the Filesystems field value
func (o *Instance) GetFilesystems() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Filesystems
}

// GetFilesystemsOk returns a tuple with the Filesystems field value
// and a boolean to check if the value has been set.
func (o *Instance) GetFilesystemsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filesystems, true
}

// SetFilesystems sets field value
func (o *Instance) SetFilesystems(v []string) {
	o.Filesystems = v
}

// GetTags returns the Tags field value
func (o *Instance) GetTags() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *Instance) GetTagsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tags, true
}

// SetTags sets field value
func (o *Instance) SetTags(v map[string]string) {
	o.Tags = v
}

func (o Instance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Instance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["ip"] = o.Ip.Get()
	toSerialize["state"] = o.State
	toSerialize["image"] = o.Image
	toSerialize["preemptible"] = o.Preemptible
	toSerialize["ephemeral"] = o.Ephemeral
	toSerialize["userData"] = o.UserData.Get()
	toSerialize["filesystems"] = o.Filesystems
	toSerialize["tags"] = o.Tags

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Instance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"type",
		"ip",
		"state",
		"image",
		"preemptible",
		"ephemeral",
		"userData",
		"filesystems",
		"tags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstance := _Instance{}

	err = json.Unmarshal(data, &varInstance)

	if err != nil {
		return err
	}

	*o = Instance(varInstance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "state")
		delete(additionalProperties, "image")
		delete(additionalProperties, "preemptible")
		delete(additionalProperties, "ephemeral")
		delete(additionalProperties, "userData")
		delete(additionalProperties, "filesystems")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstance struct {
	value *Instance
	isSet bool
}

func (v NullableInstance) Get() *Instance {
	return v.value
}

func (v *NullableInstance) Set(val *Instance) {
	v.value = val
	v.isSet = true
}

func (v NullableInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstance(val *Instance) *NullableInstance {
	return &NullableInstance{value: val, isSet: true}
}

func (v NullableInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
