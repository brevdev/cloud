/*
Infrastructure API

Fluidstack Infrastructure API

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the KubernetesNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesNode{}

// KubernetesNode Kubernetes Node
type KubernetesNode struct {
	// Name of the kubernetes node
	Name string `json:"name"`
	// Unique identifier of the instance backing the kubernetes node
	InstanceID string `json:"instanceID"`
	// State of the kubernetes node
	State string `json:"state"`
	// Version of the kubelet running on the kubernetes node
	KubeletVersion string `json:"kubeletVersion"`
	// Creation time of the kubernetes node
	CreatedAt time.Time `json:"createdAt"`
	// Conditions of the kubernetes node
	Conditions  []KubernetesNodeConditionsInner `json:"conditions"`
	Accelerator *Accelerator                    `json:"accelerator,omitempty"`
	// Labels assigned to the kubernetes node
	Labels *map[string]string `json:"labels,omitempty"`
	// Taints applied to the kubernetes node
	Taints               []KubernetesNodeTaintsInner `json:"taints,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KubernetesNode KubernetesNode

// NewKubernetesNode instantiates a new KubernetesNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesNode(name string, instanceID string, state string, kubeletVersion string, createdAt time.Time, conditions []KubernetesNodeConditionsInner) *KubernetesNode {
	this := KubernetesNode{}
	this.Name = name
	this.InstanceID = instanceID
	this.State = state
	this.KubeletVersion = kubeletVersion
	this.CreatedAt = createdAt
	this.Conditions = conditions
	return &this
}

// NewKubernetesNodeWithDefaults instantiates a new KubernetesNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesNodeWithDefaults() *KubernetesNode {
	this := KubernetesNode{}
	return &this
}

// GetName returns the Name field value
func (o *KubernetesNode) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KubernetesNode) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KubernetesNode) SetName(v string) {
	o.Name = v
}

// GetInstanceID returns the InstanceID field value
func (o *KubernetesNode) GetInstanceID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceID
}

// GetInstanceIDOk returns a tuple with the InstanceID field value
// and a boolean to check if the value has been set.
func (o *KubernetesNode) GetInstanceIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceID, true
}

// SetInstanceID sets field value
func (o *KubernetesNode) SetInstanceID(v string) {
	o.InstanceID = v
}

// GetState returns the State field value
func (o *KubernetesNode) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *KubernetesNode) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *KubernetesNode) SetState(v string) {
	o.State = v
}

// GetKubeletVersion returns the KubeletVersion field value
func (o *KubernetesNode) GetKubeletVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KubeletVersion
}

// GetKubeletVersionOk returns a tuple with the KubeletVersion field value
// and a boolean to check if the value has been set.
func (o *KubernetesNode) GetKubeletVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KubeletVersion, true
}

// SetKubeletVersion sets field value
func (o *KubernetesNode) SetKubeletVersion(v string) {
	o.KubeletVersion = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *KubernetesNode) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *KubernetesNode) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *KubernetesNode) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetConditions returns the Conditions field value
func (o *KubernetesNode) GetConditions() []KubernetesNodeConditionsInner {
	if o == nil {
		var ret []KubernetesNodeConditionsInner
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *KubernetesNode) GetConditionsOk() ([]KubernetesNodeConditionsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Conditions, true
}

// SetConditions sets field value
func (o *KubernetesNode) SetConditions(v []KubernetesNodeConditionsInner) {
	o.Conditions = v
}

// GetAccelerator returns the Accelerator field value if set, zero value otherwise.
func (o *KubernetesNode) GetAccelerator() Accelerator {
	if o == nil || IsNil(o.Accelerator) {
		var ret Accelerator
		return ret
	}
	return *o.Accelerator
}

// GetAcceleratorOk returns a tuple with the Accelerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesNode) GetAcceleratorOk() (*Accelerator, bool) {
	if o == nil || IsNil(o.Accelerator) {
		return nil, false
	}
	return o.Accelerator, true
}

// HasAccelerator returns a boolean if a field has been set.
func (o *KubernetesNode) HasAccelerator() bool {
	if o != nil && !IsNil(o.Accelerator) {
		return true
	}

	return false
}

// SetAccelerator gets a reference to the given Accelerator and assigns it to the Accelerator field.
func (o *KubernetesNode) SetAccelerator(v Accelerator) {
	o.Accelerator = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *KubernetesNode) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesNode) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *KubernetesNode) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *KubernetesNode) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetTaints returns the Taints field value if set, zero value otherwise.
func (o *KubernetesNode) GetTaints() []KubernetesNodeTaintsInner {
	if o == nil || IsNil(o.Taints) {
		var ret []KubernetesNodeTaintsInner
		return ret
	}
	return o.Taints
}

// GetTaintsOk returns a tuple with the Taints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesNode) GetTaintsOk() ([]KubernetesNodeTaintsInner, bool) {
	if o == nil || IsNil(o.Taints) {
		return nil, false
	}
	return o.Taints, true
}

// HasTaints returns a boolean if a field has been set.
func (o *KubernetesNode) HasTaints() bool {
	if o != nil && !IsNil(o.Taints) {
		return true
	}

	return false
}

// SetTaints gets a reference to the given []KubernetesNodeTaintsInner and assigns it to the Taints field.
func (o *KubernetesNode) SetTaints(v []KubernetesNodeTaintsInner) {
	o.Taints = v
}

func (o KubernetesNode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["instanceID"] = o.InstanceID
	toSerialize["state"] = o.State
	toSerialize["kubeletVersion"] = o.KubeletVersion
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["conditions"] = o.Conditions
	if !IsNil(o.Accelerator) {
		toSerialize["accelerator"] = o.Accelerator
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Taints) {
		toSerialize["taints"] = o.Taints
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KubernetesNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"instanceID",
		"state",
		"kubeletVersion",
		"createdAt",
		"conditions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKubernetesNode := _KubernetesNode{}

	err = json.Unmarshal(data, &varKubernetesNode)

	if err != nil {
		return err
	}

	*o = KubernetesNode(varKubernetesNode)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "instanceID")
		delete(additionalProperties, "state")
		delete(additionalProperties, "kubeletVersion")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "conditions")
		delete(additionalProperties, "accelerator")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "taints")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKubernetesNode struct {
	value *KubernetesNode
	isSet bool
}

func (v NullableKubernetesNode) Get() *KubernetesNode {
	return v.value
}

func (v *NullableKubernetesNode) Set(val *KubernetesNode) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesNode) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesNode(val *KubernetesNode) *NullableKubernetesNode {
	return &NullableKubernetesNode{value: val, isSet: true}
}

func (v NullableKubernetesNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
