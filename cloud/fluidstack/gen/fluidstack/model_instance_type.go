/*
Infrastructure API

Fluidstack Infrastructure API

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceType{}

// InstanceType Machine instance type
type InstanceType struct {
	// Name of the instance type
	Name string `json:"name"`
	// Number of CPUs the instance type has
	Cpu int32 `json:"cpu"`
	// Amount of memory the instance type has
	Memory string `json:"memory"`
	// GPU model the instance type has
	GpuModel *string `json:"gpuModel,omitempty"`
	// Number of GPUs the instance type has
	GpuCount             *int32 `json:"gpuCount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstanceType InstanceType

// NewInstanceType instantiates a new InstanceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceType(name string, cpu int32, memory string) *InstanceType {
	this := InstanceType{}
	this.Name = name
	this.Cpu = cpu
	this.Memory = memory
	return &this
}

// NewInstanceTypeWithDefaults instantiates a new InstanceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypeWithDefaults() *InstanceType {
	this := InstanceType{}
	return &this
}

// GetName returns the Name field value
func (o *InstanceType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InstanceType) SetName(v string) {
	o.Name = v
}

// GetCpu returns the Cpu field value
func (o *InstanceType) GetCpu() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetCpuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *InstanceType) SetCpu(v int32) {
	o.Cpu = v
}

// GetMemory returns the Memory field value
func (o *InstanceType) GetMemory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetMemoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Memory, true
}

// SetMemory sets field value
func (o *InstanceType) SetMemory(v string) {
	o.Memory = v
}

// GetGpuModel returns the GpuModel field value if set, zero value otherwise.
func (o *InstanceType) GetGpuModel() string {
	if o == nil || IsNil(o.GpuModel) {
		var ret string
		return ret
	}
	return *o.GpuModel
}

// GetGpuModelOk returns a tuple with the GpuModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceType) GetGpuModelOk() (*string, bool) {
	if o == nil || IsNil(o.GpuModel) {
		return nil, false
	}
	return o.GpuModel, true
}

// HasGpuModel returns a boolean if a field has been set.
func (o *InstanceType) HasGpuModel() bool {
	if o != nil && !IsNil(o.GpuModel) {
		return true
	}

	return false
}

// SetGpuModel gets a reference to the given string and assigns it to the GpuModel field.
func (o *InstanceType) SetGpuModel(v string) {
	o.GpuModel = &v
}

// GetGpuCount returns the GpuCount field value if set, zero value otherwise.
func (o *InstanceType) GetGpuCount() int32 {
	if o == nil || IsNil(o.GpuCount) {
		var ret int32
		return ret
	}
	return *o.GpuCount
}

// GetGpuCountOk returns a tuple with the GpuCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceType) GetGpuCountOk() (*int32, bool) {
	if o == nil || IsNil(o.GpuCount) {
		return nil, false
	}
	return o.GpuCount, true
}

// HasGpuCount returns a boolean if a field has been set.
func (o *InstanceType) HasGpuCount() bool {
	if o != nil && !IsNil(o.GpuCount) {
		return true
	}

	return false
}

// SetGpuCount gets a reference to the given int32 and assigns it to the GpuCount field.
func (o *InstanceType) SetGpuCount(v int32) {
	o.GpuCount = &v
}

func (o InstanceType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["cpu"] = o.Cpu
	toSerialize["memory"] = o.Memory
	if !IsNil(o.GpuModel) {
		toSerialize["gpuModel"] = o.GpuModel
	}
	if !IsNil(o.GpuCount) {
		toSerialize["gpuCount"] = o.GpuCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"cpu",
		"memory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceType := _InstanceType{}

	err = json.Unmarshal(data, &varInstanceType)

	if err != nil {
		return err
	}

	*o = InstanceType(varInstanceType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "cpu")
		delete(additionalProperties, "memory")
		delete(additionalProperties, "gpuModel")
		delete(additionalProperties, "gpuCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceType struct {
	value *InstanceType
	isSet bool
}

func (v NullableInstanceType) Get() *InstanceType {
	return v.value
}

func (v *NullableInstanceType) Set(val *InstanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceType(val *InstanceType) *NullableInstanceType {
	return &NullableInstanceType{value: val, isSet: true}
}

func (v NullableInstanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
